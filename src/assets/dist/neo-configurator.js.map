{"version":3,"file":"neo-configurator.js","mappings":"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","sources":["webpack://craft-neo/webpack/bootstrap","webpack://craft-neo/webpack/runtime/compat get default export","webpack://craft-neo/webpack/runtime/define property getters","webpack://craft-neo/webpack/runtime/hasOwnProperty shorthand","webpack://craft-neo/external var \"jQuery\"","webpack://craft-neo/./src/assets/src/jquery-extensions.js","webpack://craft-neo/external var \"Garnish\"","webpack://craft-neo/external var \"Craft\"","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/native.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/rng.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/v4.js","webpack://craft-neo/./src/assets/src/namespace.js","webpack://craft-neo/./src/assets/src/configurator/Item.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeFieldLayout.js","webpack://craft-neo/./src/assets/src/configurator/BlockType.js","webpack://craft-neo/./src/assets/src/configurator/Settings.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeSettings.js","webpack://craft-neo/./src/assets/src/configurator/Group.js","webpack://craft-neo/./src/assets/src/configurator/GroupSettings.js","webpack://craft-neo/./src/assets/src/configurator/Configurator.js","webpack://craft-neo/./src/assets/src/configurator.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = jQuery;","import $ from 'jquery'\n\n// @see http://stackoverflow.com/a/12903503/556609\n$.fn.insertAt = function (index, $parent) {\n  return this.each(function () {\n    if (index === 0) {\n      $parent.prepend(this)\n    } else {\n      $parent.children().eq(index - 1).after(this)\n    }\n  })\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = Garnish;","const __WEBPACK_NAMESPACE_OBJECT__ = Craft;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","export default {\n\n  _stack: [[]],\n\n  enter (segments, join = true) {\n    if (typeof segments === 'string') {\n      segments = this.fromFieldName(segments)\n    }\n\n    if (join) {\n      const joined = this.getNamespace()\n      joined.push(...segments)\n\n      segments = joined\n    }\n\n    this._stack.push(segments)\n  },\n\n  enterByFieldName (fieldName, join = true) {\n    this.enter(this.fromFieldName(fieldName), join)\n  },\n\n  leave () {\n    return this._stack.length > 1\n      ? this._stack.pop()\n      : this.getNamespace()\n  },\n\n  getNamespace () {\n    return Array.from(this._stack[this._stack.length - 1])\n  },\n\n  parse (value) {\n    if (typeof value === 'string') {\n      if (value.indexOf('[') > -1) {\n        return this.fromFieldName(value)\n      }\n\n      if (value.indexOf('-') > -1) {\n        return value.split('-')\n      }\n\n      if (value.indexOf('.') > -1) {\n        return value.split('.')\n      }\n\n      return value\n    }\n\n    return Array.from(value)\n  },\n\n  value (value, separator = '-') {\n    const segments = this.getNamespace()\n    segments.push(value)\n\n    return segments.join(separator)\n  },\n\n  fieldName (fieldName = '') {\n    const prefix = this.toFieldName()\n\n    if (prefix) {\n      return prefix + fieldName.replace(/([^'\"[\\]]+)([^'\"]*)/, '[$1]$2')\n    }\n\n    return fieldName\n  },\n\n  toString (separator = '-') {\n    return this.getNamespace().join(separator)\n  },\n\n  toFieldName () {\n    const segments = this.getNamespace()\n\n    switch (segments.length) {\n      case 0: return ''\n      case 1: return segments[0]\n    }\n\n    return segments[0] + '[' + segments.slice(1).join('][') + ']'\n  },\n\n  fromFieldName (fieldName) {\n    return fieldName.match(/[^[\\]\\s]+/g) || []\n  }\n}\n","import Garnish from 'garnish'\n\nconst _defaults = {\n  settings: null\n}\n\nexport default Garnish.Base.extend({\n\n  $container: null,\n  _field: null,\n  _selected: false,\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n    this._field = settings.field\n    this._settings = settings.settings\n  },\n\n  /**\n   * @since 3.8.0\n   * @returns Promise\n   */\n  load () {\n    return Promise.resolve()\n  },\n\n  /**\n   * @since 3.8.0\n   * @returns the Neo field this item belongs to\n   */\n  getField () {\n    return this._field\n  },\n\n  getSettings () {\n    return this._settings\n  },\n\n  /**\n   * @since 3.8.0\n   */\n  getSortOrder () {\n    return this.$container.index() + 1\n  },\n\n  select () {\n    this.toggleSelect(true)\n  },\n\n  deselect () {\n    this.toggleSelect(false)\n  },\n\n  toggleSelect: function (select) {\n    this._selected = (typeof select === 'boolean' ? select : !this._selected)\n\n    this.trigger('toggleSelect', {\n      selected: this._selected\n    })\n  },\n\n  isSelected () {\n    return this._selected\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: [],\n  html: '',\n  layout: null,\n  id: -1,\n  blockId: null,\n  blockName: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id | 0\n    this._blockTypeId = settings.blockTypeId\n\n    this.$container = $(settings.html).find('.layoutdesigner')\n    this.$container.removeAttr('id')\n\n    const nameInput = this.$container.find('input[name=\"fieldLayout\"]')\n\n    if (nameInput.length > 0) {\n      nameInput[0].name = `neoBlockType${this._blockTypeId}[fieldLayout]`\n\n      if (settings.layout) {\n        nameInput[0].value = JSON.stringify(settings.layout)\n      }\n    }\n\n    NS.enter(this._templateNs)\n\n    this._fld = new Craft.FieldLayoutDesigner(this.$container, {\n      customizableTabs: true,\n      customizableUi: true\n    })\n\n    NS.leave()\n\n    const updateChildBlocksUiElement = () => {\n      const selector = '[data-type=benf-neo-fieldlayoutelements-ChildBlocksUiElement]'\n      const $uiLibraryElement = this._fld.$uiLibraryElements.filter(selector)\n      const $tabUiElement = this._fld.$tabContainer.find(selector)\n      $uiLibraryElement.toggleClass(\n        'hidden',\n        $tabUiElement.length > 0 || $('body.dragging .draghelper' + selector).length > 0\n      )\n      if ($tabUiElement.hasClass('velocity-animating')) {\n        $tabUiElement.removeClass('hidden')\n      }\n    }\n\n    updateChildBlocksUiElement()\n    this._tabObserver = new window.MutationObserver(updateChildBlocksUiElement)\n    this._tabObserver.observe(this._fld.$tabContainer[0], { childList: true, subtree: true })\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getBlockTypeId () {\n    return this._blockTypeId\n  },\n\n  getConfig () {\n    const newConfig = { tabs: [] }\n\n    for (const tab of this._fld.config.tabs) {\n      const newElements = []\n\n      for (const element of tab.elements) {\n        const newElement = {}\n\n        for (const key in element) {\n          newElement[key] = key === 'required' && !element[key] ? '' : element[key]\n        }\n\n        newElements.push(newElement)\n      }\n\n      newConfig.tabs.push({\n        elements: newElements,\n        name: tab.name.slice()\n      })\n    }\n\n    return newConfig\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Item from './Item'\nimport NS from '../namespace'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\n\nconst _defaults = {\n  namespace: [],\n  fieldLayout: null\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n  _loaded: false,\n\n  init (settings = {}) {\n    this.base(settings)\n\n    const settingsObj = this.getSettings()\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._field = settings.field\n    this._fieldLayout = settings.fieldLayout\n    const sidebarItem = this.getField()?.$sidebarContainer.find(`[data-neo-bt=\"container.${this.getId()}`)\n\n    if (sidebarItem?.length > 0) {\n      this.$container = sidebarItem\n    } else {\n      this.$container = this._generateBlockType(settingsObj)\n    }\n\n    const $neo = this.$container.find('[data-neo-bt]')\n    this.$nameText = $neo.filter('[data-neo-bt=\"text.name\"]')\n    this.$handleText = $neo.filter('[data-neo-bt=\"text.handle\"]')\n    this.$moveButton = $neo.filter('[data-neo-bt=\"button.move\"]')\n    this.$actionsButton = $neo.filter('[data-neo-bt=\"button.actions\"]')\n\n    // Set up the actions menu\n    this.$actionsButton.menubtn()\n    this._actionsMenu = this.$actionsButton.data('menubtn')\n    this._actionsMenu.on('optionSelect', e => this['@actionSelect'](e))\n    this.$actionsMenu = this._actionsMenu.menu.$container\n\n    // Stop the actions button click from selecting the block type and closing the menu\n    this.addListener(this.$actionsButton, 'click', e => e.stopPropagation())\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n\n      this._updateTemplate()\n    }\n\n    this.deselect()\n  },\n\n  _generateBlockType (settings) {\n    const sortOrderNamespace = [...this._templateNs]\n    sortOrderNamespace.pop()\n    NS.enter(sortOrderNamespace)\n    const sortOrderName = NS.fieldName('sortOrder')\n    NS.leave()\n    const errors = settings.getErrors()\n    const hasErrors = (Array.isArray(errors) ? errors : Object.keys(errors)).length > 0\n\n    return $(`\n      <div class=\"nc_sidebar_list_item${hasErrors ? ' has-errors' : ''}\" data-neo-bt=\"container.${this.getId()}\">\n        <div class=\"label\" data-neo-bt=\"text.name\">${settings.getName()}</div>\n        <div class=\"smalltext light code\" data-neo-bt=\"text.handle\">${settings.getHandle()}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-bt=\"button.move\"></a>\n        <button class=\"settings icon menubtn\" title=\"${Craft.t('neo', 'Actions')}\" role=\"button\" type=\"button\" data-neo-bt=\"button.actions\"></button>\n        <div class=\"menu\" data-neo-bt=\"container.menu\">\n          <ul class=\"padded\">\n            <li><a data-icon=\"field\" data-action=\"copy\">${Craft.t('neo', 'Copy')}</a></li>\n            <li class=\"disabled\"><a data-icon=\"brush\" data-action=\"paste\">${Craft.t('neo', 'Paste')}</a></li>\n            <li><a data-icon=\"share\" data-action=\"clone\">${Craft.t('neo', 'Clone')}</a></li>\n            <li><a class=\"error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('neo', 'Delete')}</a></li>\n          </ul>\n        </div>\n        <input type=\"hidden\" name=\"${sortOrderName}[]\" value=\"blocktype:${this.getId()}\" data-neo-gs=\"input.sortOrder\">\n      </div>`)\n  },\n\n  getId () {\n    return this.getSettings().getId()\n  },\n\n  getFieldLayout () {\n    return this._fieldLayout\n  },\n\n  /**\n   * @deprecated in 3.8.0, use load() instead\n   */\n  loadFieldLayout () {\n    this.load()\n  },\n\n  /**\n   * @inheritDoc\n   */\n  load () {\n    if (this._loaded) {\n      // Already loaded\n      return Promise.resolve()\n    }\n\n    this.trigger('beforeLoad')\n    this.trigger('beforeLoadFieldLayout') // TODO: remove in 4.0.0\n    const settings = this.getSettings()\n    const layout = settings.getFieldLayoutConfig()\n    const layoutId = settings.getFieldLayoutId()\n    const data = {\n      blockTypeId: this.getId(),\n      layout\n    }\n\n    return new Promise((resolve, reject) => {\n      Craft.sendActionRequest('POST', 'neo/configurator/render-block-type', { data })\n        .then(response => {\n          this._fieldLayout = new BlockTypeFieldLayout({\n            namespace: [...this._templateNs, this._id],\n            html: response.data.layoutHtml,\n            id: layoutId,\n            blockTypeId: data.blockTypeId\n          })\n          this._settings.createContainer({\n            html: response.data.settingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, data.blockTypeId),\n            js: response.data.settingsJs.replace(/__NEOBLOCKTYPE_ID__/g, data.blockTypeId)\n          })\n          this._loaded = true\n\n          this.trigger('afterLoad')\n          this.trigger('afterLoadFieldLayout') // TODO: remove in 4.0.0\n          resolve()\n        })\n        .catch(reject)\n    })\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const fieldLayout = this.getFieldLayout()\n    const selected = this.isSelected()\n\n    if (settings?.$container ?? false) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    if (fieldLayout) {\n      fieldLayout.$container.toggleClass('hidden', !selected)\n    } else if (selected) {\n      this.load()\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n      this.$handleText.text(settings.getHandle())\n      this.$container.toggleClass('is-child', !settings.getTopLevel())\n    }\n  },\n\n  '@actionSelect' (e) {\n    const $option = $(e.option)\n\n    if ($option.hasClass('disabled')) {\n      return\n    }\n\n    this._actionsMenu?.hideMenu()\n\n    switch ($option.attr('data-action')) {\n      case 'copy':\n        this.trigger('copy')\n        break\n      case 'paste':\n        this.trigger('paste')\n        break\n      case 'clone':\n        this.trigger('clone')\n        break\n      case 'delete':\n        if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n          this.getSettings().destroy()\n        }\n    }\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\n\nexport default Garnish.Base.extend({\n\n  $container: new $(),\n\n  /**\n   * @deprecated in 3.8.0\n   */\n  getSortOrder (_) {\n    console.warn('Settings.getSortOrder() is deprecated. Use Item.getSortOrder() instead.')\n  },\n\n  /**\n   * @deprecated in 3.8.0\n   */\n  setSortOrder (_) {\n    console.warn('Settings.setSortOrder() is deprecated and no longer used.')\n  },\n\n  getFocusElement () {\n    return new $()\n  },\n\n  destroy () {\n    this.$foot?.remove()\n    this.trigger('destroy')\n  },\n\n  _refreshSetting ($container, showSetting, animate) {\n    animate = !Garnish.prefersReducedMotion() && (typeof animate === 'boolean' ? animate : true)\n\n    if (animate) {\n      if (showSetting) {\n        if ($container.hasClass('hidden')) {\n          $container\n            .removeClass('hidden')\n            .css({\n              opacity: 0,\n              marginBottom: -($container.outerHeight())\n            })\n            .velocity({\n              opacity: 1,\n              marginBottom: 24\n            }, 'fast')\n        }\n      } else if (!$container.hasClass('hidden')) {\n        $container\n          .css({\n            opacity: 1,\n            marginBottom: 24\n          })\n          .velocity({\n            opacity: 0,\n            marginBottom: -($container.outerHeight())\n          }, 'fast', () => {\n            $container.addClass('hidden')\n          })\n      }\n    } else {\n      $container\n        .toggleClass('hidden', !showSetting)\n        .css('margin-bottom', showSetting ? 24 : '')\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Garnish from 'garnish'\nimport NS from '../namespace'\nimport Settings from './Settings'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  fieldLayoutId: null,\n  fieldLayoutConfig: null,\n  name: '',\n  handle: '',\n  description: '',\n  enabled: true,\n  ignorePermissions: true,\n  minBlocks: 0,\n  maxBlocks: 0,\n  minSiblingBlocks: 0,\n  maxSiblingBlocks: 0,\n  minChildBlocks: 0,\n  maxChildBlocks: 0,\n  topLevel: true,\n  childBlocks: null,\n  childBlockTypes: [],\n  html: null,\n  js: null,\n  errors: {}\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n  _childBlockTypes: [],\n  _initialised: false,\n\n  $container: null,\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $descriptionInput: new $(),\n  $minBlocksInput: new $(),\n  $maxBlocksInput: new $(),\n  $minSiblingBlocksInput: new $(),\n  $maxSiblingBlocksInput: new $(),\n  $minChildBlocksInput: new $(),\n  $maxChildBlocksInput: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._childBlockTypes = []\n    this._childBlocks = settings.childBlocks\n    this._id = settings.id\n    this._fieldLayoutId = settings.fieldLayoutId\n    this._fieldLayoutConfig = settings.fieldLayoutConfig\n    this._errors = settings.errors\n    this._settingsChildBlockTypes = settings.childBlockTypes\n    this._originalSettings = settings\n    this._afterCreateContainer = () => {\n      this.setName(settings.name)\n      this.setHandle(settings.handle)\n      this.setDescription(settings.description)\n      this._setIconId(settings.iconId)\n      this.setEnabled(settings.enabled)\n      this.setIgnorePermissions(settings.ignorePermissions)\n      this.setMinBlocks(settings.minBlocks)\n      this.setMaxBlocks(settings.maxBlocks)\n      this.setMinSiblingBlocks(settings.minSiblingBlocks)\n      this.setMaxSiblingBlocks(settings.maxSiblingBlocks)\n      this.setMinChildBlocks(settings.minChildBlocks)\n      this.setMaxChildBlocks(settings.maxChildBlocks)\n      this.setTopLevel(settings.topLevel)\n    }\n\n    if (typeof settings.html !== 'undefined' && settings.html !== null) {\n      this.createContainer({\n        html: settings.html,\n        js: settings.js\n      })\n    }\n  },\n\n  createContainer (containerData) {\n    // Only create it if it doesn't already exist\n    if (this.$container !== null) {\n      return\n    }\n\n    this.$container = $(containerData.html)\n    this._js = containerData.js ?? ''\n\n    const $neo = this.$container.find('[data-neo-bts]')\n    this.$nameInput = $neo.filter('[data-neo-bts=\"input.name\"]')\n    this.$handleInput = $neo.filter('[data-neo-bts=\"input.handle\"]')\n    this.$descriptionInput = $neo.filter('[data-neo-bts=\"input.description\"]')\n    this.$iconIdContainer = $neo.filter('[data-neo-bts=\"container.iconId\"]')\n    this.$enabledInput = $neo.filter('[data-neo-bts=\"input.enabled\"]')\n    this.$enabledContainer = $neo.filter('[data-neo-bts=\"container.enabled\"]')\n    this.$ignorePermissionsInput = $neo.filter('[data-neo-bts=\"input.ignorePermissions\"]')\n    this.$ignorePermissionsContainer = $neo.filter('[data-neo-bts=\"container.ignorePermissions\"]')\n    this.$minBlocksInput = $neo.filter('[data-neo-bts=\"input.minBlocks\"]')\n    this.$maxBlocksInput = $neo.filter('[data-neo-bts=\"input.maxBlocks\"]')\n    this.$minSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.minSiblingBlocks\"]')\n    this.$maxSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.maxSiblingBlocks\"]')\n    this.$minChildBlocksInput = $neo.filter('[data-neo-bts=\"input.minChildBlocks\"]')\n    this.$minChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.minChildBlocks\"]')\n    this.$maxChildBlocksInput = $neo.filter('[data-neo-bts=\"input.maxChildBlocks\"]')\n    this.$maxChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.maxChildBlocks\"]')\n    this.$topLevelInput = $neo.filter('[data-neo-bts=\"input.topLevel\"]')\n    this.$topLevelContainer = $neo.filter('[data-neo-bts=\"container.topLevel\"]')\n    this.$groupChildBlockTypesInput = $neo.filter('[data-neo-bts=\"input.groupChildBlockTypes\"]')\n    this.$groupChildBlockTypesContainer = $neo.filter('[data-neo-bts=\"container.groupChildBlockTypes\"]')\n    this.$childBlocksInput = $neo.filter('[data-neo-bts=\"input.childBlocks\"]')\n    this.$childBlocksContainer = $neo.filter('[data-neo-bts=\"container.childBlocks\"]')\n    this.$deleteButton = $neo.filter('[data-neo-bts=\"button.delete\"]')\n\n    this._afterCreateContainer()\n  },\n\n  initUi () {\n    // Exit if UI already initialised, or there is no UI to initialise yet\n    if (this._initialised || this.$container === null) {\n      return\n    }\n\n    this.$foot = $(this._js)\n    Garnish.$bod.append(this.$foot)\n\n    Craft.initUiElements(this.$container)\n\n    this._childBlocksSelect = this.$childBlocksInput.data('checkboxSelect')\n    this._enabledLightswitch = this.$enabledInput.data('lightswitch')\n    this._ignorePermissionsLightswitch = this.$ignorePermissionsInput.data('lightswitch')\n    this._topLevelLightswitch = this.$topLevelInput.data('lightswitch')\n    this._groupChildBlockTypesLightswitch = this.$groupChildBlockTypesInput.data('lightswitch')\n    this._handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput)\n\n    // Ensure that an existing block type's handle will not be changed if the name is edited first.\n    if (this.getHandle() !== '') {\n      this._handleGenerator.stopListening()\n    }\n\n    for (const blockType of this._settingsChildBlockTypes) {\n      this.addChildBlockType(blockType)\n    }\n\n    this.setChildBlocks(this._childBlocks)\n\n    this.addListener(this.$nameInput, 'keyup change', () => {\n      this.setName(this.$nameInput.val())\n\n      if (this._handleGenerator.listening) {\n        // Wait for the handle to be auto-updated\n        setTimeout(() => this.setHandle(this.$handleInput.val()), 200)\n      }\n    })\n\n    this.addListener(this.$handleInput, 'keyup change textchange', () => this.setHandle(this.$handleInput.val()))\n    this.addListener(this.$descriptionInput, 'keyup change textchange', () => this.setDescription(this.$descriptionInput.val()))\n    this.addListener(this.$iconIdContainer, 'change', () => {\n      setTimeout(\n        () => {\n          const $iconIdInput = this.$iconIdInput\n          const iconId = $iconIdInput.length > 0 ? $iconIdInput.val() : null\n          this._setIconId(iconId)\n        },\n        500\n      )\n    })\n    this.addListener(this._enabledLightswitch, 'change', () => this.setEnabled(this._enabledLightswitch.on))\n    this.addListener(this._ignorePermissionsLightswitch, 'change', () => this.setIgnorePermissions(this._ignorePermissionsLightswitch.on))\n    this.addListener(this.$minBlocksInput, 'keyup change', () => this.setMinBlocks(this.$minBlocksInput.val()))\n    this.addListener(this.$maxBlocksInput, 'keyup change', () => this.setMaxBlocks(this.$maxBlocksInput.val()))\n    this.addListener(this.$minSiblingBlocksInput, 'keyup change', () => this.setMinSiblingBlocks(this.$minSiblingBlocksInput.val()))\n    this.addListener(this.$maxSiblingBlocksInput, 'keyup change', () => this.setMaxSiblingBlocks(this.$maxSiblingBlocksInput.val()))\n    this.addListener(this.$minChildBlocksInput, 'keyup change', () => this.setMinChildBlocks(this.$minChildBlocksInput.val()))\n    this.addListener(this.$maxChildBlocksInput, 'keyup change', () => this.setMaxChildBlocks(this.$maxChildBlocksInput.val()))\n    this.addListener(this.$topLevelInput, 'change', () => this.setTopLevel(this._topLevelLightswitch.on))\n    this.addListener(this.$groupChildBlockTypesInput, 'change', () => this.setTopLevel(this._groupChildBlockTypesLightswitch.on))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n        this.destroy()\n      }\n    })\n\n    this.$childBlocksInput.on('change', 'input', () => this._refreshChildBlockSettings())\n\n    this._initialised = true\n  },\n\n  _generateChildBlocksCheckbox (settings) {\n    NS.enter(this._templateNs)\n    const id = NS.value('childBlock-' + settings.getId(), '-')\n    const name = NS.fieldName('childBlocks')\n    NS.leave()\n\n    return $(`\n      <div data-neo-btsc=\"container.${settings.getId()}\">\n        <input type=\"checkbox\" value=\"${settings.getHandle()}\" id=\"${id}\" class=\"checkbox\" name=\"${name}[]\" data-neo-btsc=\"input.${settings.getId()}\">\n        <label for=\"${id}\" data-neo-btsc=\"text.label\">${settings.getName()}</label>\n      </div>`)\n  },\n\n  get $iconIdInput () {\n    return this.$iconIdContainer.find('input[type=\"hidden\"]')\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getFieldLayoutId () {\n    return this._fieldLayoutId\n  },\n\n  getFieldLayoutConfig () {\n    return Object.assign({}, this._fieldLayoutConfig)\n  },\n\n  isNew () {\n    return /^new/.test(this.getId())\n  },\n\n  getErrors () {\n    return this._errors\n  },\n\n  /**\n   * @deprecated in 3.8.0\n   */\n  setSortOrder (_) {\n    console.warn('BlockTypeSettings.setSortOrder() is deprecated and no longer used.')\n  },\n\n  getName () { return this._name ?? this._originalSettings.name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      if (this.$nameInput.val() !== this._name) {\n        this.$nameInput.val(this._name)\n      }\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getHandle () { return this._handle ?? this._originalSettings.handle },\n  setHandle (handle) {\n    if (handle !== this._handle) {\n      const oldHandle = this._handle\n      this._handle = handle\n\n      if (this.$handleInput.val() !== this._handle) {\n        this.$handleInput.val(this._handle)\n      }\n\n      this.trigger('change', {\n        property: 'handle',\n        oldValue: oldHandle,\n        newValue: this._handle\n      })\n    }\n  },\n\n  getDescription () { return this._description },\n  setDescription (description) {\n    if (description !== this._description) {\n      const oldDescription = this._description\n      this._description = description\n\n      if (this.$descriptionInput.val() !== this._description) {\n        this.$descriptionInput.val(this._description)\n      }\n\n      this.trigger('change', {\n        property: 'description',\n        oldValue: oldDescription,\n        newValue: this._description\n      })\n    }\n  },\n\n  getIconId () { return this._iconId },\n  _setIconId (iconId) {\n    if (iconId !== this._iconId) {\n      const oldIconId = this._iconId\n      this._iconId = iconId\n\n      if (this.$iconIdInput.val() !== this._iconId) {\n        // TODO\n        // This is normally where we would reset the input value, but since the icon ID setting is an asset field, we\n        // would also need to update the element HTML. This would be good to implement in the future, and then this\n        // method could be made public.\n      }\n\n      this.trigger('change', {\n        property: 'iconId',\n        oldValue: oldIconId,\n        newValue: this._iconId\n      })\n    }\n  },\n\n  getEnabled () { return this._enabled },\n  setEnabled (enabled) { this._setLightswitchField('enabled', enabled) },\n\n  getIgnorePermissions () { return this._ignorePermissions },\n  setIgnorePermissions (ignore) { this._setLightswitchField('ignorePermissions', ignore) },\n\n  getMinBlocks () { return this._minBlocks },\n  setMinBlocks (minBlocks) { this._setBlocksConstraint('minBlocks', minBlocks) },\n\n  getMaxBlocks () { return this._maxBlocks },\n  setMaxBlocks (maxBlocks) { this._setBlocksConstraint('maxBlocks', maxBlocks) },\n\n  getMinSiblingBlocks () { return this._minSiblingBlocks },\n  setMinSiblingBlocks (minSiblingBlocks) { this._setBlocksConstraint('minSiblingBlocks', minSiblingBlocks) },\n\n  getMaxSiblingBlocks () { return this._maxSiblingBlocks },\n  setMaxSiblingBlocks (maxSiblingBlocks) { this._setBlocksConstraint('maxSiblingBlocks', maxSiblingBlocks) },\n\n  getMinChildBlocks () { return this._minChildBlocks },\n  getMaxChildBlocks () { return this._maxChildBlocks },\n  setMinChildBlocks (minChildBlocks) { this._setBlocksConstraint('minChildBlocks', minChildBlocks) },\n  setMaxChildBlocks (maxChildBlocks) { this._setBlocksConstraint('maxChildBlocks', maxChildBlocks) },\n  _setBlocksConstraint (mode, value) {\n    const privateProp = `_${mode}`\n    const jqueryProp = `$${mode}Input`\n    const oldValue = this[privateProp]\n    const newValue = Math.max(0, value | 0)\n\n    if (newValue === 0) {\n      this[jqueryProp].val(null)\n    }\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[privateProp] > 0 && parseInt(this[jqueryProp].val()) !== this[privateProp]) {\n        this[jqueryProp].val(this[privateProp])\n      }\n\n      this.trigger('change', {\n        property: mode,\n        oldValue,\n        newValue: this[privateProp]\n      })\n    }\n  },\n\n  getTopLevel () { return this._topLevel ?? this._originalSettings.topLevel },\n  setTopLevel (topLevel) { this._setLightswitchField('topLevel', topLevel) },\n\n  _setLightswitchField (property, value) {\n    const privateProp = `_${property}`\n    const lightswitchProp = `${privateProp}Lightswitch`\n    const oldValue = this[privateProp]\n    const newValue = !!value\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[lightswitchProp] && this[lightswitchProp].on !== this[privateProp]) {\n        this[lightswitchProp].on = this[privateProp]\n        this[lightswitchProp].toggle()\n      }\n\n      this.trigger('change', {\n        property,\n        oldValue,\n        newValue\n      })\n    }\n  },\n\n  getChildBlocks () {\n    const select = this._childBlocksSelect\n    const childBlocks = []\n\n    if (typeof select === 'undefined') {\n      return this._childBlocks === true ? true : Array.from(this._childBlocks ?? [])\n    }\n\n    if (select.$all.prop('checked')) {\n      return true\n    }\n\n    select.$options.each(function (index) {\n      const $option = $(this)\n\n      if ($option.prop('checked')) {\n        childBlocks.push($option.val())\n      }\n    })\n\n    return childBlocks.length > 0 ? childBlocks : false\n  },\n\n  setChildBlocks (childBlocks) {\n    if (typeof childBlocks === 'undefined') {\n      childBlocks = this._childBlocks\n    }\n\n    const select = this._childBlocksSelect\n\n    if (childBlocks === true || childBlocks === '*') {\n      select.$all.prop('checked', true)\n      select.onAllChange()\n    } else if (Array.isArray(childBlocks)) {\n      select.$all.prop('checked', false)\n\n      for (const handle of childBlocks) {\n        select.$options.filter(`[value=\"${handle}\"]`).prop('checked', true)\n      }\n    } else {\n      select.$all.prop('checked', false)\n      select.$options.prop('checked', false)\n    }\n\n    this._refreshChildBlockSettings(false)\n  },\n\n  addChildBlockType (blockType) {\n    if (!this._childBlockTypes.includes(blockType)) {\n      const settings = blockType.getSettings()\n      const $existingCheckbox = this.$childBlocksContainer.find(`[data-neo-btsc=\"input.${settings.getId()}\"]`)\n      const $checkbox = $existingCheckbox.length > 0\n        ? $existingCheckbox\n        : this._generateChildBlocksCheckbox(settings)\n\n      this._childBlockTypes.push(blockType)\n\n      if ($existingCheckbox.length === 0) {\n        this.$childBlocksContainer.append($checkbox)\n        this._refreshChildBlockType(blockType)\n      }\n\n      const select = this._childBlocksSelect\n      const allChecked = select.$all.prop('checked')\n      select.$options = select.$options.add($checkbox.find('input'))\n      if (allChecked) select.onAllChange()\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.on('change' + eventNs, e => this['@onChildBlockTypeChange'](e, blockType, $checkbox))\n      settings.on('destroy' + eventNs, e => this.removeChildBlockType(blockType))\n    }\n  },\n\n  removeChildBlockType (blockType) {\n    const index = this._childBlockTypes.indexOf(blockType)\n    if (index >= 0) {\n      this._childBlockTypes.splice(index, 1)\n\n      const settings = blockType.getSettings()\n      const $checkbox = this.$childBlocksContainer.children().eq(index)\n\n      $checkbox.remove()\n\n      const select = this._childBlocksSelect\n      select.$options = select.$options.remove($checkbox.find('input'))\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.off(eventNs)\n\n      this._refreshChildBlockType(blockType)\n    }\n  },\n\n  getConditions () {\n    NS.enter(this._templateNs)\n    const baseInputName = NS.toFieldName().replaceAll('\\\\', '\\\\\\\\')\n    NS.leave()\n    const baseConditionInputNameWithExtraSlash = `${baseInputName}[conditions]`\n    const baseConditionInputName = baseConditionInputNameWithExtraSlash.replaceAll('\\\\\\\\', '\\\\')\n    const conditionInputNames = this.$container\n      .find(`[name^=\"${baseConditionInputNameWithExtraSlash}\"]`)\n      .get()\n      .map((condition) => condition.name)\n\n    const allFormData = new window.FormData(this.$container.closest('form').get(0))\n    const conditionsData = {}\n\n    conditionInputNames.forEach((conditionInputName) => {\n      let conditionsSubData = conditionsData\n      const conditionsCurrentPath = [baseConditionInputName]\n      const conditionsDataPath = conditionInputName\n        .replace(baseConditionInputName, '')\n        .slice(1, -1)\n        .split('][')\n\n      conditionsDataPath.forEach((pathStep, i) => {\n        conditionsCurrentPath.push(`[${pathStep}]`)\n\n        if (pathStep !== '' && !(pathStep in conditionsSubData)) {\n          if (pathStep === 'values') {\n            conditionsSubData[pathStep] = []\n          } else if (i < conditionsDataPath.length - 1) {\n            conditionsSubData[pathStep] = {}\n          } else {\n            conditionsSubData[pathStep] = allFormData.get(conditionsCurrentPath.join(''))\n          }\n        } else if (pathStep === '') {\n          conditionsSubData.push(...allFormData.getAll(conditionsCurrentPath.join('')))\n        }\n\n        conditionsSubData = conditionsSubData[pathStep]\n      })\n    })\n\n    return conditionsData\n  },\n\n  /**\n   * @since 3.8.0\n   */\n  refreshChildBlockTypes (childBlockTypes) {\n    if (childBlockTypes) {\n      this._childBlockTypes = childBlockTypes\n    }\n\n    this._childBlockTypes.forEach((childBlockType) => this._refreshChildBlockType(childBlockType))\n  },\n\n  _refreshChildBlockType (blockType) {\n    const $sidebarContainer = blockType.getField().$sidebarContainer\n    const $sidebarItem = $sidebarContainer.find(`[data-neo-bt=\"container.${blockType.getId()}\"]`)\n    let $refreshedBlockType = this.$childBlocksContainer.children(`[data-neo-btsc=\"container.${blockType.getId()}\"]`)\n\n    if ($refreshedBlockType.length === 0) {\n      // New block type, create checkbox\n      $refreshedBlockType = this._generateChildBlocksCheckbox(blockType.getSettings())\n    }\n\n    if ($sidebarItem.length > 0) {\n      // Block type reordered\n      const position = $sidebarItem.index('.nc_sidebar_list_item:not(.type-heading)')\n      const $currentChildBlockTypeAtPos = this.$childBlocksContainer.children().eq(position)\n\n      if ($currentChildBlockTypeAtPos.length > 0) {\n        $refreshedBlockType.insertBefore($currentChildBlockTypeAtPos)\n      } else {\n        // Added to the end\n        $refreshedBlockType.appendTo(this.$childBlocksContainer)\n      }\n    } else {\n      // Block type deleted\n      $refreshedBlockType.remove()\n    }\n  },\n\n  _refreshChildBlockSettings (animate) {\n    const showSettings = !!this.getChildBlocks()\n    this._refreshSetting(this.$minChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$maxChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$groupChildBlockTypesContainer, showSettings, animate)\n  },\n\n  '@onChildBlockTypeChange' (e, blockType, $checkbox) {\n    const $neo = $checkbox.find('[data-neo-btsc]')\n    const $input = $neo.filter('[data-neo-btsc=\"input\"]')\n    const $labelText = $neo.filter('[data-neo-btsc=\"text.label\"]')\n\n    switch (e.property) {\n      case 'name':\n        $labelText.text(e.newValue)\n        break\n\n      case 'handle':\n        $input.val(e.newValue)\n        break\n    }\n  }\n},\n{\n  _totalNewBlockTypes: 0,\n\n  getNewId () {\n    return `new${this._totalNewBlockTypes++}`\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Item from './Item'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: []\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    this.base(settings)\n\n    settings = Object.assign({}, _defaults, settings)\n\n    const settingsObj = this.getSettings()\n    this._templateNs = NS.parse(settings.namespace)\n    const sidebarItem = this.getField()?.$sidebarContainer.find(`[data-neo-g=\"container.${this.getId()}`)\n\n    if (sidebarItem?.length > 0) {\n      this.$container = sidebarItem\n    } else {\n      this.$container = this._generateGroup(settingsObj)\n    }\n\n    const $neo = this.$container.find('[data-neo-g]')\n    this.$nameText = $neo.filter('[data-neo-g=\"text.name\"]')\n    this.$moveButton = $neo.filter('[data-neo-g=\"button.move\"]')\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n    }\n\n    this.deselect()\n  },\n\n  _generateGroup (settings) {\n    const sortOrderNamespace = [...this._templateNs]\n    sortOrderNamespace.pop()\n    NS.enter(sortOrderNamespace)\n    const sortOrderName = NS.fieldName('sortOrder')\n    NS.leave()\n\n    return $(`\n      <div class=\"nc_sidebar_list_item type-heading\" data-neo-g=\"container.${this.getId()}\">\n        <div class=\"label\" data-neo-g=\"text.name\">${settings.getName() ?? ''}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-g=\"button.move\"></a>\n        <input type=\"hidden\" name=\"${sortOrderName}[]\" value=\"group:${this.getId()}\" data-neo-g=\"input.sortOrder\">\n      </div>`)\n  },\n\n  /**\n   * @inheritDoc\n   */\n  load () {\n    if (this._loaded) {\n      // Already loaded\n      return Promise.resolve()\n    }\n\n    this.trigger('beforeLoad')\n    const data = {\n      groupId: this.getId()\n    }\n\n    return new Promise((resolve, reject) => {\n      Craft.sendActionRequest('POST', 'neo/configurator/render-block-type-group', { data })\n        .then(response => {\n          this.getSettings().createContainer({\n            html: response.data.settingsHtml.replace(/__NEOBLOCKTYPEGROUP_ID__/g, data.groupId),\n            js: response.data.settingsJs.replace(/__NEOBLOCKTYPEGROUP_ID__/g, data.groupId)\n          })\n          this._loaded = true\n\n          this.trigger('afterLoad')\n          resolve()\n        })\n        .catch(reject)\n    })\n  },\n\n  getId () {\n    return this.getSettings().getId()\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const selected = this.isSelected()\n\n    if (settings?.$container ?? false) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    if (selected) {\n      this.load()\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport NS from '../namespace'\nimport Settings from './Settings'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  name: '',\n  alwaysShowDropdown: null,\n  defaultAlwaysShowGroupDropdowns: true\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n\n  $container: null,\n  $sortOrderInput: new $(),\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $maxBlocksInput: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id\n    this._alwaysShowDropdown = settings.alwaysShowDropdown\n    this._defaultAlwaysShowGroupDropdowns = settings.defaultAlwaysShowGroupDropdowns\n    this._originalSettings = settings\n\n    if (typeof settings.html !== 'undefined' && settings.html !== null) {\n      this.createContainer({\n        html: settings.html,\n        js: settings.js\n      })\n    }\n  },\n\n  createContainer (containerData) {\n    // Only create it if it doesn't already exist\n    if (this.$container !== null) {\n      return\n    }\n\n    this.$container = $(containerData.html)\n    this._js = containerData.js ?? ''\n\n    const $neo = this.$container.find('[data-neo-gs]')\n    this.$nameInput = $neo.filter('[data-neo-gs=\"input.name\"]')\n    this.$deleteButton = $neo.filter('[data-neo-gs=\"button.delete\"]')\n    this.$alwaysShowDropdownContainer = $neo.filter('[data-neo-gs=\"container.alwaysShowDropdown\"]')\n\n    this.setName(this._originalSettings.name)\n\n    this.addListener(this.$nameInput, 'keyup change', () => this.setName(this.$nameInput.val()))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this group?'))) {\n        this.destroy()\n      }\n    })\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  /**\n   * @deprecated in 3.8.0\n   */\n  setSortOrder (_) {\n    console.warn('GroupSettings.setSortOrder() is deprecated and no longer used.')\n  },\n\n  getName () { return this._name ?? this._originalSettings.name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      this.$nameInput.val(this._name)\n      this._refreshAlwaysShowDropdown()\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getAlwaysShowDropdown () { return this._alwaysShowDropdown ?? this._originalSettings.alwaysShowDropdown },\n\n  _refreshAlwaysShowDropdown (animate) {\n    this._refreshSetting(this.$alwaysShowDropdownContainer, !!this._name, animate)\n  }\n},\n{\n  _totalNewGroups: 0,\n\n  getNewId () {\n    return `new${this._totalNewGroups++}`\n  }\n})\n","import $ from 'jquery'\nimport '../jquery-extensions'\n\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport { v4 as uuidv4 } from 'uuid'\nimport NS from '../namespace'\n\nimport BlockType from './BlockType'\nimport BlockTypeSettings from './BlockTypeSettings'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\nimport Group from './Group'\nimport GroupSettings from './GroupSettings'\nimport './styles/configurator.scss'\n\nconst _defaults = {\n  namespace: [],\n  blockTypes: [],\n  groups: [],\n  blockTypeSettingsHtml: '',\n  blockTypeSettingsJs: '',\n  fieldLayoutHtml: '',\n  groupSettingsHtml: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n  _items: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    const inputIdPrefix = Craft.formatInputId(settings.namespace)\n    const $field = $(`#${inputIdPrefix}-neo-configurator`)\n    this.$container = $field.children('.field').children('.input')\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._blockTypeSettingsHtml = settings.blockTypeSettingsHtml\n    this._blockTypeSettingsJs = settings.blockTypeSettingsJs\n    this._fieldLayoutHtml = settings.fieldLayoutHtml\n    this._blockTypeGroupSettingsHtml = settings.blockTypeGroupSettingsHtml\n    this._items = []\n\n    const $neo = this.$container.find('[data-neo]')\n    this.$mainContainer = $neo.filter('[data-neo=\"container.main\"]')\n    this.$sidebarContainer = $neo.filter('[data-neo=\"container.sidebar\"]')\n    this.$blockTypesContainer = $neo.filter('[data-neo=\"container.blockTypes\"]')\n    this.$settingsContainer = $neo.filter('[data-neo=\"container.settings\"]')\n    this.$fieldLayoutContainer = $neo.filter('[data-neo=\"container.fieldLayout\"]')\n    this.$blockTypeButton = $neo.filter('[data-neo=\"button.blockType\"]')\n    this.$groupButton = $neo.filter('[data-neo=\"button.group\"]')\n    this.$settingsButton = $neo.filter('[data-neo=\"button.settings\"]')\n    this.$fieldLayoutButton = $neo.filter('[data-neo=\"button.fieldLayout\"]')\n\n    this._itemSort = new Garnish.DragSort(null, {\n      container: this.$blockTypesContainer,\n      handle: '[data-neo-bt=\"button.move\"], [data-neo-g=\"button.move\"]',\n      axis: 'y',\n      onSortChange: () => this._updateItemOrder()\n    })\n\n    // Add the existing block types and groups\n    const existingItems = []\n    const btNamespace = [...this._templateNs, 'items', 'blockTypes']\n    const gNamespace = [...this._templateNs, 'items', 'groups']\n\n    for (const btInfo of settings.blockTypes) {\n      const btSettings = new BlockTypeSettings({\n        namespace: [...btNamespace, btInfo.id],\n        sortOrder: btInfo.sortOrder,\n        id: btInfo.id,\n        name: btInfo.name,\n        handle: btInfo.handle,\n        description: btInfo.description,\n        iconId: btInfo.iconId,\n        enabled: btInfo.enabled,\n        ignorePermissions: btInfo.ignorePermissions,\n        minBlocks: btInfo.minBlocks,\n        maxBlocks: btInfo.maxBlocks,\n        minSiblingBlocks: btInfo.minSiblingBlocks,\n        maxSiblingBlocks: btInfo.maxSiblingBlocks,\n        minChildBlocks: btInfo.minChildBlocks,\n        maxChildBlocks: btInfo.maxChildBlocks,\n        topLevel: btInfo.topLevel,\n        html: btInfo.settingsHtml,\n        js: btInfo.settingsJs,\n        errors: btInfo.errors,\n        fieldLayoutId: btInfo.fieldLayoutId,\n        fieldLayoutConfig: btInfo.fieldLayoutConfig,\n        childBlocks: btInfo.childBlocks,\n        childBlockTypes: existingItems.filter(item => item instanceof BlockType)\n      })\n\n      const blockType = new BlockType({\n        namespace: btNamespace,\n        field: this,\n        settings: btSettings\n      })\n\n      blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n      blockType.on('paste.configurator', () => this._pasteBlockType())\n      blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType))\n      blockType.on('beforeLoad.configurator', () => {\n        this.$fieldLayoutContainer.append(\n          $('<span class=\"spinner\"/></span>')\n        )\n        this.$settingsContainer.append(\n          $('<span class=\"spinner\"/></span>')\n        )\n      })\n      blockType.on('afterLoad.configurator', () => {\n        this.$fieldLayoutContainer.children('.spinner').remove()\n        this.$settingsContainer.children('.spinner').remove()\n        this.addItem(blockType)\n        const blockTypeSettings = blockType.getSettings()\n        blockTypeSettings?.refreshChildBlockTypes(this.getBlockTypes())\n        blockTypeSettings?.setChildBlocks()\n      })\n      existingItems.push(blockType)\n    }\n\n    for (const gInfo of settings.groups) {\n      const gSettings = new GroupSettings({\n        namespace: [...gNamespace, gInfo.id],\n        sortOrder: gInfo.sortOrder,\n        id: gInfo.id,\n        name: gInfo.name,\n        alwaysShowDropdown: gInfo.alwaysShowDropdown,\n        defaultAlwaysShowGroupDropdowns: settings.defaultAlwaysShowGroupDropdowns\n      })\n\n      const group = new Group({\n        namespace: gNamespace,\n        field: this,\n        settings: gSettings\n      })\n\n      group.on('beforeLoad.configurator', () => this.$settingsContainer.append(\n        $('<span class=\"spinner\"/></span>')\n      ))\n      group.on('afterLoad.configurator', () => {\n        this.$settingsContainer.children('.spinner').remove()\n        this.addItem(group)\n      })\n      existingItems.push(group)\n    }\n\n    for (const item of existingItems.sort((a, b) => a.getSortOrder() - b.getSortOrder())) {\n      this.addItem(item)\n    }\n\n    for (const blockType of this.getBlockTypes()) {\n      const btSettings = blockType.getSettings()\n\n      if (btSettings?.$container) {\n        const info = settings.blockTypes.find(i => i.handle === btSettings.getHandle())\n        btSettings.setChildBlocks(info.childBlocks)\n      }\n    }\n\n    // Make sure menu states (for pasting block types) are updated when changing tabs\n    const refreshPasteOptions = () => {\n      const noPasteData = !window.localStorage.getItem('neo:copyBlockType')\n\n      for (const blockType of this.getBlockTypes()) {\n        blockType.$actionsMenu.find('[data-action=\"paste\"]').parent().toggleClass('disabled', noPasteData)\n      }\n    }\n\n    refreshPasteOptions()\n    this.addListener(document, 'visibilitychange.configurator', refreshPasteOptions)\n\n    this.selectTab('settings')\n\n    this.addListener(this.$blockTypeButton, 'click', '@newBlockType')\n    this.addListener(this.$groupButton, 'click', '@newGroup')\n    this.addListener(this.$settingsButton, 'click', () => this.selectTab('settings'))\n    this.addListener(this.$fieldLayoutButton, 'click', () => this.selectTab('fieldLayout'))\n  },\n\n  addItem (item, index = -1) {\n    const settings = item.getSettings()\n\n    if (!document.contains(item.$container[0])) {\n      this._insertAt(item.$container, index)\n    }\n\n    if (this._itemSort.$items.filter(item.$container).length === 0) {\n      this._itemSort.addItems(item.$container)\n    }\n\n    if (settings?.$container) {\n      this.$settingsContainer.append(settings.$container)\n\n      if (item instanceof BlockType) {\n        settings.initUi()\n      }\n    }\n\n    this.$mainContainer.removeClass('hidden')\n\n    this.addListener(item.$container, 'click', '@selectItem')\n    item.on('destroy.configurator', () => this.removeItem(item, false))\n\n    if (item instanceof BlockType) {\n      this._addFieldLayout(item.getFieldLayout())\n    }\n\n    this._items.push(item)\n\n    // Only bother updating the item order if the item wasn't just being appended\n    if (index >= 0 && index < this._items.length - 1) {\n      this._updateItemOrder()\n    }\n\n    if (item instanceof BlockType) {\n      for (const blockType of this.getBlockTypes()) {\n        const btSettings = blockType.getSettings()\n        if (btSettings?.$container) {\n          btSettings.addChildBlockType(item)\n        }\n      }\n    }\n\n    this.trigger('addItem', {\n      item,\n      index\n    })\n  },\n\n  _addFieldLayout (fieldLayout) {\n    if (fieldLayout) {\n      this.$fieldLayoutContainer.append(fieldLayout.$container)\n    }\n  },\n\n  removeItem (item, showConfirm) {\n    showConfirm = (typeof showConfirm === 'boolean' ? showConfirm : false)\n\n    if (showConfirm) {\n      const message = Craft.t('neo', 'Are you sure you want to delete this {type}?', {\n        type:\n        item instanceof BlockType\n          ? 'block type'\n          : item instanceof Group\n            ? 'group'\n            : 'item'\n      })\n\n      if (window.confirm(message)) {\n        this.removeItem(item, false)\n      }\n    } else {\n      const settings = item.getSettings()\n\n      this._itemSort.removeItems(item.$container)\n\n      item.$container.remove()\n\n      if (settings?.$container) {\n        settings.$container.remove()\n      }\n\n      if (item instanceof BlockType) {\n        const fieldLayout = item.getFieldLayout()\n        if (fieldLayout) fieldLayout.$container.remove()\n      }\n\n      this.removeListener(item.$container, 'click')\n      item.off('.configurator')\n\n      this._items = this._items.filter((oldItem) => oldItem !== item)\n\n      if (this._items.length === 0) {\n        this.$mainContainer.addClass('hidden')\n      }\n\n      this.trigger('removeItem', {\n        item\n      })\n    }\n  },\n\n  getItems () {\n    return Array.from(this._items)\n  },\n\n  getItemByElement ($element) {\n    return this._items.find(item => item.$container.is($element))\n  },\n\n  getSelectedItem () {\n    return this._items.find(item => item.isSelected())\n  },\n\n  selectItem (item, focusInput) {\n    focusInput = (typeof focusInput === 'boolean' ? focusInput : true)\n\n    const settings = item ? item.getSettings() : null\n\n    for (const i of this._items) {\n      const thisIsTheItem = i === item\n      i.toggleSelect(thisIsTheItem)\n\n      if (thisIsTheItem) {\n        const itemIsGroup = !(i instanceof BlockType)\n        this.$fieldLayoutButton.toggleClass('hidden', itemIsGroup)\n\n        if (itemIsGroup) {\n          this.selectTab('settings')\n        }\n      }\n    }\n\n    Craft.ElementThumbLoader.retryAll()\n\n    if (focusInput && settings && !Garnish.isMobileBrowser()) {\n      setTimeout(() => settings.getFocusInput().focus(), 100)\n    }\n  },\n\n  getBlockTypes () {\n    return this._items.filter(item => item instanceof BlockType)\n  },\n\n  getGroups () {\n    return this._items.filter(item => item instanceof Group)\n  },\n\n  selectTab (tab) {\n    this.$settingsContainer.toggleClass('hidden', tab !== 'settings')\n    this.$fieldLayoutContainer.toggleClass('hidden', tab !== 'fieldLayout')\n\n    this.$settingsButton.toggleClass('is-selected', tab === 'settings')\n    this.$fieldLayoutButton.toggleClass('is-selected', tab === 'fieldLayout')\n  },\n\n  _getNewBlockTypeSettingsHtml (blockTypeId) {\n    return this._blockTypeSettingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewBlockTypeSettingsJs (blockTypeId) {\n    return this._blockTypeSettingsJs.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewFieldLayoutHtml () {\n    return this._fieldLayoutHtml.replace(\n      /&quot;uid&quot;:&quot;([a-f0-9-]+)&quot;/,\n      `&quot;uid&quot;:&quot;${uuidv4()}&quot;`\n    )\n  },\n\n  _getNewBlockTypeGroupSettingsHtml (groupId) {\n    return this._blockTypeGroupSettingsHtml.replace(/__NEOBLOCKTYPEGROUP_ID__/g, groupId)\n  },\n\n  _updateItemOrder () {\n    const items = []\n\n    this._itemSort.$items.each((index, element) => {\n      const item = this.getItemByElement(element)\n\n      if (item) {\n        items.push(item)\n\n        if (item instanceof BlockType) {\n          item.getSettings().refreshChildBlockTypes()\n        }\n      }\n    })\n\n    this._items = items\n  },\n\n  _createBlockTypeFrom (oldBlockType) {\n    const namespace = [...this._templateNs, 'items', 'blockTypes']\n    let id\n    do {\n      id = BlockTypeSettings.getNewId()\n    } while (this.$blockTypesContainer.find(`[data-neo-bt=\"container.${id}\"]`).length > 0)\n\n    const selectedItem = this.getSelectedItem()\n    const selectedIndex = selectedItem ? selectedItem.getSortOrder() : -1\n\n    if (oldBlockType === null) {\n      const settings = new BlockTypeSettings({\n        childBlockTypes: this.getBlockTypes(),\n        id,\n        namespace: [...namespace, id],\n        sortOrder: this._items.length,\n        html: this._getNewBlockTypeSettingsHtml(id),\n        js: this._getNewBlockTypeSettingsJs(id)\n      })\n      const fieldLayout = new BlockTypeFieldLayout({\n        blockTypeId: id,\n        html: this._getNewFieldLayoutHtml(),\n        namespace: [...namespace, id]\n      })\n\n      this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n    } else {\n      const oldSettings = oldBlockType.getSettings()\n      const settingsObj = {\n        childBlocks: oldSettings.getChildBlocks(),\n        conditions: oldSettings.getConditions(),\n        // Set a timestamp on the handle so it doesn't clash with the old one\n        handle: `${oldSettings.getHandle()}_${Date.now()}`,\n        id,\n        minBlocks: oldSettings.getMinBlocks(),\n        maxBlocks: oldSettings.getMaxBlocks(),\n        minChildBlocks: oldSettings.getMinChildBlocks(),\n        maxChildBlocks: oldSettings.getMaxChildBlocks(),\n        minSiblingBlocks: oldSettings.getMinSiblingBlocks(),\n        maxSiblingBlocks: oldSettings.getMaxSiblingBlocks(),\n        name: oldSettings.getName(),\n        description: oldSettings.getDescription(),\n        iconId: oldSettings.getIconId(),\n        enabled: oldSettings.getEnabled(),\n        ignorePermissions: oldSettings.getIgnorePermissions(),\n        sortOrder: this._items.length,\n        topLevel: oldSettings.getTopLevel()\n      }\n      const settings = new BlockTypeSettings({\n        ...settingsObj,\n        childBlockTypes: this.getBlockTypes(),\n        namespace: [...namespace, id]\n      })\n      const $spinner = $('<div class=\"nc_sidebar_list_item type-spinner\"><span class=\"spinner\"></span></div>')\n      this._insertAt($spinner, selectedIndex)\n\n      oldBlockType.load()\n        .then(() => {\n          const layout = oldBlockType.getFieldLayout().getConfig()\n          const data = {\n            settings: settingsObj,\n            layout: layout.tabs.length > 0 ? layout : null\n          }\n\n          Craft.queue.push(() => new Promise((resolve, reject) => {\n            Craft.sendActionRequest('POST', 'neo/configurator/render-block-type', { data })\n              .then(response => {\n                const fieldLayout = new BlockTypeFieldLayout({\n                  blockTypeId: id,\n                  html: response.data.layoutHtml,\n                  namespace: [...namespace, id]\n                })\n                settings.createContainer({\n                  html: response.data.settingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, id),\n                  js: response.data.settingsJs.replace(/__NEOBLOCKTYPE_ID__/g, id)\n                })\n\n                this.$blockTypesContainer.find('.type-spinner').remove()\n                this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n                resolve()\n              })\n              .catch(reject)\n          }))\n        })\n        .catch(() => Craft.cp.displayError(Craft.t('neo', 'Couldn’t create new block type.')))\n    }\n  },\n\n  _initBlockType (namespace, settings, fieldLayout, index) {\n    const blockType = new BlockType({\n      namespace,\n      field: this,\n      settings,\n      fieldLayout\n    })\n\n    this.addItem(blockType, index)\n    this.selectItem(blockType)\n    this.selectTab('settings')\n\n    blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n    blockType.on('paste.configurator', () => this._pasteBlockType())\n    blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType))\n  },\n\n  _copyBlockType (blockType) {\n    blockType.load()\n      .then(() => {\n        const settings = blockType.getSettings()\n        const data = {\n          childBlocks: settings.getChildBlocks(),\n          conditions: settings.getConditions(),\n          description: settings.getDescription(),\n          enabled: settings.getEnabled(),\n          iconId: settings.getIconId(),\n          ignorePermissions: settings.getIgnorePermissions(),\n          handle: settings.getHandle(),\n          layout: blockType.getFieldLayout().getConfig(),\n          minBlocks: settings.getMinBlocks(),\n          maxBlocks: settings.getMaxBlocks(),\n          minChildBlocks: settings.getMinChildBlocks(),\n          maxChildBlocks: settings.getMaxChildBlocks(),\n          minSiblingBlocks: settings.getMinSiblingBlocks(),\n          maxSiblingBlocks: settings.getMaxSiblingBlocks(),\n          name: settings.getName(),\n          topLevel: settings.getTopLevel()\n        }\n\n        window.localStorage.setItem('neo:copyBlockType', JSON.stringify(data))\n        this.getBlockTypes().forEach(bt => bt.$actionsMenu.find('[data-action=\"paste\"]').parent().removeClass('disabled'))\n      })\n      .catch(() => Craft.cp.displayError(Craft.t('neo', 'Couldn’t copy block type.')))\n  },\n\n  _pasteBlockType () {\n    const encodedData = window.localStorage.getItem('neo:copyBlockType')\n\n    if (!encodedData) {\n      return\n    }\n\n    const data = JSON.parse(encodedData)\n    const blockTypeHandles = this.getBlockTypes().map(bt => bt.getSettings().getHandle())\n    const childBlocks = Array.isArray(data.childBlocks)\n      ? data.childBlocks.filter(cb => blockTypeHandles.includes(cb))\n      : (data.childBlocks ? true : [])\n    const settings = new BlockTypeSettings({\n      childBlocks,\n      childBlockTypes: this.getBlockTypes(),\n      conditions: data.conditions,\n      description: data.description,\n      iconId: data.iconId,\n      enabled: data.enabled,\n      ignorePermissions: data.ignorePermissions,\n      handle: data.handle,\n      minBlocks: data.minBlocks,\n      maxBlocks: data.maxBlocks,\n      minChildBlocks: data.minChildBlocks,\n      maxChildBlocks: data.maxChildBlocks,\n      minSiblingBlocks: data.minSiblingBlocks,\n      maxSiblingBlocks: data.maxSiblingBlocks,\n      name: data.name,\n      topLevel: data.topLevel,\n      html: ''\n    })\n\n    const fieldLayout = new BlockTypeFieldLayout({\n      html: this._getNewFieldLayoutHtml(),\n      layout: data.layout\n    })\n\n    const blockType = new BlockType({\n      field: this,\n      settings,\n      fieldLayout\n    })\n\n    this._createBlockTypeFrom(blockType)\n  },\n\n  _insertAt (element, index) {\n    const $element = $(element)\n\n    if (index >= 0 && index < this._items.length) {\n      $element.insertAt(index, this.$blockTypesContainer)\n    } else {\n      this.$blockTypesContainer.append($element)\n    }\n  },\n\n  '@newBlockType' () {\n    this._createBlockTypeFrom(null)\n  },\n\n  '@newGroup' () {\n    const namespace = [...this._templateNs, 'items', 'groups']\n    let id\n    do {\n      id = GroupSettings.getNewId()\n    } while (this.$blockTypesContainer.find(`[data-neo-g=\"container.${id}\"]`).length > 0)\n\n    const settings = new GroupSettings({\n      namespace: [...namespace, id],\n      html: this._getNewBlockTypeGroupSettingsHtml(id),\n      sortOrder: this._items.length,\n      id\n    })\n\n    const group = new Group({\n      namespace,\n      field: this,\n      settings\n    })\n\n    const selected = this.getSelectedItem()\n    const index = selected ? selected.getSortOrder() : -1\n\n    this.addItem(group, index)\n    this.selectItem(group)\n  },\n\n  '@selectItem' (e) {\n    const item = this.getItemByElement(e.currentTarget)\n\n    this.selectItem(item)\n  }\n})\n","import Configurator from './configurator/Configurator'\n\nconst context = window ?? this\nconst configurators = []\n\ncontext.Neo = {\n  Configurator,\n  configurators,\n\n  createConfigurator (settings = {}) {\n    const configurator = new Configurator(settings)\n    configurators.push(configurator)\n\n    return configurator\n  }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","jQuery","$","index","$parent","this","each","prepend","children","eq","after","Garnish","Craft","randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","Error","byteToHex","i","push","toString","slice","unsafeStringify","arr","offset","toLowerCase","options","buf","rnds","random","_stack","enter","segments","join","arguments","length","undefined","fromFieldName","joined","getNamespace","enterByFieldName","fieldName","leave","pop","Array","from","parse","value","indexOf","split","separator","prefix","toFieldName","replace","match","_defaults","settings","$container","_field","_selected","init","assign","field","_settings","load","Promise","resolve","getField","getSettings","getSortOrder","select","toggleSelect","deselect","trigger","selected","isSelected","namespace","html","layout","id","blockId","blockName","_templateNs","NS","_id","_blockTypeId","blockTypeId","find","removeAttr","nameInput","name","concat","JSON","stringify","_fld","customizableTabs","customizableUi","updateChildBlocksUiElement","selector","$uiLibraryElement","$uiLibraryElements","filter","$tabUiElement","$tabContainer","toggleClass","hasClass","removeClass","_tabObserver","window","MutationObserver","observe","childList","subtree","getId","getBlockTypeId","getConfig","newConfig","tabs","tab","config","newElements","element","elements","newElement","fieldLayout","Item","extend","_loaded","_this$getField","base","settingsObj","_fieldLayout","sidebarItem","$sidebarContainer","_generateBlockType","$neo","$nameText","$handleText","$moveButton","$actionsButton","menubtn","_actionsMenu","data","on","e","$actionsMenu","menu","addListener","stopPropagation","_updateTemplate","sortOrderNamespace","sortOrderName","errors","getErrors","hasErrors","isArray","keys","getName","getHandle","getFieldLayout","loadFieldLayout","getFieldLayoutConfig","layoutId","getFieldLayoutId","reject","then","response","BlockTypeFieldLayout","layoutHtml","createContainer","settingsHtml","js","settingsJs","catch","_settings$$container","text","getTopLevel","_this$_actionsMenu","$option","option","hideMenu","attr","confirm","destroy","_","console","warn","setSortOrder","getFocusElement","_this$$foot","$foot","remove","_refreshSetting","showSetting","animate","css","opacity","marginBottom","outerHeight","velocity","addClass","sortOrder","fieldLayoutId","fieldLayoutConfig","handle","description","enabled","ignorePermissions","minBlocks","maxBlocks","minSiblingBlocks","maxSiblingBlocks","minChildBlocks","maxChildBlocks","topLevel","childBlocks","childBlockTypes","Settings","_childBlockTypes","_initialised","$nameInput","$handleInput","$descriptionInput","$minBlocksInput","$maxBlocksInput","$minSiblingBlocksInput","$maxSiblingBlocksInput","$minChildBlocksInput","$maxChildBlocksInput","_childBlocks","_fieldLayoutId","_fieldLayoutConfig","_errors","_settingsChildBlockTypes","_originalSettings","_afterCreateContainer","setName","setHandle","setDescription","_setIconId","iconId","setEnabled","setIgnorePermissions","setMinBlocks","setMaxBlocks","setMinSiblingBlocks","setMaxSiblingBlocks","setMinChildBlocks","setMaxChildBlocks","setTopLevel","containerData","_containerData$js","_js","$iconIdContainer","$enabledInput","$enabledContainer","$ignorePermissionsInput","$ignorePermissionsContainer","$minChildBlocksContainer","$maxChildBlocksContainer","$topLevelInput","$topLevelContainer","$groupChildBlockTypesInput","$groupChildBlockTypesContainer","$childBlocksInput","$childBlocksContainer","$deleteButton","initUi","_childBlocksSelect","_enabledLightswitch","_ignorePermissionsLightswitch","_topLevelLightswitch","_groupChildBlockTypesLightswitch","_handleGenerator","stopListening","blockType","addChildBlockType","setChildBlocks","val","listening","setTimeout","$iconIdInput","_refreshChildBlockSettings","_generateChildBlocksCheckbox","getFocusInput","isNew","test","_this$_name","_name","oldName","property","oldValue","newValue","_this$_handle","_handle","oldHandle","getDescription","_description","oldDescription","getIconId","_iconId","oldIconId","getEnabled","_enabled","_setLightswitchField","getIgnorePermissions","_ignorePermissions","ignore","getMinBlocks","_minBlocks","_setBlocksConstraint","getMaxBlocks","_maxBlocks","getMinSiblingBlocks","_minSiblingBlocks","getMaxSiblingBlocks","_maxSiblingBlocks","getMinChildBlocks","_minChildBlocks","getMaxChildBlocks","_maxChildBlocks","mode","privateProp","jqueryProp","Math","max","parseInt","_this$_topLevel","_topLevel","lightswitchProp","toggle","getChildBlocks","_this$_childBlocks","$all","$options","onAllChange","includes","$existingCheckbox","$checkbox","append","_refreshChildBlockType","allChecked","add","eventNs","removeChildBlockType","splice","off","getConditions","baseInputName","replaceAll","baseConditionInputNameWithExtraSlash","baseConditionInputName","conditionInputNames","map","condition","allFormData","FormData","closest","conditionsData","forEach","conditionInputName","conditionsSubData","conditionsCurrentPath","conditionsDataPath","pathStep","getAll","refreshChildBlockTypes","childBlockType","$sidebarItem","$refreshedBlockType","position","$currentChildBlockTypeAtPos","insertBefore","appendTo","showSettings","$input","$labelText","_totalNewBlockTypes","getNewId","_generateGroup","_settings$getName","groupId","alwaysShowDropdown","defaultAlwaysShowGroupDropdowns","$sortOrderInput","_alwaysShowDropdown","_defaultAlwaysShowGroupDropdowns","$alwaysShowDropdownContainer","_refreshAlwaysShowDropdown","getAlwaysShowDropdown","_this$_alwaysShowDrop","_totalNewGroups","blockTypes","groups","blockTypeSettingsHtml","blockTypeSettingsJs","fieldLayoutHtml","groupSettingsHtml","_items","inputIdPrefix","$field","_blockTypeSettingsHtml","_blockTypeSettingsJs","_fieldLayoutHtml","_blockTypeGroupSettingsHtml","blockTypeGroupSettingsHtml","$mainContainer","$blockTypesContainer","$settingsContainer","$fieldLayoutContainer","$blockTypeButton","$groupButton","$settingsButton","$fieldLayoutButton","_itemSort","container","axis","onSortChange","_updateItemOrder","existingItems","btNamespace","gNamespace","btInfo","btSettings","BlockTypeSettings","item","BlockType","_copyBlockType","_pasteBlockType","_createBlockTypeFrom","addItem","blockTypeSettings","getBlockTypes","gInfo","gSettings","GroupSettings","group","Group","sort","b","info","refreshPasteOptions","noPasteData","localStorage","getItem","parent","document","selectTab","contains","_insertAt","$items","addItems","removeItem","_addFieldLayout","showConfirm","message","type","removeItems","removeListener","oldItem","getItems","getItemByElement","$element","is","getSelectedItem","selectItem","focusInput","thisIsTheItem","itemIsGroup","focus","getGroups","_getNewBlockTypeSettingsHtml","_getNewBlockTypeSettingsJs","_getNewFieldLayoutHtml","uuidv4","_getNewBlockTypeGroupSettingsHtml","items","oldBlockType","selectedItem","selectedIndex","_initBlockType","oldSettings","conditions","Date","now","_objectSpread","$spinner","setItem","bt","encodedData","blockTypeHandles","cb","insertAt","currentTarget","context","_window","configurators","Neo","Configurator","createConfigurator","configurator"],"sourceRoot":""}