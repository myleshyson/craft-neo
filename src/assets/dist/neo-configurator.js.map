{"version":3,"file":"neo-configurator.js","mappings":"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","sources":["webpack://craft-neo/webpack/bootstrap","webpack://craft-neo/webpack/runtime/compat get default export","webpack://craft-neo/webpack/runtime/define property getters","webpack://craft-neo/webpack/runtime/hasOwnProperty shorthand","webpack://craft-neo/external var \"jQuery\"","webpack://craft-neo/./src/assets/src/jquery-extensions.js","webpack://craft-neo/external var \"Garnish\"","webpack://craft-neo/external var \"Craft\"","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/native.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/rng.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/v4.js","webpack://craft-neo/./src/assets/src/namespace.js","webpack://craft-neo/./src/assets/src/configurator/Item.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeFieldLayout.js","webpack://craft-neo/./src/assets/src/configurator/BlockType.js","webpack://craft-neo/./src/assets/src/configurator/Settings.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeIconSelect.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeSettings.js","webpack://craft-neo/./src/assets/src/configurator/Group.js","webpack://craft-neo/./src/assets/src/configurator/GroupSettings.js","webpack://craft-neo/./src/assets/src/configurator/Configurator.js","webpack://craft-neo/./src/assets/src/configurator.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = jQuery;","import $ from 'jquery'\n\n// @see http://stackoverflow.com/a/12903503/556609\n$.fn.insertAt = function (index, $parent) {\n  return this.each(function () {\n    if (index === 0) {\n      $parent.prepend(this)\n    } else {\n      $parent.children().eq(index - 1).after(this)\n    }\n  })\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = Garnish;","const __WEBPACK_NAMESPACE_OBJECT__ = Craft;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","export default {\n\n  _stack: [[]],\n\n  enter (segments, join = true) {\n    if (typeof segments === 'string') {\n      segments = this.fromFieldName(segments)\n    }\n\n    if (join) {\n      const joined = this.getNamespace()\n      joined.push(...segments)\n\n      segments = joined\n    }\n\n    this._stack.push(segments)\n  },\n\n  enterByFieldName (fieldName, join = true) {\n    this.enter(this.fromFieldName(fieldName), join)\n  },\n\n  leave () {\n    return this._stack.length > 1\n      ? this._stack.pop()\n      : this.getNamespace()\n  },\n\n  getNamespace () {\n    return Array.from(this._stack[this._stack.length - 1])\n  },\n\n  parse (value) {\n    if (typeof value === 'string') {\n      if (value.indexOf('[') > -1) {\n        return this.fromFieldName(value)\n      }\n\n      if (value.indexOf('-') > -1) {\n        return value.split('-')\n      }\n\n      if (value.indexOf('.') > -1) {\n        return value.split('.')\n      }\n\n      return value\n    }\n\n    return Array.from(value)\n  },\n\n  value (value, separator = '-') {\n    const segments = this.getNamespace()\n    segments.push(value)\n\n    return segments.join(separator)\n  },\n\n  fieldName (fieldName = '') {\n    const prefix = this.toFieldName()\n\n    if (prefix) {\n      return prefix + fieldName.replace(/([^'\"[\\]]+)([^'\"]*)/, '[$1]$2')\n    }\n\n    return fieldName\n  },\n\n  toString (separator = '-') {\n    return this.getNamespace().join(separator)\n  },\n\n  toFieldName () {\n    const segments = this.getNamespace()\n\n    switch (segments.length) {\n      case 0: return ''\n      case 1: return segments[0]\n    }\n\n    return segments[0] + '[' + segments.slice(1).join('][') + ']'\n  },\n\n  fromFieldName (fieldName) {\n    return fieldName.match(/[^[\\]\\s]+/g) || []\n  }\n}\n","import Garnish from 'garnish'\n\nconst _defaults = {\n  settings: null\n}\n\nexport default Garnish.Base.extend({\n\n  $container: null,\n  _field: null,\n  _selected: false,\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n    this._field = settings.field\n    this._settings = settings.settings\n  },\n\n  /**\n   * @since 3.8.0\n   * @returns Promise\n   */\n  load () {\n    return Promise.resolve()\n  },\n\n  /**\n   * @since 3.8.0\n   * @returns the Neo field this item belongs to\n   */\n  getField () {\n    return this._field\n  },\n\n  getSettings () {\n    return this._settings\n  },\n\n  /**\n   * @since 3.8.0\n   */\n  getSortOrder () {\n    return this.$container.index() + 1\n  },\n\n  select () {\n    this.toggleSelect(true)\n  },\n\n  deselect () {\n    this.toggleSelect(false)\n  },\n\n  toggleSelect: function (select) {\n    this._selected = (typeof select === 'boolean' ? select : !this._selected)\n\n    this.trigger('toggleSelect', {\n      selected: this._selected\n    })\n  },\n\n  isSelected () {\n    return this._selected\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: [],\n  html: '',\n  layout: null,\n  id: -1,\n  blockId: null,\n  blockName: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id | 0\n    this._blockTypeId = settings.blockTypeId\n\n    this.$container = $(settings.html).find('.layoutdesigner')\n    this.$container.removeAttr('id')\n\n    const nameInput = this.$container.find('input[name=\"fieldLayout\"]')\n\n    if (nameInput.length > 0) {\n      nameInput[0].name = `neoBlockType${this._blockTypeId}[fieldLayout]`\n\n      if (settings.layout) {\n        nameInput[0].value = JSON.stringify(settings.layout)\n      }\n    }\n\n    NS.enter(this._templateNs)\n\n    this._fld = new Craft.FieldLayoutDesigner(this.$container, {\n      customizableTabs: true,\n      customizableUi: true\n    })\n\n    NS.leave()\n\n    const updateChildBlocksUiElement = () => {\n      const selector = '[data-type=benf-neo-fieldlayoutelements-ChildBlocksUiElement]'\n      const $uiLibraryElement = this._fld.$uiLibraryElements.filter(selector)\n      const $tabUiElement = this._fld.$tabContainer.find(selector)\n      $uiLibraryElement.toggleClass(\n        'hidden',\n        $tabUiElement.length > 0 || $('body.dragging .draghelper' + selector).length > 0\n      )\n      if ($tabUiElement.hasClass('velocity-animating')) {\n        $tabUiElement.removeClass('hidden')\n      }\n    }\n\n    updateChildBlocksUiElement()\n    this._tabObserver = new window.MutationObserver(updateChildBlocksUiElement)\n    this._tabObserver.observe(this._fld.$tabContainer[0], { childList: true, subtree: true })\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getBlockTypeId () {\n    return this._blockTypeId\n  },\n\n  getConfig () {\n    const newConfig = { tabs: [] }\n\n    for (const tab of this._fld.config.tabs) {\n      const newElements = []\n\n      for (const element of tab.elements) {\n        const newElement = {}\n\n        for (const key in element) {\n          newElement[key] = key === 'required' && !element[key] ? '' : element[key]\n        }\n\n        newElements.push(newElement)\n      }\n\n      newConfig.tabs.push({\n        elements: newElements,\n        name: tab.name.slice()\n      })\n    }\n\n    return newConfig\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Item from './Item'\nimport NS from '../namespace'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\n\nconst _defaults = {\n  namespace: [],\n  fieldLayout: null\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n  _loaded: false,\n\n  init (settings = {}) {\n    this.base(settings)\n\n    const settingsObj = this.getSettings()\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._field = settings.field\n    this._fieldLayout = settings.fieldLayout\n    const sidebarItem = this.getField()?.$sidebarContainer.find(`[data-neo-bt=\"container.${this.getId()}`)\n\n    if (sidebarItem?.length > 0) {\n      this.$container = sidebarItem\n    } else {\n      this.$container = this._generateBlockType(settingsObj)\n    }\n\n    const $neo = this.$container.find('[data-neo-bt]')\n    this.$nameText = $neo.filter('[data-neo-bt=\"text.name\"]')\n    this.$handleText = $neo.filter('[data-neo-bt=\"text.handle\"]')\n    this.$moveButton = $neo.filter('[data-neo-bt=\"button.move\"]')\n    this.$actionsButton = $neo.filter('[data-neo-bt=\"button.actions\"]')\n\n    // Set up the actions menu\n    this.$actionsButton.menubtn()\n    this._actionsMenu = this.$actionsButton.data('menubtn')\n    this._actionsMenu.on('optionSelect', e => this['@actionSelect'](e))\n    this.$actionsMenu = this._actionsMenu.menu.$container\n\n    // Stop the actions button click from selecting the block type and closing the menu\n    this.addListener(this.$actionsButton, 'click', e => e.stopPropagation())\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n\n      this._updateTemplate()\n    }\n\n    this.deselect()\n  },\n\n  _generateBlockType (settings) {\n    const sortOrderNamespace = [...this._templateNs]\n    sortOrderNamespace.pop()\n    NS.enter(sortOrderNamespace)\n    const sortOrderName = NS.fieldName('sortOrder')\n    NS.leave()\n    const errors = settings.getErrors()\n    const hasErrors = (Array.isArray(errors) ? errors : Object.keys(errors)).length > 0\n\n    return $(`\n      <div class=\"nc_sidebar_list_item${hasErrors ? ' has-errors' : ''}\" data-neo-bt=\"container.${this.getId()}\">\n        <div class=\"label\" data-neo-bt=\"text.name\">${settings.getName()}</div>\n        <div class=\"smalltext light code\" data-neo-bt=\"text.handle\">${settings.getHandle()}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-bt=\"button.move\"></a>\n        <button class=\"settings icon menubtn\" title=\"${Craft.t('neo', 'Actions')}\" role=\"button\" type=\"button\" data-neo-bt=\"button.actions\"></button>\n        <div class=\"menu\" data-neo-bt=\"container.menu\">\n          <ul class=\"padded\">\n            <li><a data-icon=\"field\" data-action=\"copy\">${Craft.t('neo', 'Copy')}</a></li>\n            <li class=\"disabled\"><a data-icon=\"brush\" data-action=\"paste\">${Craft.t('neo', 'Paste')}</a></li>\n            <li><a data-icon=\"share\" data-action=\"clone\">${Craft.t('neo', 'Clone')}</a></li>\n            <li><a class=\"error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('neo', 'Delete')}</a></li>\n          </ul>\n        </div>\n        <input type=\"hidden\" name=\"${sortOrderName}[]\" value=\"blocktype:${this.getId()}\" data-neo-gs=\"input.sortOrder\">\n      </div>`)\n  },\n\n  getId () {\n    return this.getSettings().getId()\n  },\n\n  getFieldLayout () {\n    return this._fieldLayout\n  },\n\n  /**\n   * @inheritDoc\n   */\n  load () {\n    if (this._loaded) {\n      // Already loaded\n      return Promise.resolve()\n    }\n\n    this.trigger('beforeLoad')\n    const settings = this.getSettings()\n    const layout = settings.getFieldLayoutConfig()\n    const layoutId = settings.getFieldLayoutId()\n    const data = {\n      blockTypeId: this.getId(),\n      layout\n    }\n\n    return new Promise((resolve, reject) => {\n      Craft.sendActionRequest('POST', 'neo/configurator/render-block-type', { data })\n        .then(response => {\n          if (response.data.headHtml) {\n            Craft.appendHeadHtml(response.data.headHtml)\n          }\n\n          if (response.data.bodyHtml) {\n            Craft.appendBodyHtml(response.data.bodyHtml)\n          }\n\n          this._fieldLayout = new BlockTypeFieldLayout({\n            namespace: [...this._templateNs, this._id],\n            html: response.data.layoutHtml,\n            id: layoutId,\n            blockTypeId: data.blockTypeId\n          })\n          this._settings.createContainer({\n            html: response.data.settingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, data.blockTypeId),\n            js: response.data.settingsJs.replace(/__NEOBLOCKTYPE_ID__/g, data.blockTypeId)\n          })\n          this._loaded = true\n\n          this.trigger('afterLoad')\n          resolve()\n        })\n        .catch(reject)\n    })\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const fieldLayout = this.getFieldLayout()\n    const selected = this.isSelected()\n\n    if (settings?.$container ?? false) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    if (fieldLayout) {\n      fieldLayout.$container.toggleClass('hidden', !selected)\n    } else if (selected) {\n      this.load()\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n      this.$handleText.text(settings.getHandle())\n      this.$container.toggleClass('is-child', !settings.getTopLevel())\n    }\n  },\n\n  '@actionSelect' (e) {\n    const $option = $(e.option)\n\n    if ($option.hasClass('disabled')) {\n      return\n    }\n\n    this._actionsMenu?.hideMenu()\n\n    switch ($option.attr('data-action')) {\n      case 'copy':\n        this.trigger('copy')\n        break\n      case 'paste':\n        this.trigger('paste')\n        break\n      case 'clone':\n        this.trigger('clone')\n        break\n      case 'delete':\n        if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n          this.getSettings().destroy()\n        }\n    }\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\n\nexport default Garnish.Base.extend({\n\n  $container: new $(),\n\n  getFocusElement () {\n    return new $()\n  },\n\n  destroy () {\n    this.$foot?.remove()\n    this.trigger('destroy')\n  },\n\n  _refreshSetting ($container, showSetting, animate) {\n    animate = !Garnish.prefersReducedMotion() && (typeof animate === 'boolean' ? animate : true)\n\n    if (animate) {\n      if (showSetting) {\n        if ($container.hasClass('hidden')) {\n          $container\n            .removeClass('hidden')\n            .css({\n              opacity: 0,\n              marginBottom: -($container.outerHeight())\n            })\n            .velocity({\n              opacity: 1,\n              marginBottom: 24\n            }, 'fast')\n        }\n      } else if (!$container.hasClass('hidden')) {\n        $container\n          .css({\n            opacity: 1,\n            marginBottom: 24\n          })\n          .velocity({\n            opacity: 0,\n            marginBottom: -($container.outerHeight())\n          }, 'fast', () => {\n            $container.addClass('hidden')\n          })\n      }\n    } else {\n      $container\n        .toggleClass('hidden', !showSetting)\n        .css('margin-bottom', showSetting ? 24 : '')\n    }\n  }\n})\n","import Craft from 'craft'\n\n/**\n * Class for managing the selected icon for a block type.\n * @since 4.0.0\n */\nexport default class BlockTypeIconSelect {\n  /**\n   * Container for the display of the set icon.\n   * @public\n   */\n  imageContainer = null\n\n  /**\n   * Image for the display of the set icon.\n   * @public\n   */\n  image = null\n\n  /**\n   * Text (filename) for the display of the set icon.\n   * @public\n   */\n  imageText = null\n\n  /**\n   * Icons that can be selected from the menu.\n   * @public\n   */\n  menuItems = []\n\n  /**\n   * The button for setting the icon.\n   * @public\n   */\n  btnSet = null\n\n  /**\n   * The button for unsetting the icon.\n   * @public\n   */\n  btnRemove = null\n\n  /**\n   * The hidden input for the element editor form.\n   * @public\n   */\n  input = null\n\n  /**\n   * The constructor.\n   * @param container - The icon field container.\n   * @public\n   */\n  constructor (container) {\n    this.imageContainer = container.querySelector('[data-icon-select-show]')\n    this.image = this.imageContainer?.querySelector('img') ?? null\n    this.imageText = this.imageContainer?.querySelector('p') ?? null\n    this.menuItems = container.querySelectorAll('[data-icon-select-item]')\n    this.btnSet = container.querySelector('[data-icon-select-set]')\n    this.btnRemove = container.querySelector('[data-icon-select-remove]')\n    this.input = container.querySelector('input[name$=\"[iconFilename]\"]')\n\n    this.btnRemove?.addEventListener('click', (_) => this.remove())\n    this.menuItems.forEach((item) => {\n      const filename = item.querySelector('span')?.textContent\n      const url = item.querySelector('img')?.getAttribute('src')\n      item.addEventListener('click', (_) => this.set({ filename, url }))\n    })\n  }\n\n  /**\n   * Sets the selected icon.\n   * @param item - An object representing the selected icon\n   * @public\n   */\n  set (item) {\n    this.image?.setAttribute('src', item.url)\n    this.input?.setAttribute('value', item.filename)\n    this.btnRemove?.classList.remove('hidden')\n\n    if (this.imageText !== null) {\n      this.imageText.textContent = item.filename\n    }\n\n    if (this.btnSet !== null) {\n      this.btnSet.textContent = Craft.t('neo', 'Replace')\n    }\n  }\n\n  /**\n   * Unsets the icon.\n   * @public\n   */\n  remove () {\n    this.image?.setAttribute('src', '')\n    this.input?.setAttribute('value', '')\n    this.btnRemove?.classList.add('hidden')\n\n    if (this.imageText !== null) {\n      this.imageText.textContent = Craft.t('neo', 'None set')\n    }\n\n    if (this.btnSet !== null) {\n      this.btnSet.textContent = Craft.t('neo', 'Add')\n    }\n  }\n}\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Garnish from 'garnish'\nimport NS from '../namespace'\nimport Settings from './Settings'\nimport BlockTypeIconSelect from './BlockTypeIconSelect'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  fieldLayoutId: null,\n  fieldLayoutConfig: null,\n  name: '',\n  handle: '',\n  description: '',\n  enabled: true,\n  ignorePermissions: true,\n  minBlocks: 0,\n  maxBlocks: 0,\n  minSiblingBlocks: 0,\n  maxSiblingBlocks: 0,\n  minChildBlocks: 0,\n  maxChildBlocks: 0,\n  topLevel: true,\n  childBlocks: null,\n  childBlockTypes: [],\n  html: null,\n  js: null,\n  errors: {}\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n  _childBlockTypes: [],\n  _initialised: false,\n\n  $container: null,\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $descriptionInput: new $(),\n  $minBlocksInput: new $(),\n  $maxBlocksInput: new $(),\n  $minSiblingBlocksInput: new $(),\n  $maxSiblingBlocksInput: new $(),\n  $minChildBlocksInput: new $(),\n  $maxChildBlocksInput: new $(),\n  $iconContainer: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._childBlockTypes = []\n    this._childBlocks = settings.childBlocks\n    this._id = settings.id\n    this._fieldLayoutId = settings.fieldLayoutId\n    this._fieldLayoutConfig = settings.fieldLayoutConfig\n    this._errors = settings.errors\n    this._settingsChildBlockTypes = settings.childBlockTypes\n    this._originalSettings = settings\n    this._iconSelector = null\n    this._afterCreateContainer = () => {\n      this.setName(settings.name)\n      this.setHandle(settings.handle)\n      this.setDescription(settings.description)\n      this._setIconId(settings.iconId)\n      this.setEnabled(settings.enabled)\n      this.setIgnorePermissions(settings.ignorePermissions)\n      this.setMinBlocks(settings.minBlocks)\n      this.setMaxBlocks(settings.maxBlocks)\n      this.setMinSiblingBlocks(settings.minSiblingBlocks)\n      this.setMaxSiblingBlocks(settings.maxSiblingBlocks)\n      this.setMinChildBlocks(settings.minChildBlocks)\n      this.setMaxChildBlocks(settings.maxChildBlocks)\n      this.setTopLevel(settings.topLevel)\n\n      if (this.$iconContainer.length > 0) {\n        this._iconSelector = new BlockTypeIconSelect(this.$iconContainer[0])\n      }\n    }\n\n    if (typeof settings.html !== 'undefined' && settings.html !== null) {\n      this.createContainer({\n        html: settings.html,\n        js: settings.js\n      })\n    }\n  },\n\n  createContainer (containerData) {\n    // Only create it if it doesn't already exist\n    if (this.$container !== null) {\n      return\n    }\n\n    this.$container = $(containerData.html)\n    this._js = containerData.js ?? ''\n\n    const $neo = this.$container.find('[data-neo-bts]')\n    this.$nameInput = $neo.filter('[data-neo-bts=\"input.name\"]')\n    this.$handleInput = $neo.filter('[data-neo-bts=\"input.handle\"]')\n    this.$descriptionInput = $neo.filter('[data-neo-bts=\"input.description\"]')\n    this.$iconContainer = $neo.filter('[data-neo-bts=\"container.iconFilename\"]')\n    this.$iconIdContainer = $neo.filter('[data-neo-bts=\"container.iconId\"]')\n    this.$enabledInput = $neo.filter('[data-neo-bts=\"input.enabled\"]')\n    this.$enabledContainer = $neo.filter('[data-neo-bts=\"container.enabled\"]')\n    this.$ignorePermissionsInput = $neo.filter('[data-neo-bts=\"input.ignorePermissions\"]')\n    this.$ignorePermissionsContainer = $neo.filter('[data-neo-bts=\"container.ignorePermissions\"]')\n    this.$minBlocksInput = $neo.filter('[data-neo-bts=\"input.minBlocks\"]')\n    this.$maxBlocksInput = $neo.filter('[data-neo-bts=\"input.maxBlocks\"]')\n    this.$minSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.minSiblingBlocks\"]')\n    this.$maxSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.maxSiblingBlocks\"]')\n    this.$minChildBlocksInput = $neo.filter('[data-neo-bts=\"input.minChildBlocks\"]')\n    this.$minChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.minChildBlocks\"]')\n    this.$maxChildBlocksInput = $neo.filter('[data-neo-bts=\"input.maxChildBlocks\"]')\n    this.$maxChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.maxChildBlocks\"]')\n    this.$topLevelInput = $neo.filter('[data-neo-bts=\"input.topLevel\"]')\n    this.$topLevelContainer = $neo.filter('[data-neo-bts=\"container.topLevel\"]')\n    this.$groupChildBlockTypesInput = $neo.filter('[data-neo-bts=\"input.groupChildBlockTypes\"]')\n    this.$groupChildBlockTypesContainer = $neo.filter('[data-neo-bts=\"container.groupChildBlockTypes\"]')\n    this.$childBlocksInput = $neo.filter('[data-neo-bts=\"input.childBlocks\"]')\n    this.$childBlocksContainer = $neo.filter('[data-neo-bts=\"container.childBlocks\"]')\n    this.$deleteButton = $neo.filter('[data-neo-bts=\"button.delete\"]')\n\n    this._afterCreateContainer()\n  },\n\n  initUi () {\n    // Exit if UI already initialised, or there is no UI to initialise yet\n    if (this._initialised || this.$container === null) {\n      return\n    }\n\n    this.$foot = $(this._js)\n    Garnish.$bod.append(this.$foot)\n\n    Craft.initUiElements(this.$container)\n\n    this._childBlocksSelect = this.$childBlocksInput.data('checkboxSelect')\n    this._enabledLightswitch = this.$enabledInput.data('lightswitch')\n    this._ignorePermissionsLightswitch = this.$ignorePermissionsInput.data('lightswitch')\n    this._topLevelLightswitch = this.$topLevelInput.data('lightswitch')\n    this._groupChildBlockTypesLightswitch = this.$groupChildBlockTypesInput.data('lightswitch')\n    this._handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput)\n\n    // Ensure that an existing block type's handle will not be changed if the name is edited first.\n    if (this.getHandle() !== '') {\n      this._handleGenerator.stopListening()\n    }\n\n    for (const blockType of this._settingsChildBlockTypes) {\n      this.addChildBlockType(blockType)\n    }\n\n    this.setChildBlocks(this._childBlocks)\n\n    this.addListener(this.$nameInput, 'keyup change', () => {\n      this.setName(this.$nameInput.val())\n\n      if (this._handleGenerator.listening) {\n        // Wait for the handle to be auto-updated\n        setTimeout(() => this.setHandle(this.$handleInput.val()), 200)\n      }\n    })\n\n    this.addListener(this.$handleInput, 'keyup change textchange', () => this.setHandle(this.$handleInput.val()))\n    this.addListener(this.$descriptionInput, 'keyup change textchange', () => this.setDescription(this.$descriptionInput.val()))\n    this.addListener(this.$iconIdContainer, 'change', () => {\n      setTimeout(\n        () => {\n          const $iconIdInput = this.$iconIdInput\n          const iconId = $iconIdInput.length > 0 ? $iconIdInput.val() : null\n          this._setIconId(iconId)\n        },\n        500\n      )\n    })\n    this.addListener(this._enabledLightswitch, 'change', () => this.setEnabled(this._enabledLightswitch.on))\n    this.addListener(this._ignorePermissionsLightswitch, 'change', () => this.setIgnorePermissions(this._ignorePermissionsLightswitch.on))\n    this.addListener(this.$minBlocksInput, 'keyup change', () => this.setMinBlocks(this.$minBlocksInput.val()))\n    this.addListener(this.$maxBlocksInput, 'keyup change', () => this.setMaxBlocks(this.$maxBlocksInput.val()))\n    this.addListener(this.$minSiblingBlocksInput, 'keyup change', () => this.setMinSiblingBlocks(this.$minSiblingBlocksInput.val()))\n    this.addListener(this.$maxSiblingBlocksInput, 'keyup change', () => this.setMaxSiblingBlocks(this.$maxSiblingBlocksInput.val()))\n    this.addListener(this.$minChildBlocksInput, 'keyup change', () => this.setMinChildBlocks(this.$minChildBlocksInput.val()))\n    this.addListener(this.$maxChildBlocksInput, 'keyup change', () => this.setMaxChildBlocks(this.$maxChildBlocksInput.val()))\n    this.addListener(this.$topLevelInput, 'change', () => this.setTopLevel(this._topLevelLightswitch.on))\n    this.addListener(this.$groupChildBlockTypesInput, 'change', () => this.setTopLevel(this._groupChildBlockTypesLightswitch.on))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n        this.destroy()\n      }\n    })\n\n    this.$childBlocksInput.on('change', 'input', () => this._refreshChildBlockSettings())\n\n    this._initialised = true\n  },\n\n  _generateChildBlocksCheckbox (settings) {\n    NS.enter(this._templateNs)\n    const id = NS.value('childBlock-' + settings.getId(), '-')\n    const name = NS.fieldName('childBlocks')\n    NS.leave()\n\n    return $(`\n      <div data-neo-btsc=\"container.${settings.getId()}\">\n        <input type=\"checkbox\" value=\"${settings.getHandle()}\" id=\"${id}\" class=\"checkbox\" name=\"${name}[]\" data-neo-btsc=\"input.${settings.getId()}\">\n        <label for=\"${id}\" data-neo-btsc=\"text.label\">${settings.getName()}</label>\n      </div>`)\n  },\n\n  get $iconIdInput () {\n    return this.$iconIdContainer.find('input[type=\"hidden\"]')\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getFieldLayoutId () {\n    return this._fieldLayoutId\n  },\n\n  getFieldLayoutConfig () {\n    return Object.assign({}, this._fieldLayoutConfig)\n  },\n\n  isNew () {\n    return /^new/.test(this.getId())\n  },\n\n  getErrors () {\n    return this._errors\n  },\n\n  getName () { return this._name ?? this._originalSettings.name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      if (this.$nameInput.val() !== this._name) {\n        this.$nameInput.val(this._name)\n      }\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getHandle () { return this._handle ?? this._originalSettings.handle },\n  setHandle (handle) {\n    if (handle !== this._handle) {\n      const oldHandle = this._handle\n      this._handle = handle\n\n      if (this.$handleInput.val() !== this._handle) {\n        this.$handleInput.val(this._handle)\n      }\n\n      this.trigger('change', {\n        property: 'handle',\n        oldValue: oldHandle,\n        newValue: this._handle\n      })\n    }\n  },\n\n  getDescription () { return this._description },\n  setDescription (description) {\n    if (description !== this._description) {\n      const oldDescription = this._description\n      this._description = description\n\n      if (this.$descriptionInput.val() !== this._description) {\n        this.$descriptionInput.val(this._description)\n      }\n\n      this.trigger('change', {\n        property: 'description',\n        oldValue: oldDescription,\n        newValue: this._description\n      })\n    }\n  },\n\n  getIconId () { return this._iconId },\n  _setIconId (iconId) {\n    if (iconId !== this._iconId) {\n      const oldIconId = this._iconId\n      this._iconId = iconId\n\n      if (this.$iconIdInput.val() !== this._iconId) {\n        // TODO\n        // This is normally where we would reset the input value, but since the icon ID setting is an asset field, we\n        // would also need to update the element HTML. This would be good to implement in the future, and then this\n        // method could be made public.\n      }\n\n      this.trigger('change', {\n        property: 'iconId',\n        oldValue: oldIconId,\n        newValue: this._iconId\n      })\n    }\n  },\n\n  getEnabled () { return this._enabled },\n  setEnabled (enabled) { this._setLightswitchField('enabled', enabled) },\n\n  getIgnorePermissions () { return this._ignorePermissions },\n  setIgnorePermissions (ignore) { this._setLightswitchField('ignorePermissions', ignore) },\n\n  getMinBlocks () { return this._minBlocks },\n  setMinBlocks (minBlocks) { this._setBlocksConstraint('minBlocks', minBlocks) },\n\n  getMaxBlocks () { return this._maxBlocks },\n  setMaxBlocks (maxBlocks) { this._setBlocksConstraint('maxBlocks', maxBlocks) },\n\n  getMinSiblingBlocks () { return this._minSiblingBlocks },\n  setMinSiblingBlocks (minSiblingBlocks) { this._setBlocksConstraint('minSiblingBlocks', minSiblingBlocks) },\n\n  getMaxSiblingBlocks () { return this._maxSiblingBlocks },\n  setMaxSiblingBlocks (maxSiblingBlocks) { this._setBlocksConstraint('maxSiblingBlocks', maxSiblingBlocks) },\n\n  getMinChildBlocks () { return this._minChildBlocks },\n  getMaxChildBlocks () { return this._maxChildBlocks },\n  setMinChildBlocks (minChildBlocks) { this._setBlocksConstraint('minChildBlocks', minChildBlocks) },\n  setMaxChildBlocks (maxChildBlocks) { this._setBlocksConstraint('maxChildBlocks', maxChildBlocks) },\n  _setBlocksConstraint (mode, value) {\n    const privateProp = `_${mode}`\n    const jqueryProp = `$${mode}Input`\n    const oldValue = this[privateProp]\n    const newValue = Math.max(0, value | 0)\n\n    if (newValue === 0) {\n      this[jqueryProp].val(null)\n    }\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[privateProp] > 0 && parseInt(this[jqueryProp].val()) !== this[privateProp]) {\n        this[jqueryProp].val(this[privateProp])\n      }\n\n      this.trigger('change', {\n        property: mode,\n        oldValue,\n        newValue: this[privateProp]\n      })\n    }\n  },\n\n  getTopLevel () { return this._topLevel ?? this._originalSettings.topLevel },\n  setTopLevel (topLevel) { this._setLightswitchField('topLevel', topLevel) },\n\n  _setLightswitchField (property, value) {\n    const privateProp = `_${property}`\n    const lightswitchProp = `${privateProp}Lightswitch`\n    const oldValue = this[privateProp]\n    const newValue = !!value\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[lightswitchProp] && this[lightswitchProp].on !== this[privateProp]) {\n        this[lightswitchProp].on = this[privateProp]\n        this[lightswitchProp].toggle()\n      }\n\n      this.trigger('change', {\n        property,\n        oldValue,\n        newValue\n      })\n    }\n  },\n\n  getChildBlocks () {\n    const select = this._childBlocksSelect\n    const childBlocks = []\n\n    if (typeof select === 'undefined') {\n      return this._childBlocks === true ? true : Array.from(this._childBlocks ?? [])\n    }\n\n    if (select.$all.prop('checked')) {\n      return true\n    }\n\n    select.$options.each(function (index) {\n      const $option = $(this)\n\n      if ($option.prop('checked')) {\n        childBlocks.push($option.val())\n      }\n    })\n\n    return childBlocks.length > 0 ? childBlocks : false\n  },\n\n  setChildBlocks (childBlocks) {\n    if (typeof childBlocks === 'undefined') {\n      childBlocks = this._childBlocks\n    }\n\n    const select = this._childBlocksSelect\n\n    if (childBlocks === true || childBlocks === '*') {\n      select.$all.prop('checked', true)\n      select.onAllChange()\n    } else if (Array.isArray(childBlocks)) {\n      select.$all.prop('checked', false)\n\n      for (const handle of childBlocks) {\n        select.$options.filter(`[value=\"${handle}\"]`).prop('checked', true)\n      }\n    } else {\n      select.$all.prop('checked', false)\n      select.$options.prop('checked', false)\n    }\n\n    this._refreshChildBlockSettings(false)\n  },\n\n  addChildBlockType (blockType) {\n    if (!this._childBlockTypes.includes(blockType)) {\n      const settings = blockType.getSettings()\n      const $existingCheckbox = this.$childBlocksContainer.find(`[data-neo-btsc=\"input.${settings.getId()}\"]`)\n      const $checkbox = $existingCheckbox.length > 0\n        ? $existingCheckbox\n        : this._generateChildBlocksCheckbox(settings)\n\n      this._childBlockTypes.push(blockType)\n\n      if ($existingCheckbox.length === 0) {\n        this.$childBlocksContainer.append($checkbox)\n        this._refreshChildBlockType(blockType)\n      }\n\n      const select = this._childBlocksSelect\n      const allChecked = select.$all.prop('checked')\n      select.$options = select.$options.add($checkbox.find('input'))\n      if (allChecked) select.onAllChange()\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.on('change' + eventNs, e => this['@onChildBlockTypeChange'](e, blockType, $checkbox))\n      settings.on('destroy' + eventNs, e => this.removeChildBlockType(blockType))\n    }\n  },\n\n  removeChildBlockType (blockType) {\n    const index = this._childBlockTypes.indexOf(blockType)\n    if (index >= 0) {\n      this._childBlockTypes.splice(index, 1)\n\n      const settings = blockType.getSettings()\n      const $checkbox = this.$childBlocksContainer.children().eq(index)\n\n      $checkbox.remove()\n\n      const select = this._childBlocksSelect\n      select.$options = select.$options.remove($checkbox.find('input'))\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.off(eventNs)\n\n      this._refreshChildBlockType(blockType)\n    }\n  },\n\n  getConditions () {\n    NS.enter(this._templateNs)\n    const baseInputName = NS.toFieldName().replaceAll('\\\\', '\\\\\\\\')\n    NS.leave()\n    const baseConditionInputNameWithExtraSlash = `${baseInputName}[conditions]`\n    const baseConditionInputName = baseConditionInputNameWithExtraSlash.replaceAll('\\\\\\\\', '\\\\')\n    const conditionInputNames = this.$container\n      .find(`[name^=\"${baseConditionInputNameWithExtraSlash}\"]`)\n      .get()\n      .map((condition) => condition.name)\n\n    const allFormData = new window.FormData(this.$container.closest('form').get(0))\n    const conditionsData = {}\n\n    conditionInputNames.forEach((conditionInputName) => {\n      let conditionsSubData = conditionsData\n      const conditionsCurrentPath = [baseConditionInputName]\n      const conditionsDataPath = conditionInputName\n        .replace(baseConditionInputName, '')\n        .slice(1, -1)\n        .split('][')\n\n      conditionsDataPath.forEach((pathStep, i) => {\n        conditionsCurrentPath.push(`[${pathStep}]`)\n\n        if (pathStep !== '' && !(pathStep in conditionsSubData)) {\n          if (pathStep === 'values') {\n            conditionsSubData[pathStep] = []\n          } else if (i < conditionsDataPath.length - 1) {\n            conditionsSubData[pathStep] = {}\n          } else {\n            conditionsSubData[pathStep] = allFormData.get(conditionsCurrentPath.join(''))\n          }\n        } else if (pathStep === '') {\n          conditionsSubData.push(...allFormData.getAll(conditionsCurrentPath.join('')))\n        }\n\n        conditionsSubData = conditionsSubData[pathStep]\n      })\n    })\n\n    return conditionsData\n  },\n\n  /**\n   * @since 3.8.0\n   */\n  refreshChildBlockTypes (childBlockTypes) {\n    if (childBlockTypes) {\n      this._childBlockTypes = childBlockTypes\n    }\n\n    this._childBlockTypes.forEach((childBlockType) => this._refreshChildBlockType(childBlockType))\n  },\n\n  _refreshChildBlockType (blockType) {\n    const $sidebarContainer = blockType.getField().$sidebarContainer\n    const $sidebarItem = $sidebarContainer.find(`[data-neo-bt=\"container.${blockType.getId()}\"]`)\n    let $refreshedBlockType = this.$childBlocksContainer.children(`[data-neo-btsc=\"container.${blockType.getId()}\"]`)\n\n    if ($refreshedBlockType.length === 0) {\n      // New block type, create checkbox\n      $refreshedBlockType = this._generateChildBlocksCheckbox(blockType.getSettings())\n    }\n\n    if ($sidebarItem.length > 0) {\n      // Block type reordered\n      const position = $sidebarItem.index('.nc_sidebar_list_item:not(.type-heading)')\n      const $currentChildBlockTypeAtPos = this.$childBlocksContainer.children().eq(position)\n\n      if ($currentChildBlockTypeAtPos.length > 0) {\n        $refreshedBlockType.insertBefore($currentChildBlockTypeAtPos)\n      } else {\n        // Added to the end\n        $refreshedBlockType.appendTo(this.$childBlocksContainer)\n      }\n    } else {\n      // Block type deleted\n      $refreshedBlockType.remove()\n    }\n  },\n\n  _refreshChildBlockSettings (animate) {\n    const showSettings = !!this.getChildBlocks()\n    this._refreshSetting(this.$minChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$maxChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$groupChildBlockTypesContainer, showSettings, animate)\n  },\n\n  '@onChildBlockTypeChange' (e, blockType, $checkbox) {\n    const $neo = $checkbox.find('[data-neo-btsc]')\n    const $input = $neo.filter(`[data-neo-btsc=\"input.${blockType.getSettings().getId()}\"]`)\n    const $labelText = $neo.filter('[data-neo-btsc=\"text.label\"]')\n\n    switch (e.property) {\n      case 'name':\n        $labelText.text(e.newValue)\n        break\n\n      case 'handle':\n        $input.val(e.newValue)\n        break\n    }\n  }\n},\n{\n  _totalNewBlockTypes: 0,\n\n  getNewId () {\n    return `new${this._totalNewBlockTypes++}`\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Item from './Item'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: []\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    this.base(settings)\n\n    settings = Object.assign({}, _defaults, settings)\n\n    const settingsObj = this.getSettings()\n    this._templateNs = NS.parse(settings.namespace)\n    const sidebarItem = this.getField()?.$sidebarContainer.find(`[data-neo-g=\"container.${this.getId()}`)\n\n    if (sidebarItem?.length > 0) {\n      this.$container = sidebarItem\n    } else {\n      this.$container = this._generateGroup(settingsObj)\n    }\n\n    const $neo = this.$container.find('[data-neo-g]')\n    this.$nameText = $neo.filter('[data-neo-g=\"text.name\"]')\n    this.$moveButton = $neo.filter('[data-neo-g=\"button.move\"]')\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n    }\n\n    this.deselect()\n  },\n\n  _generateGroup (settings) {\n    const sortOrderNamespace = [...this._templateNs]\n    sortOrderNamespace.pop()\n    NS.enter(sortOrderNamespace)\n    const sortOrderName = NS.fieldName('sortOrder')\n    NS.leave()\n\n    return $(`\n      <div class=\"nc_sidebar_list_item type-heading\" data-neo-g=\"container.${this.getId()}\">\n        <div class=\"label\" data-neo-g=\"text.name\">${settings.getName() ?? ''}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-g=\"button.move\"></a>\n        <input type=\"hidden\" name=\"${sortOrderName}[]\" value=\"group:${this.getId()}\" data-neo-g=\"input.sortOrder\">\n      </div>`)\n  },\n\n  /**\n   * @inheritDoc\n   */\n  load () {\n    if (this._loaded) {\n      // Already loaded\n      return Promise.resolve()\n    }\n\n    this.trigger('beforeLoad')\n    const data = {\n      groupId: this.getId()\n    }\n\n    return new Promise((resolve, reject) => {\n      Craft.sendActionRequest('POST', 'neo/configurator/render-block-type-group', { data })\n        .then(response => {\n          this.getSettings().createContainer({\n            html: response.data.settingsHtml.replace(/__NEOBLOCKTYPEGROUP_ID__/g, data.groupId),\n            js: response.data.settingsJs.replace(/__NEOBLOCKTYPEGROUP_ID__/g, data.groupId)\n          })\n          this._loaded = true\n\n          this.trigger('afterLoad')\n          resolve()\n        })\n        .catch(reject)\n    })\n  },\n\n  getId () {\n    return this.getSettings().getId()\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const selected = this.isSelected()\n\n    if (settings?.$container ?? false) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    if (selected) {\n      this.load()\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport NS from '../namespace'\nimport Settings from './Settings'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  name: '',\n  alwaysShowDropdown: null,\n  defaultAlwaysShowGroupDropdowns: true\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n\n  $container: null,\n  $sortOrderInput: new $(),\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $maxBlocksInput: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id\n    this._alwaysShowDropdown = settings.alwaysShowDropdown\n    this._defaultAlwaysShowGroupDropdowns = settings.defaultAlwaysShowGroupDropdowns\n    this._originalSettings = settings\n\n    if (typeof settings.html !== 'undefined' && settings.html !== null) {\n      this.createContainer({\n        html: settings.html,\n        js: settings.js\n      })\n    }\n  },\n\n  createContainer (containerData) {\n    // Only create it if it doesn't already exist\n    if (this.$container !== null) {\n      return\n    }\n\n    this.$container = $(containerData.html)\n    this._js = containerData.js ?? ''\n\n    const $neo = this.$container.find('[data-neo-gs]')\n    this.$nameInput = $neo.filter('[data-neo-gs=\"input.name\"]')\n    this.$deleteButton = $neo.filter('[data-neo-gs=\"button.delete\"]')\n    this.$alwaysShowDropdownContainer = $neo.filter('[data-neo-gs=\"container.alwaysShowDropdown\"]')\n\n    this.setName(this._originalSettings.name)\n\n    this.addListener(this.$nameInput, 'keyup change', () => this.setName(this.$nameInput.val()))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this group?'))) {\n        this.destroy()\n      }\n    })\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getName () { return this._name ?? this._originalSettings.name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      this.$nameInput.val(this._name)\n      this._refreshAlwaysShowDropdown()\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getAlwaysShowDropdown () { return this._alwaysShowDropdown ?? this._originalSettings.alwaysShowDropdown },\n\n  _refreshAlwaysShowDropdown (animate) {\n    this._refreshSetting(this.$alwaysShowDropdownContainer, !!this._name, animate)\n  }\n},\n{\n  _totalNewGroups: 0,\n\n  getNewId () {\n    return `new${this._totalNewGroups++}`\n  }\n})\n","import $ from 'jquery'\nimport '../jquery-extensions'\n\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport { v4 as uuidv4 } from 'uuid'\nimport NS from '../namespace'\n\nimport BlockType from './BlockType'\nimport BlockTypeSettings from './BlockTypeSettings'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\nimport Group from './Group'\nimport GroupSettings from './GroupSettings'\nimport './styles/configurator.scss'\n\nconst _defaults = {\n  namespace: [],\n  blockTypes: [],\n  groups: [],\n  blockTypeSettingsHtml: '',\n  blockTypeSettingsJs: '',\n  fieldLayoutHtml: '',\n  groupSettingsHtml: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n  _items: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    const inputIdPrefix = Craft.formatInputId(settings.namespace)\n    const $field = $(`#${inputIdPrefix}-neo-configurator`)\n    this.$container = $field.children('.field').children('.input')\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._blockTypeSettingsHtml = settings.blockTypeSettingsHtml\n    this._blockTypeSettingsJs = settings.blockTypeSettingsJs\n    this._fieldLayoutHtml = settings.fieldLayoutHtml\n    this._blockTypeGroupSettingsHtml = settings.blockTypeGroupSettingsHtml\n    this._items = []\n\n    const $neo = this.$container.find('[data-neo]')\n    this.$mainContainer = $neo.filter('[data-neo=\"container.main\"]')\n    this.$sidebarContainer = $neo.filter('[data-neo=\"container.sidebar\"]')\n    this.$blockTypesContainer = $neo.filter('[data-neo=\"container.blockTypes\"]')\n    this.$settingsContainer = $neo.filter('[data-neo=\"container.settings\"]')\n    this.$fieldLayoutContainer = $neo.filter('[data-neo=\"container.fieldLayout\"]')\n    this.$blockTypeButton = $neo.filter('[data-neo=\"button.blockType\"]')\n    this.$groupButton = $neo.filter('[data-neo=\"button.group\"]')\n    this.$settingsButton = $neo.filter('[data-neo=\"button.settings\"]')\n    this.$fieldLayoutButton = $neo.filter('[data-neo=\"button.fieldLayout\"]')\n\n    this._itemSort = new Garnish.DragSort(null, {\n      container: this.$blockTypesContainer,\n      handle: '[data-neo-bt=\"button.move\"], [data-neo-g=\"button.move\"]',\n      axis: 'y',\n      onSortChange: () => this._updateItemOrder()\n    })\n\n    // Add the existing block types and groups\n    const existingItems = []\n    const btNamespace = [...this._templateNs, 'items', 'blockTypes']\n    const gNamespace = [...this._templateNs, 'items', 'groups']\n\n    for (const btInfo of settings.blockTypes) {\n      const btSettings = new BlockTypeSettings({\n        namespace: [...btNamespace, btInfo.id],\n        sortOrder: btInfo.sortOrder,\n        id: btInfo.id,\n        name: btInfo.name,\n        handle: btInfo.handle,\n        description: btInfo.description,\n        iconId: btInfo.iconId,\n        enabled: btInfo.enabled,\n        ignorePermissions: btInfo.ignorePermissions,\n        minBlocks: btInfo.minBlocks,\n        maxBlocks: btInfo.maxBlocks,\n        minSiblingBlocks: btInfo.minSiblingBlocks,\n        maxSiblingBlocks: btInfo.maxSiblingBlocks,\n        minChildBlocks: btInfo.minChildBlocks,\n        maxChildBlocks: btInfo.maxChildBlocks,\n        topLevel: btInfo.topLevel,\n        html: btInfo.settingsHtml,\n        js: btInfo.settingsJs,\n        errors: btInfo.errors,\n        fieldLayoutId: btInfo.fieldLayoutId,\n        fieldLayoutConfig: btInfo.fieldLayoutConfig,\n        childBlocks: btInfo.childBlocks,\n        childBlockTypes: existingItems.filter(item => item instanceof BlockType)\n      })\n\n      const blockType = new BlockType({\n        namespace: btNamespace,\n        field: this,\n        settings: btSettings\n      })\n\n      blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n      blockType.on('paste.configurator', () => this._pasteBlockType())\n      blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType))\n      blockType.on('beforeLoad.configurator', () => {\n        this.$fieldLayoutContainer.append(\n          $('<span class=\"spinner\"/></span>')\n        )\n        this.$settingsContainer.append(\n          $('<span class=\"spinner\"/></span>')\n        )\n      })\n      blockType.on('afterLoad.configurator', () => {\n        this.$fieldLayoutContainer.children('.spinner').remove()\n        this.$settingsContainer.children('.spinner').remove()\n        this.addItem(blockType)\n        const blockTypeSettings = blockType.getSettings()\n        blockTypeSettings?.refreshChildBlockTypes(this.getBlockTypes())\n        blockTypeSettings?.setChildBlocks()\n      })\n      existingItems.push(blockType)\n    }\n\n    for (const gInfo of settings.groups) {\n      const gSettings = new GroupSettings({\n        namespace: [...gNamespace, gInfo.id],\n        sortOrder: gInfo.sortOrder,\n        id: gInfo.id,\n        name: gInfo.name,\n        alwaysShowDropdown: gInfo.alwaysShowDropdown,\n        defaultAlwaysShowGroupDropdowns: settings.defaultAlwaysShowGroupDropdowns\n      })\n\n      const group = new Group({\n        namespace: gNamespace,\n        field: this,\n        settings: gSettings\n      })\n\n      group.on('beforeLoad.configurator', () => this.$settingsContainer.append(\n        $('<span class=\"spinner\"/></span>')\n      ))\n      group.on('afterLoad.configurator', () => {\n        this.$settingsContainer.children('.spinner').remove()\n        this.addItem(group)\n      })\n      existingItems.push(group)\n    }\n\n    for (const item of existingItems.sort((a, b) => a.getSortOrder() - b.getSortOrder())) {\n      this.addItem(item)\n    }\n\n    for (const blockType of this.getBlockTypes()) {\n      const btSettings = blockType.getSettings()\n\n      if (btSettings?.$container) {\n        const info = settings.blockTypes.find(i => i.handle === btSettings.getHandle())\n        btSettings.setChildBlocks(info.childBlocks)\n      }\n    }\n\n    // Make sure menu states (for pasting block types) are updated when changing tabs\n    const refreshPasteOptions = () => {\n      const noPasteData = !window.localStorage.getItem('neo:copyBlockType')\n\n      for (const blockType of this.getBlockTypes()) {\n        blockType.$actionsMenu.find('[data-action=\"paste\"]').parent().toggleClass('disabled', noPasteData)\n      }\n    }\n\n    refreshPasteOptions()\n    this.addListener(document, 'visibilitychange.configurator', refreshPasteOptions)\n\n    this.selectTab('settings')\n\n    this.addListener(this.$blockTypeButton, 'click', '@newBlockType')\n    this.addListener(this.$groupButton, 'click', '@newGroup')\n    this.addListener(this.$settingsButton, 'click', () => this.selectTab('settings'))\n    this.addListener(this.$fieldLayoutButton, 'click', () => this.selectTab('fieldLayout'))\n  },\n\n  addItem (item, index = -1) {\n    const settings = item.getSettings()\n\n    if (!document.contains(item.$container[0])) {\n      this._insertAt(item.$container, index)\n    }\n\n    if (this._itemSort.$items.filter(item.$container).length === 0) {\n      this._itemSort.addItems(item.$container)\n    }\n\n    if (settings?.$container) {\n      this.$settingsContainer.append(settings.$container)\n\n      if (item instanceof BlockType) {\n        settings.initUi()\n      }\n    }\n\n    this.$mainContainer.removeClass('hidden')\n\n    this.addListener(item.$container, 'click', '@selectItem')\n    item.on('destroy.configurator', () => this.removeItem(item, false))\n\n    if (item instanceof BlockType) {\n      this._addFieldLayout(item.getFieldLayout())\n    }\n\n    this._items.push(item)\n\n    // Only bother updating the item order if the item wasn't just being appended\n    if (index >= 0 && index < this._items.length - 1) {\n      this._updateItemOrder()\n    }\n\n    if (item instanceof BlockType) {\n      for (const blockType of this.getBlockTypes()) {\n        const btSettings = blockType.getSettings()\n        if (btSettings?.$container) {\n          btSettings.addChildBlockType(item)\n        }\n      }\n    }\n\n    this.trigger('addItem', {\n      item,\n      index\n    })\n  },\n\n  _addFieldLayout (fieldLayout) {\n    if (fieldLayout) {\n      this.$fieldLayoutContainer.append(fieldLayout.$container)\n    }\n  },\n\n  removeItem (item, showConfirm) {\n    showConfirm = (typeof showConfirm === 'boolean' ? showConfirm : false)\n\n    if (showConfirm) {\n      const message = Craft.t('neo', 'Are you sure you want to delete this {type}?', {\n        type:\n        item instanceof BlockType\n          ? 'block type'\n          : item instanceof Group\n            ? 'group'\n            : 'item'\n      })\n\n      if (window.confirm(message)) {\n        this.removeItem(item, false)\n      }\n    } else {\n      const settings = item.getSettings()\n\n      this._itemSort.removeItems(item.$container)\n\n      item.$container.remove()\n\n      if (settings?.$container) {\n        settings.$container.remove()\n      }\n\n      if (item instanceof BlockType) {\n        const fieldLayout = item.getFieldLayout()\n        if (fieldLayout) fieldLayout.$container.remove()\n      }\n\n      this.removeListener(item.$container, 'click')\n      item.off('.configurator')\n\n      this._items = this._items.filter((oldItem) => oldItem !== item)\n\n      if (this._items.length === 0) {\n        this.$mainContainer.addClass('hidden')\n      }\n\n      this.trigger('removeItem', {\n        item\n      })\n    }\n  },\n\n  getItems () {\n    return Array.from(this._items)\n  },\n\n  getItemByElement ($element) {\n    return this._items.find(item => item.$container.is($element))\n  },\n\n  getSelectedItem () {\n    return this._items.find(item => item.isSelected())\n  },\n\n  selectItem (item, focusInput) {\n    focusInput = (typeof focusInput === 'boolean' ? focusInput : true)\n\n    const settings = item ? item.getSettings() : null\n\n    for (const i of this._items) {\n      const thisIsTheItem = i === item\n      i.toggleSelect(thisIsTheItem)\n\n      if (thisIsTheItem) {\n        const itemIsGroup = !(i instanceof BlockType)\n        this.$fieldLayoutButton.toggleClass('hidden', itemIsGroup)\n\n        if (itemIsGroup) {\n          this.selectTab('settings')\n        }\n      }\n    }\n\n    Craft.ElementThumbLoader.retryAll()\n\n    if (focusInput && settings && !Garnish.isMobileBrowser()) {\n      setTimeout(() => settings.getFocusInput().focus(), 100)\n    }\n  },\n\n  getBlockTypes () {\n    return this._items.filter(item => item instanceof BlockType)\n  },\n\n  getGroups () {\n    return this._items.filter(item => item instanceof Group)\n  },\n\n  selectTab (tab) {\n    this.$settingsContainer.toggleClass('hidden', tab !== 'settings')\n    this.$fieldLayoutContainer.toggleClass('hidden', tab !== 'fieldLayout')\n\n    this.$settingsButton.toggleClass('is-selected', tab === 'settings')\n    this.$fieldLayoutButton.toggleClass('is-selected', tab === 'fieldLayout')\n  },\n\n  _getNewBlockTypeSettingsHtml (blockTypeId) {\n    return this._blockTypeSettingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewBlockTypeSettingsJs (blockTypeId) {\n    return this._blockTypeSettingsJs.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewFieldLayoutHtml () {\n    return this._fieldLayoutHtml.replace(\n      /&quot;uid&quot;:&quot;([a-f0-9-]+)&quot;/,\n      `&quot;uid&quot;:&quot;${uuidv4()}&quot;`\n    )\n  },\n\n  _getNewBlockTypeGroupSettingsHtml (groupId) {\n    return this._blockTypeGroupSettingsHtml.replace(/__NEOBLOCKTYPEGROUP_ID__/g, groupId)\n  },\n\n  _updateItemOrder () {\n    const items = []\n\n    this._itemSort.$items.each((index, element) => {\n      const item = this.getItemByElement(element)\n\n      if (item) {\n        items.push(item)\n\n        if (item instanceof BlockType) {\n          item.getSettings().refreshChildBlockTypes()\n        }\n      }\n    })\n\n    this._items = items\n  },\n\n  _createBlockTypeFrom (oldBlockType) {\n    const namespace = [...this._templateNs, 'items', 'blockTypes']\n    let id\n    do {\n      id = BlockTypeSettings.getNewId()\n    } while (this.$blockTypesContainer.find(`[data-neo-bt=\"container.${id}\"]`).length > 0)\n\n    const selectedItem = this.getSelectedItem()\n    const selectedIndex = selectedItem ? selectedItem.getSortOrder() : -1\n\n    if (oldBlockType === null) {\n      const settings = new BlockTypeSettings({\n        childBlockTypes: this.getBlockTypes(),\n        id,\n        namespace: [...namespace, id],\n        sortOrder: this._items.length,\n        html: this._getNewBlockTypeSettingsHtml(id),\n        js: this._getNewBlockTypeSettingsJs(id)\n      })\n      const fieldLayout = new BlockTypeFieldLayout({\n        blockTypeId: id,\n        html: this._getNewFieldLayoutHtml(),\n        namespace: [...namespace, id]\n      })\n\n      this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n    } else {\n      const oldSettings = oldBlockType.getSettings()\n      const settingsObj = {\n        childBlocks: oldSettings.getChildBlocks(),\n        conditions: oldSettings.getConditions(),\n        // Set a timestamp on the handle so it doesn't clash with the old one\n        handle: `${oldSettings.getHandle()}_${Date.now()}`,\n        id,\n        minBlocks: oldSettings.getMinBlocks(),\n        maxBlocks: oldSettings.getMaxBlocks(),\n        minChildBlocks: oldSettings.getMinChildBlocks(),\n        maxChildBlocks: oldSettings.getMaxChildBlocks(),\n        minSiblingBlocks: oldSettings.getMinSiblingBlocks(),\n        maxSiblingBlocks: oldSettings.getMaxSiblingBlocks(),\n        name: oldSettings.getName(),\n        description: oldSettings.getDescription(),\n        iconId: oldSettings.getIconId(),\n        enabled: oldSettings.getEnabled(),\n        ignorePermissions: oldSettings.getIgnorePermissions(),\n        sortOrder: this._items.length,\n        topLevel: oldSettings.getTopLevel()\n      }\n      const settings = new BlockTypeSettings({\n        ...settingsObj,\n        childBlockTypes: this.getBlockTypes(),\n        namespace: [...namespace, id]\n      })\n      const $spinner = $('<div class=\"nc_sidebar_list_item type-spinner\"><span class=\"spinner\"></span></div>')\n      this._insertAt($spinner, selectedIndex)\n\n      oldBlockType.load()\n        .then(() => {\n          const layout = oldBlockType.getFieldLayout().getConfig()\n          const data = {\n            settings: settingsObj,\n            layout: layout.tabs.length > 0 ? layout : null\n          }\n\n          Craft.queue.push(() => new Promise((resolve, reject) => {\n            Craft.sendActionRequest('POST', 'neo/configurator/render-block-type', { data })\n              .then(response => {\n                const fieldLayout = new BlockTypeFieldLayout({\n                  blockTypeId: id,\n                  html: response.data.layoutHtml,\n                  namespace: [...namespace, id]\n                })\n                settings.createContainer({\n                  html: response.data.settingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, id),\n                  js: response.data.settingsJs.replace(/__NEOBLOCKTYPE_ID__/g, id)\n                })\n\n                this.$blockTypesContainer.find('.type-spinner').remove()\n                this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n                resolve()\n              })\n              .catch(reject)\n          }))\n        })\n        .catch(() => Craft.cp.displayError(Craft.t('neo', 'Couldn’t create new block type.')))\n    }\n  },\n\n  _initBlockType (namespace, settings, fieldLayout, index) {\n    const blockType = new BlockType({\n      namespace,\n      field: this,\n      settings,\n      fieldLayout\n    })\n\n    this.addItem(blockType, index)\n    this.selectItem(blockType)\n    this.selectTab('settings')\n\n    blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n    blockType.on('paste.configurator', () => this._pasteBlockType())\n    blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType))\n  },\n\n  _copyBlockType (blockType) {\n    blockType.load()\n      .then(() => {\n        const settings = blockType.getSettings()\n        const data = {\n          childBlocks: settings.getChildBlocks(),\n          conditions: settings.getConditions(),\n          description: settings.getDescription(),\n          enabled: settings.getEnabled(),\n          iconId: settings.getIconId(),\n          ignorePermissions: settings.getIgnorePermissions(),\n          handle: settings.getHandle(),\n          layout: blockType.getFieldLayout().getConfig(),\n          minBlocks: settings.getMinBlocks(),\n          maxBlocks: settings.getMaxBlocks(),\n          minChildBlocks: settings.getMinChildBlocks(),\n          maxChildBlocks: settings.getMaxChildBlocks(),\n          minSiblingBlocks: settings.getMinSiblingBlocks(),\n          maxSiblingBlocks: settings.getMaxSiblingBlocks(),\n          name: settings.getName(),\n          topLevel: settings.getTopLevel()\n        }\n\n        window.localStorage.setItem('neo:copyBlockType', JSON.stringify(data))\n        this.getBlockTypes().forEach(bt => bt.$actionsMenu.find('[data-action=\"paste\"]').parent().removeClass('disabled'))\n      })\n      .catch(() => Craft.cp.displayError(Craft.t('neo', 'Couldn’t copy block type.')))\n  },\n\n  _pasteBlockType () {\n    const encodedData = window.localStorage.getItem('neo:copyBlockType')\n\n    if (!encodedData) {\n      return\n    }\n\n    const data = JSON.parse(encodedData)\n    const blockTypeHandles = this.getBlockTypes().map(bt => bt.getSettings().getHandle())\n    const childBlocks = Array.isArray(data.childBlocks)\n      ? data.childBlocks.filter(cb => blockTypeHandles.includes(cb))\n      : (data.childBlocks ? true : [])\n    const settings = new BlockTypeSettings({\n      childBlocks,\n      childBlockTypes: this.getBlockTypes(),\n      conditions: data.conditions,\n      description: data.description,\n      iconId: data.iconId,\n      enabled: data.enabled,\n      ignorePermissions: data.ignorePermissions,\n      handle: data.handle,\n      minBlocks: data.minBlocks,\n      maxBlocks: data.maxBlocks,\n      minChildBlocks: data.minChildBlocks,\n      maxChildBlocks: data.maxChildBlocks,\n      minSiblingBlocks: data.minSiblingBlocks,\n      maxSiblingBlocks: data.maxSiblingBlocks,\n      name: data.name,\n      topLevel: data.topLevel,\n      html: ''\n    })\n\n    const fieldLayout = new BlockTypeFieldLayout({\n      html: this._getNewFieldLayoutHtml(),\n      layout: data.layout\n    })\n\n    const blockType = new BlockType({\n      field: this,\n      settings,\n      fieldLayout\n    })\n\n    this._createBlockTypeFrom(blockType)\n  },\n\n  _insertAt (element, index) {\n    const $element = $(element)\n\n    if (index >= 0 && index < this._items.length) {\n      $element.insertAt(index, this.$blockTypesContainer)\n    } else {\n      this.$blockTypesContainer.append($element)\n    }\n  },\n\n  '@newBlockType' () {\n    this._createBlockTypeFrom(null)\n  },\n\n  '@newGroup' () {\n    const namespace = [...this._templateNs, 'items', 'groups']\n    let id\n    do {\n      id = GroupSettings.getNewId()\n    } while (this.$blockTypesContainer.find(`[data-neo-g=\"container.${id}\"]`).length > 0)\n\n    const settings = new GroupSettings({\n      namespace: [...namespace, id],\n      html: this._getNewBlockTypeGroupSettingsHtml(id),\n      sortOrder: this._items.length,\n      id\n    })\n\n    const group = new Group({\n      namespace,\n      field: this,\n      settings\n    })\n\n    const selected = this.getSelectedItem()\n    const index = selected ? selected.getSortOrder() : -1\n\n    this.addItem(group, index)\n    this.selectItem(group)\n  },\n\n  '@selectItem' (e) {\n    const item = this.getItemByElement(e.currentTarget)\n\n    this.selectItem(item)\n  }\n})\n","import Configurator from './configurator/Configurator'\n\nconst context = window ?? this\nconst configurators = []\n\ncontext.Neo = {\n  Configurator,\n  configurators,\n\n  createConfigurator (settings = {}) {\n    const configurator = new Configurator(settings)\n    configurators.push(configurator)\n\n    return configurator\n  }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","jQuery","$","insertAt","index","$parent","this","each","prepend","children","eq","after","Garnish","Craft","randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","Error","byteToHex","i","push","toString","slice","unsafeStringify","arr","offset","options","buf","rnds","random","_stack","enter","segments","join","arguments","length","undefined","fromFieldName","joined","getNamespace","enterByFieldName","fieldName","leave","pop","Array","from","parse","value","indexOf","split","separator","prefix","toFieldName","replace","match","_defaults","settings","extend","$container","_field","_selected","init","assign","field","_settings","load","Promise","resolve","getField","getSettings","getSortOrder","select","toggleSelect","deselect","trigger","selected","isSelected","namespace","html","layout","id","blockId","blockName","_templateNs","NS","_id","_blockTypeId","blockTypeId","find","removeAttr","nameInput","name","concat","JSON","stringify","_fld","customizableTabs","customizableUi","updateChildBlocksUiElement","selector","$uiLibraryElement","$uiLibraryElements","filter","$tabUiElement","$tabContainer","toggleClass","hasClass","removeClass","_tabObserver","window","MutationObserver","observe","childList","subtree","getId","getBlockTypeId","getConfig","newConfig","tabs","tab","config","newElements","element","elements","newElement","fieldLayout","Item","_loaded","_this$getField","base","settingsObj","_fieldLayout","sidebarItem","$sidebarContainer","_generateBlockType","$neo","$nameText","$handleText","$moveButton","$actionsButton","menubtn","_actionsMenu","data","on","e","$actionsMenu","menu","addListener","stopPropagation","_updateTemplate","sortOrderNamespace","sortOrderName","errors","getErrors","hasErrors","isArray","keys","getName","getHandle","getFieldLayout","getFieldLayoutConfig","layoutId","getFieldLayoutId","reject","then","response","headHtml","bodyHtml","BlockTypeFieldLayout","layoutHtml","createContainer","settingsHtml","js","settingsJs","catch","_settings$$container","text","getTopLevel","_this$_actionsMenu","$option","option","hideMenu","attr","confirm","destroy","getFocusElement","_this$$foot","$foot","remove","_refreshSetting","showSetting","animate","css","opacity","marginBottom","outerHeight","velocity","addClass","BlockTypeIconSelect","constructor","container","_this$imageContainer$","_this$imageContainer","_this$imageContainer$2","_this$imageContainer2","_this$btnRemove","_defineProperty","imageContainer","querySelector","image","imageText","menuItems","querySelectorAll","btnSet","btnRemove","input","addEventListener","_","forEach","item","_item$querySelector","_item$querySelector2","filename","textContent","url","getAttribute","set","_this$image","_this$input","_this$btnRemove2","setAttribute","classList","_this$image2","_this$input2","_this$btnRemove3","add","sortOrder","fieldLayoutId","fieldLayoutConfig","handle","description","enabled","ignorePermissions","minBlocks","maxBlocks","minSiblingBlocks","maxSiblingBlocks","minChildBlocks","maxChildBlocks","topLevel","childBlocks","childBlockTypes","Settings","_childBlockTypes","_initialised","$nameInput","$handleInput","$descriptionInput","$minBlocksInput","$maxBlocksInput","$minSiblingBlocksInput","$maxSiblingBlocksInput","$minChildBlocksInput","$maxChildBlocksInput","$iconContainer","_childBlocks","_fieldLayoutId","_fieldLayoutConfig","_errors","_settingsChildBlockTypes","_originalSettings","_iconSelector","_afterCreateContainer","setName","setHandle","setDescription","_setIconId","iconId","setEnabled","setIgnorePermissions","setMinBlocks","setMaxBlocks","setMinSiblingBlocks","setMaxSiblingBlocks","setMinChildBlocks","setMaxChildBlocks","setTopLevel","containerData","_containerData$js","_js","$iconIdContainer","$enabledInput","$enabledContainer","$ignorePermissionsInput","$ignorePermissionsContainer","$minChildBlocksContainer","$maxChildBlocksContainer","$topLevelInput","$topLevelContainer","$groupChildBlockTypesInput","$groupChildBlockTypesContainer","$childBlocksInput","$childBlocksContainer","$deleteButton","initUi","append","_childBlocksSelect","_enabledLightswitch","_ignorePermissionsLightswitch","_topLevelLightswitch","_groupChildBlockTypesLightswitch","_handleGenerator","stopListening","blockType","addChildBlockType","setChildBlocks","val","listening","setTimeout","$iconIdInput","_refreshChildBlockSettings","_generateChildBlocksCheckbox","getFocusInput","isNew","test","_this$_name","_name","oldName","property","oldValue","newValue","_this$_handle","_handle","oldHandle","getDescription","_description","oldDescription","getIconId","_iconId","oldIconId","getEnabled","_enabled","_setLightswitchField","getIgnorePermissions","_ignorePermissions","ignore","getMinBlocks","_minBlocks","_setBlocksConstraint","getMaxBlocks","_maxBlocks","getMinSiblingBlocks","_minSiblingBlocks","getMaxSiblingBlocks","_maxSiblingBlocks","getMinChildBlocks","_minChildBlocks","getMaxChildBlocks","_maxChildBlocks","mode","privateProp","jqueryProp","Math","max","parseInt","_this$_topLevel","_topLevel","lightswitchProp","toggle","getChildBlocks","_this$_childBlocks","$all","$options","onAllChange","includes","$existingCheckbox","$checkbox","_refreshChildBlockType","allChecked","eventNs","removeChildBlockType","splice","off","getConditions","baseInputName","replaceAll","baseConditionInputNameWithExtraSlash","baseConditionInputName","conditionInputNames","map","condition","allFormData","FormData","closest","conditionsData","conditionInputName","conditionsSubData","conditionsCurrentPath","conditionsDataPath","pathStep","getAll","refreshChildBlockTypes","childBlockType","$sidebarItem","$refreshedBlockType","position","$currentChildBlockTypeAtPos","insertBefore","appendTo","showSettings","$input","$labelText","_totalNewBlockTypes","getNewId","_generateGroup","_settings$getName","groupId","alwaysShowDropdown","defaultAlwaysShowGroupDropdowns","$sortOrderInput","_alwaysShowDropdown","_defaultAlwaysShowGroupDropdowns","$alwaysShowDropdownContainer","_refreshAlwaysShowDropdown","getAlwaysShowDropdown","_this$_alwaysShowDrop","_totalNewGroups","blockTypes","groups","blockTypeSettingsHtml","blockTypeSettingsJs","fieldLayoutHtml","groupSettingsHtml","_items","inputIdPrefix","$field","_blockTypeSettingsHtml","_blockTypeSettingsJs","_fieldLayoutHtml","_blockTypeGroupSettingsHtml","blockTypeGroupSettingsHtml","$mainContainer","$blockTypesContainer","$settingsContainer","$fieldLayoutContainer","$blockTypeButton","$groupButton","$settingsButton","$fieldLayoutButton","_itemSort","axis","onSortChange","_updateItemOrder","existingItems","btNamespace","gNamespace","btInfo","btSettings","BlockTypeSettings","BlockType","_copyBlockType","_pasteBlockType","_createBlockTypeFrom","addItem","blockTypeSettings","getBlockTypes","gInfo","gSettings","GroupSettings","group","Group","sort","b","info","refreshPasteOptions","noPasteData","localStorage","getItem","parent","document","selectTab","contains","_insertAt","$items","addItems","removeItem","_addFieldLayout","showConfirm","message","type","removeItems","removeListener","oldItem","getItems","getItemByElement","$element","is","getSelectedItem","selectItem","focusInput","thisIsTheItem","itemIsGroup","retryAll","focus","getGroups","_getNewBlockTypeSettingsHtml","_getNewBlockTypeSettingsJs","_getNewFieldLayoutHtml","uuidv4","_getNewBlockTypeGroupSettingsHtml","items","oldBlockType","selectedItem","selectedIndex","_initBlockType","oldSettings","conditions","Date","now","_objectSpread","$spinner","displayError","setItem","bt","encodedData","blockTypeHandles","cb","currentTarget","context","_window","configurators","Neo","Configurator","createConfigurator","configurator"],"sourceRoot":""}