{"version":3,"file":"neo-configurator.js","mappings":"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","sources":["webpack://craft-neo/webpack/bootstrap","webpack://craft-neo/webpack/runtime/compat get default export","webpack://craft-neo/webpack/runtime/define property getters","webpack://craft-neo/webpack/runtime/hasOwnProperty shorthand","webpack://craft-neo/external var \"jQuery\"","webpack://craft-neo/./src/assets/src/jquery-extensions.js","webpack://craft-neo/external var \"Garnish\"","webpack://craft-neo/external var \"Craft\"","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/native.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/rng.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/v4.js","webpack://craft-neo/./src/assets/src/namespace.js","webpack://craft-neo/./src/assets/src/configurator/Item.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeFieldLayout.js","webpack://craft-neo/./src/assets/src/configurator/BlockType.js","webpack://craft-neo/./src/assets/src/configurator/Settings.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeSettings.js","webpack://craft-neo/./src/assets/src/configurator/Group.js","webpack://craft-neo/./src/assets/src/configurator/GroupSettings.js","webpack://craft-neo/./src/assets/src/configurator/Configurator.js","webpack://craft-neo/./src/assets/src/configurator.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = jQuery;","import $ from 'jquery'\n\n// @see http://stackoverflow.com/a/12903503/556609\n$.fn.insertAt = function (index, $parent) {\n  return this.each(function () {\n    if (index === 0) {\n      $parent.prepend(this)\n    } else {\n      $parent.children().eq(index - 1).after(this)\n    }\n  })\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = Garnish;","const __WEBPACK_NAMESPACE_OBJECT__ = Craft;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","export default {\n\n  _stack: [[]],\n\n  enter (segments, join = true) {\n    if (typeof segments === 'string') {\n      segments = this.fromFieldName(segments)\n    }\n\n    if (join) {\n      const joined = this.getNamespace()\n      joined.push(...segments)\n\n      segments = joined\n    }\n\n    this._stack.push(segments)\n  },\n\n  enterByFieldName (fieldName, join = true) {\n    this.enter(this.fromFieldName(fieldName), join)\n  },\n\n  leave () {\n    return this._stack.length > 1\n      ? this._stack.pop()\n      : this.getNamespace()\n  },\n\n  getNamespace () {\n    return Array.from(this._stack[this._stack.length - 1])\n  },\n\n  parse (value) {\n    if (typeof value === 'string') {\n      if (value.indexOf('[') > -1) {\n        return this.fromFieldName(value)\n      }\n\n      if (value.indexOf('-') > -1) {\n        return value.split('-')\n      }\n\n      if (value.indexOf('.') > -1) {\n        return value.split('.')\n      }\n\n      return value\n    }\n\n    return Array.from(value)\n  },\n\n  value (value, separator = '-') {\n    const segments = this.getNamespace()\n    segments.push(value)\n\n    return segments.join(separator)\n  },\n\n  fieldName (fieldName = '') {\n    const prefix = this.toFieldName()\n\n    if (prefix) {\n      return prefix + fieldName.replace(/([^'\"[\\]]+)([^'\"]*)/, '[$1]$2')\n    }\n\n    return fieldName\n  },\n\n  toString (separator = '-') {\n    return this.getNamespace().join(separator)\n  },\n\n  toFieldName () {\n    const segments = this.getNamespace()\n\n    switch (segments.length) {\n      case 0: return ''\n      case 1: return segments[0]\n    }\n\n    return segments[0] + '[' + segments.slice(1).join('][') + ']'\n  },\n\n  fromFieldName (fieldName) {\n    return fieldName.match(/[^[\\]\\s]+/g) || []\n  }\n}\n","import Garnish from 'garnish'\n\nconst _defaults = {\n  settings: null\n}\n\nexport default Garnish.Base.extend({\n\n  $container: null,\n  _field: null,\n  _selected: false,\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n    this._field = settings.field\n    this._settings = settings.settings\n  },\n\n  /**\n   * @since 3.8.0\n   * @returns Promise\n   */\n  load () {\n    return Promise.resolve()\n  },\n\n  /**\n   * @since 3.8.0\n   * @returns the Neo field this item belongs to\n   */\n  getField () {\n    return this._field\n  },\n\n  getSettings () {\n    return this._settings\n  },\n\n  /**\n   * @since 3.8.0\n   */\n  getSortOrder () {\n    return this.$container.index() + 1\n  },\n\n  select () {\n    this.toggleSelect(true)\n  },\n\n  deselect () {\n    this.toggleSelect(false)\n  },\n\n  toggleSelect: function (select) {\n    this._selected = (typeof select === 'boolean' ? select : !this._selected)\n\n    this.trigger('toggleSelect', {\n      selected: this._selected\n    })\n  },\n\n  isSelected () {\n    return this._selected\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: [],\n  html: '',\n  layout: null,\n  id: -1,\n  blockId: null,\n  blockName: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id | 0\n    this._blockTypeId = settings.blockTypeId\n\n    this.$container = $(settings.html).find('.layoutdesigner')\n    this.$container.removeAttr('id')\n\n    const nameInput = this.$container.find('input[name=\"fieldLayout\"]')\n\n    if (nameInput.length > 0) {\n      nameInput[0].name = `neoBlockType${this._blockTypeId}[fieldLayout]`\n\n      if (settings.layout) {\n        nameInput[0].value = JSON.stringify(settings.layout)\n      }\n    }\n\n    NS.enter(this._templateNs)\n\n    this._fld = new Craft.FieldLayoutDesigner(this.$container, {\n      customizableTabs: true,\n      customizableUi: true\n    })\n\n    NS.leave()\n\n    const updateChildBlocksUiElement = () => {\n      const selector = '[data-type=benf-neo-fieldlayoutelements-ChildBlocksUiElement]'\n      const $uiLibraryElement = this._fld.$uiLibraryElements.filter(selector)\n      const $tabUiElement = this._fld.$tabContainer.find(selector)\n      $uiLibraryElement.toggleClass(\n        'hidden',\n        $tabUiElement.length > 0 || $('body.dragging .draghelper' + selector).length > 0\n      )\n      if ($tabUiElement.hasClass('velocity-animating')) {\n        $tabUiElement.removeClass('hidden')\n      }\n    }\n\n    updateChildBlocksUiElement()\n    this._tabObserver = new window.MutationObserver(updateChildBlocksUiElement)\n    this._tabObserver.observe(this._fld.$tabContainer[0], { childList: true, subtree: true })\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getBlockTypeId () {\n    return this._blockTypeId\n  },\n\n  getConfig () {\n    const newConfig = { tabs: [] }\n\n    for (const tab of this._fld.config.tabs) {\n      const newElements = []\n\n      for (const element of tab.elements) {\n        const newElement = {}\n\n        for (const key in element) {\n          newElement[key] = key === 'required' && !element[key] ? '' : element[key]\n        }\n\n        newElements.push(newElement)\n      }\n\n      newConfig.tabs.push({\n        elements: newElements,\n        name: tab.name.slice()\n      })\n    }\n\n    return newConfig\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Item from './Item'\nimport NS from '../namespace'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\n\nconst _defaults = {\n  namespace: [],\n  fieldLayout: null\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n  _loaded: false,\n\n  init (settings = {}) {\n    this.base(settings)\n\n    const settingsObj = this.getSettings()\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._field = settings.field\n    this._fieldLayout = settings.fieldLayout\n    const sidebarItem = this.getField()?.$sidebarContainer.find(`[data-neo-bt=\"container.${this.getId()}`)\n\n    if (sidebarItem?.length > 0) {\n      this.$container = sidebarItem\n    } else {\n      this.$container = this._generateBlockType(settingsObj)\n    }\n\n    const $neo = this.$container.find('[data-neo-bt]')\n    this.$nameText = $neo.filter('[data-neo-bt=\"text.name\"]')\n    this.$handleText = $neo.filter('[data-neo-bt=\"text.handle\"]')\n    this.$moveButton = $neo.filter('[data-neo-bt=\"button.move\"]')\n    this.$actionsButton = $neo.filter('[data-neo-bt=\"button.actions\"]')\n\n    // Set up the actions menu\n    this.$actionsButton.menubtn()\n    this._actionsMenu = this.$actionsButton.data('menubtn')\n    this._actionsMenu.on('optionSelect', e => this['@actionSelect'](e))\n    this.$actionsMenu = this._actionsMenu.menu.$container\n\n    // Stop the actions button click from selecting the block type and closing the menu\n    this.addListener(this.$actionsButton, 'click', e => e.stopPropagation())\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n\n      this._updateTemplate()\n    }\n\n    this.deselect()\n  },\n\n  _generateBlockType (settings) {\n    const sortOrderNamespace = [...this._templateNs]\n    sortOrderNamespace.pop()\n    NS.enter(sortOrderNamespace)\n    const sortOrderName = NS.fieldName('sortOrder')\n    NS.leave()\n    const errors = settings.getErrors()\n    const hasErrors = (Array.isArray(errors) ? errors : Object.keys(errors)).length > 0\n\n    return $(`\n      <div class=\"nc_sidebar_list_item${hasErrors ? ' has-errors' : ''}\" data-neo-bt=\"container.${this.getId()}\">\n        <div class=\"label\" data-neo-bt=\"text.name\">${settings.getName()}</div>\n        <div class=\"smalltext light code\" data-neo-bt=\"text.handle\">${settings.getHandle()}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-bt=\"button.move\"></a>\n        <button class=\"settings icon menubtn\" title=\"${Craft.t('neo', 'Actions')}\" role=\"button\" type=\"button\" data-neo-bt=\"button.actions\"></button>\n        <div class=\"menu\" data-neo-bt=\"container.menu\">\n          <ul class=\"padded\">\n            <li><a data-icon=\"field\" data-action=\"copy\">${Craft.t('neo', 'Copy')}</a></li>\n            <li class=\"disabled\"><a data-icon=\"brush\" data-action=\"paste\">${Craft.t('neo', 'Paste')}</a></li>\n            <li><a data-icon=\"share\" data-action=\"clone\">${Craft.t('neo', 'Clone')}</a></li>\n            <li><a class=\"error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('neo', 'Delete')}</a></li>\n          </ul>\n        </div>\n        <input type=\"hidden\" name=\"${sortOrderName}[]\" value=\"blocktype:${this.getId()}\" data-neo-gs=\"input.sortOrder\">\n      </div>`)\n  },\n\n  getId () {\n    return this.getSettings().getId()\n  },\n\n  getFieldLayout () {\n    return this._fieldLayout\n  },\n\n  /**\n   * @deprecated in 3.8.0, use load() instead\n   */\n  loadFieldLayout () {\n    this.load()\n  },\n\n  /**\n   * @inheritDoc\n   */\n  load () {\n    if (this._loaded) {\n      // Already loaded\n      return Promise.resolve()\n    }\n\n    this.trigger('beforeLoad')\n    this.trigger('beforeLoadFieldLayout') // TODO: remove in 4.0.0\n    const settings = this.getSettings()\n    const layout = settings.getFieldLayoutConfig()\n    const layoutId = settings.getFieldLayoutId()\n    const data = {\n      blockTypeId: this.getId(),\n      layout\n    }\n\n    return new Promise((resolve, reject) => {\n      Craft.sendActionRequest('POST', 'neo/configurator/render-block-type', { data })\n        .then(response => {\n          if (response.data.headHtml) {\n            Craft.appendHeadHtml(response.data.headHtml)\n          }\n\n          if (response.data.bodyHtml) {\n            Craft.appendBodyHtml(response.data.bodyHtml)\n          }\n\n          this._fieldLayout = new BlockTypeFieldLayout({\n            namespace: [...this._templateNs, this._id],\n            html: response.data.layoutHtml,\n            id: layoutId,\n            blockTypeId: data.blockTypeId\n          })\n          this._settings.createContainer({\n            html: response.data.settingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, data.blockTypeId),\n            js: response.data.settingsJs.replace(/__NEOBLOCKTYPE_ID__/g, data.blockTypeId)\n          })\n          this._loaded = true\n\n          this.trigger('afterLoad')\n          this.trigger('afterLoadFieldLayout') // TODO: remove in 4.0.0\n          resolve()\n        })\n        .catch(reject)\n    })\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const fieldLayout = this.getFieldLayout()\n    const selected = this.isSelected()\n\n    if (settings?.$container ?? false) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    if (fieldLayout) {\n      fieldLayout.$container.toggleClass('hidden', !selected)\n    } else if (selected) {\n      this.load()\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n      this.$handleText.text(settings.getHandle())\n      this.$container.toggleClass('is-child', !settings.getTopLevel())\n    }\n  },\n\n  '@actionSelect' (e) {\n    const $option = $(e.option)\n\n    if ($option.hasClass('disabled')) {\n      return\n    }\n\n    this._actionsMenu?.hideMenu()\n\n    switch ($option.attr('data-action')) {\n      case 'copy':\n        this.trigger('copy')\n        break\n      case 'paste':\n        this.trigger('paste')\n        break\n      case 'clone':\n        this.trigger('clone')\n        break\n      case 'delete':\n        if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n          this.getSettings().destroy()\n        }\n    }\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\n\nexport default Garnish.Base.extend({\n\n  $container: new $(),\n\n  /**\n   * @deprecated in 3.8.0\n   */\n  getSortOrder (_) {\n    console.warn('Settings.getSortOrder() is deprecated. Use Item.getSortOrder() instead.')\n  },\n\n  /**\n   * @deprecated in 3.8.0\n   */\n  setSortOrder (_) {\n    console.warn('Settings.setSortOrder() is deprecated and no longer used.')\n  },\n\n  getFocusElement () {\n    return new $()\n  },\n\n  destroy () {\n    this.$foot?.remove()\n    this.trigger('destroy')\n  },\n\n  _refreshSetting ($container, showSetting, animate) {\n    animate = !Garnish.prefersReducedMotion() && (typeof animate === 'boolean' ? animate : true)\n\n    if (animate) {\n      if (showSetting) {\n        if ($container.hasClass('hidden')) {\n          $container\n            .removeClass('hidden')\n            .css({\n              opacity: 0,\n              marginBottom: -($container.outerHeight())\n            })\n            .velocity({\n              opacity: 1,\n              marginBottom: 24\n            }, 'fast')\n        }\n      } else if (!$container.hasClass('hidden')) {\n        $container\n          .css({\n            opacity: 1,\n            marginBottom: 24\n          })\n          .velocity({\n            opacity: 0,\n            marginBottom: -($container.outerHeight())\n          }, 'fast', () => {\n            $container.addClass('hidden')\n          })\n      }\n    } else {\n      $container\n        .toggleClass('hidden', !showSetting)\n        .css('margin-bottom', showSetting ? 24 : '')\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Garnish from 'garnish'\nimport NS from '../namespace'\nimport Settings from './Settings'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  fieldLayoutId: null,\n  fieldLayoutConfig: null,\n  name: '',\n  handle: '',\n  description: '',\n  enabled: true,\n  ignorePermissions: true,\n  minBlocks: 0,\n  maxBlocks: 0,\n  minSiblingBlocks: 0,\n  maxSiblingBlocks: 0,\n  minChildBlocks: 0,\n  maxChildBlocks: 0,\n  topLevel: true,\n  childBlocks: null,\n  childBlockTypes: [],\n  html: null,\n  js: null,\n  errors: {}\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n  _childBlockTypes: [],\n  _initialised: false,\n\n  $container: null,\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $descriptionInput: new $(),\n  $minBlocksInput: new $(),\n  $maxBlocksInput: new $(),\n  $minSiblingBlocksInput: new $(),\n  $maxSiblingBlocksInput: new $(),\n  $minChildBlocksInput: new $(),\n  $maxChildBlocksInput: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._childBlockTypes = []\n    this._childBlocks = settings.childBlocks\n    this._id = settings.id\n    this._fieldLayoutId = settings.fieldLayoutId\n    this._fieldLayoutConfig = settings.fieldLayoutConfig\n    this._errors = settings.errors\n    this._settingsChildBlockTypes = settings.childBlockTypes\n    this._originalSettings = settings\n    this._afterCreateContainer = () => {\n      this.setName(settings.name)\n      this.setHandle(settings.handle)\n      this.setDescription(settings.description)\n      this._setIconId(settings.iconId)\n      this.setEnabled(settings.enabled)\n      this.setIgnorePermissions(settings.ignorePermissions)\n      this.setMinBlocks(settings.minBlocks)\n      this.setMaxBlocks(settings.maxBlocks)\n      this.setMinSiblingBlocks(settings.minSiblingBlocks)\n      this.setMaxSiblingBlocks(settings.maxSiblingBlocks)\n      this.setMinChildBlocks(settings.minChildBlocks)\n      this.setMaxChildBlocks(settings.maxChildBlocks)\n      this.setTopLevel(settings.topLevel)\n    }\n\n    if (typeof settings.html !== 'undefined' && settings.html !== null) {\n      this.createContainer({\n        html: settings.html,\n        js: settings.js\n      })\n    }\n  },\n\n  createContainer (containerData) {\n    // Only create it if it doesn't already exist\n    if (this.$container !== null) {\n      return\n    }\n\n    this.$container = $(containerData.html)\n    this._js = containerData.js ?? ''\n\n    const $neo = this.$container.find('[data-neo-bts]')\n    this.$nameInput = $neo.filter('[data-neo-bts=\"input.name\"]')\n    this.$handleInput = $neo.filter('[data-neo-bts=\"input.handle\"]')\n    this.$descriptionInput = $neo.filter('[data-neo-bts=\"input.description\"]')\n    this.$iconIdContainer = $neo.filter('[data-neo-bts=\"container.iconId\"]')\n    this.$enabledInput = $neo.filter('[data-neo-bts=\"input.enabled\"]')\n    this.$enabledContainer = $neo.filter('[data-neo-bts=\"container.enabled\"]')\n    this.$ignorePermissionsInput = $neo.filter('[data-neo-bts=\"input.ignorePermissions\"]')\n    this.$ignorePermissionsContainer = $neo.filter('[data-neo-bts=\"container.ignorePermissions\"]')\n    this.$minBlocksInput = $neo.filter('[data-neo-bts=\"input.minBlocks\"]')\n    this.$maxBlocksInput = $neo.filter('[data-neo-bts=\"input.maxBlocks\"]')\n    this.$minSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.minSiblingBlocks\"]')\n    this.$maxSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.maxSiblingBlocks\"]')\n    this.$minChildBlocksInput = $neo.filter('[data-neo-bts=\"input.minChildBlocks\"]')\n    this.$minChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.minChildBlocks\"]')\n    this.$maxChildBlocksInput = $neo.filter('[data-neo-bts=\"input.maxChildBlocks\"]')\n    this.$maxChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.maxChildBlocks\"]')\n    this.$topLevelInput = $neo.filter('[data-neo-bts=\"input.topLevel\"]')\n    this.$topLevelContainer = $neo.filter('[data-neo-bts=\"container.topLevel\"]')\n    this.$groupChildBlockTypesInput = $neo.filter('[data-neo-bts=\"input.groupChildBlockTypes\"]')\n    this.$groupChildBlockTypesContainer = $neo.filter('[data-neo-bts=\"container.groupChildBlockTypes\"]')\n    this.$childBlocksInput = $neo.filter('[data-neo-bts=\"input.childBlocks\"]')\n    this.$childBlocksContainer = $neo.filter('[data-neo-bts=\"container.childBlocks\"]')\n    this.$deleteButton = $neo.filter('[data-neo-bts=\"button.delete\"]')\n\n    this._afterCreateContainer()\n  },\n\n  initUi () {\n    // Exit if UI already initialised, or there is no UI to initialise yet\n    if (this._initialised || this.$container === null) {\n      return\n    }\n\n    this.$foot = $(this._js)\n    Garnish.$bod.append(this.$foot)\n\n    Craft.initUiElements(this.$container)\n\n    this._childBlocksSelect = this.$childBlocksInput.data('checkboxSelect')\n    this._enabledLightswitch = this.$enabledInput.data('lightswitch')\n    this._ignorePermissionsLightswitch = this.$ignorePermissionsInput.data('lightswitch')\n    this._topLevelLightswitch = this.$topLevelInput.data('lightswitch')\n    this._groupChildBlockTypesLightswitch = this.$groupChildBlockTypesInput.data('lightswitch')\n    this._handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput)\n\n    // Ensure that an existing block type's handle will not be changed if the name is edited first.\n    if (this.getHandle() !== '') {\n      this._handleGenerator.stopListening()\n    }\n\n    for (const blockType of this._settingsChildBlockTypes) {\n      this.addChildBlockType(blockType)\n    }\n\n    this.setChildBlocks(this._childBlocks)\n\n    this.addListener(this.$nameInput, 'keyup change', () => {\n      this.setName(this.$nameInput.val())\n\n      if (this._handleGenerator.listening) {\n        // Wait for the handle to be auto-updated\n        setTimeout(() => this.setHandle(this.$handleInput.val()), 200)\n      }\n    })\n\n    this.addListener(this.$handleInput, 'keyup change textchange', () => this.setHandle(this.$handleInput.val()))\n    this.addListener(this.$descriptionInput, 'keyup change textchange', () => this.setDescription(this.$descriptionInput.val()))\n    this.addListener(this.$iconIdContainer, 'change', () => {\n      setTimeout(\n        () => {\n          const $iconIdInput = this.$iconIdInput\n          const iconId = $iconIdInput.length > 0 ? $iconIdInput.val() : null\n          this._setIconId(iconId)\n        },\n        500\n      )\n    })\n    this.addListener(this._enabledLightswitch, 'change', () => this.setEnabled(this._enabledLightswitch.on))\n    this.addListener(this._ignorePermissionsLightswitch, 'change', () => this.setIgnorePermissions(this._ignorePermissionsLightswitch.on))\n    this.addListener(this.$minBlocksInput, 'keyup change', () => this.setMinBlocks(this.$minBlocksInput.val()))\n    this.addListener(this.$maxBlocksInput, 'keyup change', () => this.setMaxBlocks(this.$maxBlocksInput.val()))\n    this.addListener(this.$minSiblingBlocksInput, 'keyup change', () => this.setMinSiblingBlocks(this.$minSiblingBlocksInput.val()))\n    this.addListener(this.$maxSiblingBlocksInput, 'keyup change', () => this.setMaxSiblingBlocks(this.$maxSiblingBlocksInput.val()))\n    this.addListener(this.$minChildBlocksInput, 'keyup change', () => this.setMinChildBlocks(this.$minChildBlocksInput.val()))\n    this.addListener(this.$maxChildBlocksInput, 'keyup change', () => this.setMaxChildBlocks(this.$maxChildBlocksInput.val()))\n    this.addListener(this.$topLevelInput, 'change', () => this.setTopLevel(this._topLevelLightswitch.on))\n    this.addListener(this.$groupChildBlockTypesInput, 'change', () => this.setTopLevel(this._groupChildBlockTypesLightswitch.on))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n        this.destroy()\n      }\n    })\n\n    this.$childBlocksInput.on('change', 'input', () => this._refreshChildBlockSettings())\n\n    this._initialised = true\n  },\n\n  _generateChildBlocksCheckbox (settings) {\n    NS.enter(this._templateNs)\n    const id = NS.value('childBlock-' + settings.getId(), '-')\n    const name = NS.fieldName('childBlocks')\n    NS.leave()\n\n    return $(`\n      <div data-neo-btsc=\"container.${settings.getId()}\">\n        <input type=\"checkbox\" value=\"${settings.getHandle()}\" id=\"${id}\" class=\"checkbox\" name=\"${name}[]\" data-neo-btsc=\"input.${settings.getId()}\">\n        <label for=\"${id}\" data-neo-btsc=\"text.label\">${settings.getName()}</label>\n      </div>`)\n  },\n\n  get $iconIdInput () {\n    return this.$iconIdContainer.find('input[type=\"hidden\"]')\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getFieldLayoutId () {\n    return this._fieldLayoutId\n  },\n\n  getFieldLayoutConfig () {\n    return Object.assign({}, this._fieldLayoutConfig)\n  },\n\n  isNew () {\n    return /^new/.test(this.getId())\n  },\n\n  getErrors () {\n    return this._errors\n  },\n\n  /**\n   * @deprecated in 3.8.0\n   */\n  setSortOrder (_) {\n    console.warn('BlockTypeSettings.setSortOrder() is deprecated and no longer used.')\n  },\n\n  getName () { return this._name ?? this._originalSettings.name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      if (this.$nameInput.val() !== this._name) {\n        this.$nameInput.val(this._name)\n      }\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getHandle () { return this._handle ?? this._originalSettings.handle },\n  setHandle (handle) {\n    if (handle !== this._handle) {\n      const oldHandle = this._handle\n      this._handle = handle\n\n      if (this.$handleInput.val() !== this._handle) {\n        this.$handleInput.val(this._handle)\n      }\n\n      this.trigger('change', {\n        property: 'handle',\n        oldValue: oldHandle,\n        newValue: this._handle\n      })\n    }\n  },\n\n  getDescription () { return this._description },\n  setDescription (description) {\n    if (description !== this._description) {\n      const oldDescription = this._description\n      this._description = description\n\n      if (this.$descriptionInput.val() !== this._description) {\n        this.$descriptionInput.val(this._description)\n      }\n\n      this.trigger('change', {\n        property: 'description',\n        oldValue: oldDescription,\n        newValue: this._description\n      })\n    }\n  },\n\n  getIconId () { return this._iconId },\n  _setIconId (iconId) {\n    if (iconId !== this._iconId) {\n      const oldIconId = this._iconId\n      this._iconId = iconId\n\n      if (this.$iconIdInput.val() !== this._iconId) {\n        // TODO\n        // This is normally where we would reset the input value, but since the icon ID setting is an asset field, we\n        // would also need to update the element HTML. This would be good to implement in the future, and then this\n        // method could be made public.\n      }\n\n      this.trigger('change', {\n        property: 'iconId',\n        oldValue: oldIconId,\n        newValue: this._iconId\n      })\n    }\n  },\n\n  getEnabled () { return this._enabled },\n  setEnabled (enabled) { this._setLightswitchField('enabled', enabled) },\n\n  getIgnorePermissions () { return this._ignorePermissions },\n  setIgnorePermissions (ignore) { this._setLightswitchField('ignorePermissions', ignore) },\n\n  getMinBlocks () { return this._minBlocks },\n  setMinBlocks (minBlocks) { this._setBlocksConstraint('minBlocks', minBlocks) },\n\n  getMaxBlocks () { return this._maxBlocks },\n  setMaxBlocks (maxBlocks) { this._setBlocksConstraint('maxBlocks', maxBlocks) },\n\n  getMinSiblingBlocks () { return this._minSiblingBlocks },\n  setMinSiblingBlocks (minSiblingBlocks) { this._setBlocksConstraint('minSiblingBlocks', minSiblingBlocks) },\n\n  getMaxSiblingBlocks () { return this._maxSiblingBlocks },\n  setMaxSiblingBlocks (maxSiblingBlocks) { this._setBlocksConstraint('maxSiblingBlocks', maxSiblingBlocks) },\n\n  getMinChildBlocks () { return this._minChildBlocks },\n  getMaxChildBlocks () { return this._maxChildBlocks },\n  setMinChildBlocks (minChildBlocks) { this._setBlocksConstraint('minChildBlocks', minChildBlocks) },\n  setMaxChildBlocks (maxChildBlocks) { this._setBlocksConstraint('maxChildBlocks', maxChildBlocks) },\n  _setBlocksConstraint (mode, value) {\n    const privateProp = `_${mode}`\n    const jqueryProp = `$${mode}Input`\n    const oldValue = this[privateProp]\n    const newValue = Math.max(0, value | 0)\n\n    if (newValue === 0) {\n      this[jqueryProp].val(null)\n    }\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[privateProp] > 0 && parseInt(this[jqueryProp].val()) !== this[privateProp]) {\n        this[jqueryProp].val(this[privateProp])\n      }\n\n      this.trigger('change', {\n        property: mode,\n        oldValue,\n        newValue: this[privateProp]\n      })\n    }\n  },\n\n  getTopLevel () { return this._topLevel ?? this._originalSettings.topLevel },\n  setTopLevel (topLevel) { this._setLightswitchField('topLevel', topLevel) },\n\n  _setLightswitchField (property, value) {\n    const privateProp = `_${property}`\n    const lightswitchProp = `${privateProp}Lightswitch`\n    const oldValue = this[privateProp]\n    const newValue = !!value\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[lightswitchProp] && this[lightswitchProp].on !== this[privateProp]) {\n        this[lightswitchProp].on = this[privateProp]\n        this[lightswitchProp].toggle()\n      }\n\n      this.trigger('change', {\n        property,\n        oldValue,\n        newValue\n      })\n    }\n  },\n\n  getChildBlocks () {\n    const select = this._childBlocksSelect\n    const childBlocks = []\n\n    if (typeof select === 'undefined') {\n      return this._childBlocks === true ? true : Array.from(this._childBlocks ?? [])\n    }\n\n    if (select.$all.prop('checked')) {\n      return true\n    }\n\n    select.$options.each(function (index) {\n      const $option = $(this)\n\n      if ($option.prop('checked')) {\n        childBlocks.push($option.val())\n      }\n    })\n\n    return childBlocks.length > 0 ? childBlocks : false\n  },\n\n  setChildBlocks (childBlocks) {\n    if (typeof childBlocks === 'undefined') {\n      childBlocks = this._childBlocks\n    }\n\n    const select = this._childBlocksSelect\n\n    if (childBlocks === true || childBlocks === '*') {\n      select.$all.prop('checked', true)\n      select.onAllChange()\n    } else if (Array.isArray(childBlocks)) {\n      select.$all.prop('checked', false)\n\n      for (const handle of childBlocks) {\n        select.$options.filter(`[value=\"${handle}\"]`).prop('checked', true)\n      }\n    } else {\n      select.$all.prop('checked', false)\n      select.$options.prop('checked', false)\n    }\n\n    this._refreshChildBlockSettings(false)\n  },\n\n  addChildBlockType (blockType) {\n    if (!this._childBlockTypes.includes(blockType)) {\n      const settings = blockType.getSettings()\n      const $existingCheckbox = this.$childBlocksContainer.find(`[data-neo-btsc=\"input.${settings.getId()}\"]`)\n      const $checkbox = $existingCheckbox.length > 0\n        ? $existingCheckbox\n        : this._generateChildBlocksCheckbox(settings)\n\n      this._childBlockTypes.push(blockType)\n\n      if ($existingCheckbox.length === 0) {\n        this.$childBlocksContainer.append($checkbox)\n        this._refreshChildBlockType(blockType)\n      }\n\n      const select = this._childBlocksSelect\n      const allChecked = select.$all.prop('checked')\n      select.$options = select.$options.add($checkbox.find('input'))\n      if (allChecked) select.onAllChange()\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.on('change' + eventNs, e => this['@onChildBlockTypeChange'](e, blockType, $checkbox))\n      settings.on('destroy' + eventNs, e => this.removeChildBlockType(blockType))\n    }\n  },\n\n  removeChildBlockType (blockType) {\n    const index = this._childBlockTypes.indexOf(blockType)\n    if (index >= 0) {\n      this._childBlockTypes.splice(index, 1)\n\n      const settings = blockType.getSettings()\n      const $checkbox = this.$childBlocksContainer.children().eq(index)\n\n      $checkbox.remove()\n\n      const select = this._childBlocksSelect\n      select.$options = select.$options.remove($checkbox.find('input'))\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.off(eventNs)\n\n      this._refreshChildBlockType(blockType)\n    }\n  },\n\n  getConditions () {\n    NS.enter(this._templateNs)\n    const baseInputName = NS.toFieldName().replaceAll('\\\\', '\\\\\\\\')\n    NS.leave()\n    const baseConditionInputNameWithExtraSlash = `${baseInputName}[conditions]`\n    const baseConditionInputName = baseConditionInputNameWithExtraSlash.replaceAll('\\\\\\\\', '\\\\')\n    const conditionInputNames = this.$container\n      .find(`[name^=\"${baseConditionInputNameWithExtraSlash}\"]`)\n      .get()\n      .map((condition) => condition.name)\n\n    const allFormData = new window.FormData(this.$container.closest('form').get(0))\n    const conditionsData = {}\n\n    conditionInputNames.forEach((conditionInputName) => {\n      let conditionsSubData = conditionsData\n      const conditionsCurrentPath = [baseConditionInputName]\n      const conditionsDataPath = conditionInputName\n        .replace(baseConditionInputName, '')\n        .slice(1, -1)\n        .split('][')\n\n      conditionsDataPath.forEach((pathStep, i) => {\n        conditionsCurrentPath.push(`[${pathStep}]`)\n\n        if (pathStep !== '' && !(pathStep in conditionsSubData)) {\n          if (pathStep === 'values') {\n            conditionsSubData[pathStep] = []\n          } else if (i < conditionsDataPath.length - 1) {\n            conditionsSubData[pathStep] = {}\n          } else {\n            conditionsSubData[pathStep] = allFormData.get(conditionsCurrentPath.join(''))\n          }\n        } else if (pathStep === '') {\n          conditionsSubData.push(...allFormData.getAll(conditionsCurrentPath.join('')))\n        }\n\n        conditionsSubData = conditionsSubData[pathStep]\n      })\n    })\n\n    return conditionsData\n  },\n\n  /**\n   * @since 3.8.0\n   */\n  refreshChildBlockTypes (childBlockTypes) {\n    if (childBlockTypes) {\n      this._childBlockTypes = childBlockTypes\n    }\n\n    this._childBlockTypes.forEach((childBlockType) => this._refreshChildBlockType(childBlockType))\n  },\n\n  _refreshChildBlockType (blockType) {\n    const $sidebarContainer = blockType.getField().$sidebarContainer\n    const $sidebarItem = $sidebarContainer.find(`[data-neo-bt=\"container.${blockType.getId()}\"]`)\n    let $refreshedBlockType = this.$childBlocksContainer.children(`[data-neo-btsc=\"container.${blockType.getId()}\"]`)\n\n    if ($refreshedBlockType.length === 0) {\n      // New block type, create checkbox\n      $refreshedBlockType = this._generateChildBlocksCheckbox(blockType.getSettings())\n    }\n\n    if ($sidebarItem.length > 0) {\n      // Block type reordered\n      const position = $sidebarItem.index('.nc_sidebar_list_item:not(.type-heading)')\n      const $currentChildBlockTypeAtPos = this.$childBlocksContainer.children().eq(position)\n\n      if ($currentChildBlockTypeAtPos.length > 0) {\n        $refreshedBlockType.insertBefore($currentChildBlockTypeAtPos)\n      } else {\n        // Added to the end\n        $refreshedBlockType.appendTo(this.$childBlocksContainer)\n      }\n    } else {\n      // Block type deleted\n      $refreshedBlockType.remove()\n    }\n  },\n\n  _refreshChildBlockSettings (animate) {\n    const showSettings = !!this.getChildBlocks()\n    this._refreshSetting(this.$minChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$maxChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$groupChildBlockTypesContainer, showSettings, animate)\n  },\n\n  '@onChildBlockTypeChange' (e, blockType, $checkbox) {\n    const $neo = $checkbox.find('[data-neo-btsc]')\n    const $input = $neo.filter(`[data-neo-btsc=\"input.${blockType.getSettings().getId()}\"]`)\n    const $labelText = $neo.filter('[data-neo-btsc=\"text.label\"]')\n\n    switch (e.property) {\n      case 'name':\n        $labelText.text(e.newValue)\n        break\n\n      case 'handle':\n        $input.val(e.newValue)\n        break\n    }\n  }\n},\n{\n  _totalNewBlockTypes: 0,\n\n  getNewId () {\n    return `new${this._totalNewBlockTypes++}`\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Item from './Item'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: []\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    this.base(settings)\n\n    settings = Object.assign({}, _defaults, settings)\n\n    const settingsObj = this.getSettings()\n    this._templateNs = NS.parse(settings.namespace)\n    const sidebarItem = this.getField()?.$sidebarContainer.find(`[data-neo-g=\"container.${this.getId()}`)\n\n    if (sidebarItem?.length > 0) {\n      this.$container = sidebarItem\n    } else {\n      this.$container = this._generateGroup(settingsObj)\n    }\n\n    const $neo = this.$container.find('[data-neo-g]')\n    this.$nameText = $neo.filter('[data-neo-g=\"text.name\"]')\n    this.$moveButton = $neo.filter('[data-neo-g=\"button.move\"]')\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n    }\n\n    this.deselect()\n  },\n\n  _generateGroup (settings) {\n    const sortOrderNamespace = [...this._templateNs]\n    sortOrderNamespace.pop()\n    NS.enter(sortOrderNamespace)\n    const sortOrderName = NS.fieldName('sortOrder')\n    NS.leave()\n\n    return $(`\n      <div class=\"nc_sidebar_list_item type-heading\" data-neo-g=\"container.${this.getId()}\">\n        <div class=\"label\" data-neo-g=\"text.name\">${settings.getName() ?? ''}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-g=\"button.move\"></a>\n        <input type=\"hidden\" name=\"${sortOrderName}[]\" value=\"group:${this.getId()}\" data-neo-g=\"input.sortOrder\">\n      </div>`)\n  },\n\n  /**\n   * @inheritDoc\n   */\n  load () {\n    if (this._loaded) {\n      // Already loaded\n      return Promise.resolve()\n    }\n\n    this.trigger('beforeLoad')\n    const data = {\n      groupId: this.getId()\n    }\n\n    return new Promise((resolve, reject) => {\n      Craft.sendActionRequest('POST', 'neo/configurator/render-block-type-group', { data })\n        .then(response => {\n          this.getSettings().createContainer({\n            html: response.data.settingsHtml.replace(/__NEOBLOCKTYPEGROUP_ID__/g, data.groupId),\n            js: response.data.settingsJs.replace(/__NEOBLOCKTYPEGROUP_ID__/g, data.groupId)\n          })\n          this._loaded = true\n\n          this.trigger('afterLoad')\n          resolve()\n        })\n        .catch(reject)\n    })\n  },\n\n  getId () {\n    return this.getSettings().getId()\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const selected = this.isSelected()\n\n    if (settings?.$container ?? false) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    if (selected) {\n      this.load()\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport NS from '../namespace'\nimport Settings from './Settings'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  name: '',\n  alwaysShowDropdown: null,\n  defaultAlwaysShowGroupDropdowns: true\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n\n  $container: null,\n  $sortOrderInput: new $(),\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $maxBlocksInput: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id\n    this._alwaysShowDropdown = settings.alwaysShowDropdown\n    this._defaultAlwaysShowGroupDropdowns = settings.defaultAlwaysShowGroupDropdowns\n    this._originalSettings = settings\n\n    if (typeof settings.html !== 'undefined' && settings.html !== null) {\n      this.createContainer({\n        html: settings.html,\n        js: settings.js\n      })\n    }\n  },\n\n  createContainer (containerData) {\n    // Only create it if it doesn't already exist\n    if (this.$container !== null) {\n      return\n    }\n\n    this.$container = $(containerData.html)\n    this._js = containerData.js ?? ''\n\n    const $neo = this.$container.find('[data-neo-gs]')\n    this.$nameInput = $neo.filter('[data-neo-gs=\"input.name\"]')\n    this.$deleteButton = $neo.filter('[data-neo-gs=\"button.delete\"]')\n    this.$alwaysShowDropdownContainer = $neo.filter('[data-neo-gs=\"container.alwaysShowDropdown\"]')\n\n    this.setName(this._originalSettings.name)\n\n    this.addListener(this.$nameInput, 'keyup change', () => this.setName(this.$nameInput.val()))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this group?'))) {\n        this.destroy()\n      }\n    })\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  /**\n   * @deprecated in 3.8.0\n   */\n  setSortOrder (_) {\n    console.warn('GroupSettings.setSortOrder() is deprecated and no longer used.')\n  },\n\n  getName () { return this._name ?? this._originalSettings.name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      this.$nameInput.val(this._name)\n      this._refreshAlwaysShowDropdown()\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getAlwaysShowDropdown () { return this._alwaysShowDropdown ?? this._originalSettings.alwaysShowDropdown },\n\n  _refreshAlwaysShowDropdown (animate) {\n    this._refreshSetting(this.$alwaysShowDropdownContainer, !!this._name, animate)\n  }\n},\n{\n  _totalNewGroups: 0,\n\n  getNewId () {\n    return `new${this._totalNewGroups++}`\n  }\n})\n","import $ from 'jquery'\nimport '../jquery-extensions'\n\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport { v4 as uuidv4 } from 'uuid'\nimport NS from '../namespace'\n\nimport BlockType from './BlockType'\nimport BlockTypeSettings from './BlockTypeSettings'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\nimport Group from './Group'\nimport GroupSettings from './GroupSettings'\nimport './styles/configurator.scss'\n\nconst _defaults = {\n  namespace: [],\n  blockTypes: [],\n  groups: [],\n  blockTypeSettingsHtml: '',\n  blockTypeSettingsJs: '',\n  fieldLayoutHtml: '',\n  groupSettingsHtml: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n  _items: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    const inputIdPrefix = Craft.formatInputId(settings.namespace)\n    const $field = $(`#${inputIdPrefix}-neo-configurator`)\n    this.$container = $field.children('.field').children('.input')\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._blockTypeSettingsHtml = settings.blockTypeSettingsHtml\n    this._blockTypeSettingsJs = settings.blockTypeSettingsJs\n    this._fieldLayoutHtml = settings.fieldLayoutHtml\n    this._blockTypeGroupSettingsHtml = settings.blockTypeGroupSettingsHtml\n    this._items = []\n\n    const $neo = this.$container.find('[data-neo]')\n    this.$mainContainer = $neo.filter('[data-neo=\"container.main\"]')\n    this.$sidebarContainer = $neo.filter('[data-neo=\"container.sidebar\"]')\n    this.$blockTypesContainer = $neo.filter('[data-neo=\"container.blockTypes\"]')\n    this.$settingsContainer = $neo.filter('[data-neo=\"container.settings\"]')\n    this.$fieldLayoutContainer = $neo.filter('[data-neo=\"container.fieldLayout\"]')\n    this.$blockTypeButton = $neo.filter('[data-neo=\"button.blockType\"]')\n    this.$groupButton = $neo.filter('[data-neo=\"button.group\"]')\n    this.$settingsButton = $neo.filter('[data-neo=\"button.settings\"]')\n    this.$fieldLayoutButton = $neo.filter('[data-neo=\"button.fieldLayout\"]')\n\n    this._itemSort = new Garnish.DragSort(null, {\n      container: this.$blockTypesContainer,\n      handle: '[data-neo-bt=\"button.move\"], [data-neo-g=\"button.move\"]',\n      axis: 'y',\n      onSortChange: () => this._updateItemOrder()\n    })\n\n    // Add the existing block types and groups\n    const existingItems = []\n    const btNamespace = [...this._templateNs, 'items', 'blockTypes']\n    const gNamespace = [...this._templateNs, 'items', 'groups']\n\n    for (const btInfo of settings.blockTypes) {\n      const btSettings = new BlockTypeSettings({\n        namespace: [...btNamespace, btInfo.id],\n        sortOrder: btInfo.sortOrder,\n        id: btInfo.id,\n        name: btInfo.name,\n        handle: btInfo.handle,\n        description: btInfo.description,\n        iconId: btInfo.iconId,\n        enabled: btInfo.enabled,\n        ignorePermissions: btInfo.ignorePermissions,\n        minBlocks: btInfo.minBlocks,\n        maxBlocks: btInfo.maxBlocks,\n        minSiblingBlocks: btInfo.minSiblingBlocks,\n        maxSiblingBlocks: btInfo.maxSiblingBlocks,\n        minChildBlocks: btInfo.minChildBlocks,\n        maxChildBlocks: btInfo.maxChildBlocks,\n        topLevel: btInfo.topLevel,\n        html: btInfo.settingsHtml,\n        js: btInfo.settingsJs,\n        errors: btInfo.errors,\n        fieldLayoutId: btInfo.fieldLayoutId,\n        fieldLayoutConfig: btInfo.fieldLayoutConfig,\n        childBlocks: btInfo.childBlocks,\n        childBlockTypes: existingItems.filter(item => item instanceof BlockType)\n      })\n\n      const blockType = new BlockType({\n        namespace: btNamespace,\n        field: this,\n        settings: btSettings\n      })\n\n      blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n      blockType.on('paste.configurator', () => this._pasteBlockType())\n      blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType))\n      blockType.on('beforeLoad.configurator', () => {\n        this.$fieldLayoutContainer.append(\n          $('<span class=\"spinner\"/></span>')\n        )\n        this.$settingsContainer.append(\n          $('<span class=\"spinner\"/></span>')\n        )\n      })\n      blockType.on('afterLoad.configurator', () => {\n        this.$fieldLayoutContainer.children('.spinner').remove()\n        this.$settingsContainer.children('.spinner').remove()\n        this.addItem(blockType)\n        const blockTypeSettings = blockType.getSettings()\n        blockTypeSettings?.refreshChildBlockTypes(this.getBlockTypes())\n        blockTypeSettings?.setChildBlocks()\n      })\n      existingItems.push(blockType)\n    }\n\n    for (const gInfo of settings.groups) {\n      const gSettings = new GroupSettings({\n        namespace: [...gNamespace, gInfo.id],\n        sortOrder: gInfo.sortOrder,\n        id: gInfo.id,\n        name: gInfo.name,\n        alwaysShowDropdown: gInfo.alwaysShowDropdown,\n        defaultAlwaysShowGroupDropdowns: settings.defaultAlwaysShowGroupDropdowns\n      })\n\n      const group = new Group({\n        namespace: gNamespace,\n        field: this,\n        settings: gSettings\n      })\n\n      group.on('beforeLoad.configurator', () => this.$settingsContainer.append(\n        $('<span class=\"spinner\"/></span>')\n      ))\n      group.on('afterLoad.configurator', () => {\n        this.$settingsContainer.children('.spinner').remove()\n        this.addItem(group)\n      })\n      existingItems.push(group)\n    }\n\n    for (const item of existingItems.sort((a, b) => a.getSortOrder() - b.getSortOrder())) {\n      this.addItem(item)\n    }\n\n    for (const blockType of this.getBlockTypes()) {\n      const btSettings = blockType.getSettings()\n\n      if (btSettings?.$container) {\n        const info = settings.blockTypes.find(i => i.handle === btSettings.getHandle())\n        btSettings.setChildBlocks(info.childBlocks)\n      }\n    }\n\n    // Make sure menu states (for pasting block types) are updated when changing tabs\n    const refreshPasteOptions = () => {\n      const noPasteData = !window.localStorage.getItem('neo:copyBlockType')\n\n      for (const blockType of this.getBlockTypes()) {\n        blockType.$actionsMenu.find('[data-action=\"paste\"]').parent().toggleClass('disabled', noPasteData)\n      }\n    }\n\n    refreshPasteOptions()\n    this.addListener(document, 'visibilitychange.configurator', refreshPasteOptions)\n\n    this.selectTab('settings')\n\n    this.addListener(this.$blockTypeButton, 'click', '@newBlockType')\n    this.addListener(this.$groupButton, 'click', '@newGroup')\n    this.addListener(this.$settingsButton, 'click', () => this.selectTab('settings'))\n    this.addListener(this.$fieldLayoutButton, 'click', () => this.selectTab('fieldLayout'))\n  },\n\n  addItem (item, index = -1) {\n    const settings = item.getSettings()\n\n    if (!document.contains(item.$container[0])) {\n      this._insertAt(item.$container, index)\n    }\n\n    if (this._itemSort.$items.filter(item.$container).length === 0) {\n      this._itemSort.addItems(item.$container)\n    }\n\n    if (settings?.$container) {\n      this.$settingsContainer.append(settings.$container)\n\n      if (item instanceof BlockType) {\n        settings.initUi()\n      }\n    }\n\n    this.$mainContainer.removeClass('hidden')\n\n    this.addListener(item.$container, 'click', '@selectItem')\n    item.on('destroy.configurator', () => this.removeItem(item, false))\n\n    if (item instanceof BlockType) {\n      this._addFieldLayout(item.getFieldLayout())\n    }\n\n    this._items.push(item)\n\n    // Only bother updating the item order if the item wasn't just being appended\n    if (index >= 0 && index < this._items.length - 1) {\n      this._updateItemOrder()\n    }\n\n    if (item instanceof BlockType) {\n      for (const blockType of this.getBlockTypes()) {\n        const btSettings = blockType.getSettings()\n        if (btSettings?.$container) {\n          btSettings.addChildBlockType(item)\n        }\n      }\n    }\n\n    this.trigger('addItem', {\n      item,\n      index\n    })\n  },\n\n  _addFieldLayout (fieldLayout) {\n    if (fieldLayout) {\n      this.$fieldLayoutContainer.append(fieldLayout.$container)\n    }\n  },\n\n  removeItem (item, showConfirm) {\n    showConfirm = (typeof showConfirm === 'boolean' ? showConfirm : false)\n\n    if (showConfirm) {\n      const message = Craft.t('neo', 'Are you sure you want to delete this {type}?', {\n        type:\n        item instanceof BlockType\n          ? 'block type'\n          : item instanceof Group\n            ? 'group'\n            : 'item'\n      })\n\n      if (window.confirm(message)) {\n        this.removeItem(item, false)\n      }\n    } else {\n      const settings = item.getSettings()\n\n      this._itemSort.removeItems(item.$container)\n\n      item.$container.remove()\n\n      if (settings?.$container) {\n        settings.$container.remove()\n      }\n\n      if (item instanceof BlockType) {\n        const fieldLayout = item.getFieldLayout()\n        if (fieldLayout) fieldLayout.$container.remove()\n      }\n\n      this.removeListener(item.$container, 'click')\n      item.off('.configurator')\n\n      this._items = this._items.filter((oldItem) => oldItem !== item)\n\n      if (this._items.length === 0) {\n        this.$mainContainer.addClass('hidden')\n      }\n\n      this.trigger('removeItem', {\n        item\n      })\n    }\n  },\n\n  getItems () {\n    return Array.from(this._items)\n  },\n\n  getItemByElement ($element) {\n    return this._items.find(item => item.$container.is($element))\n  },\n\n  getSelectedItem () {\n    return this._items.find(item => item.isSelected())\n  },\n\n  selectItem (item, focusInput) {\n    focusInput = (typeof focusInput === 'boolean' ? focusInput : true)\n\n    const settings = item ? item.getSettings() : null\n\n    for (const i of this._items) {\n      const thisIsTheItem = i === item\n      i.toggleSelect(thisIsTheItem)\n\n      if (thisIsTheItem) {\n        const itemIsGroup = !(i instanceof BlockType)\n        this.$fieldLayoutButton.toggleClass('hidden', itemIsGroup)\n\n        if (itemIsGroup) {\n          this.selectTab('settings')\n        }\n      }\n    }\n\n    Craft.ElementThumbLoader.retryAll()\n\n    if (focusInput && settings && !Garnish.isMobileBrowser()) {\n      setTimeout(() => settings.getFocusInput().focus(), 100)\n    }\n  },\n\n  getBlockTypes () {\n    return this._items.filter(item => item instanceof BlockType)\n  },\n\n  getGroups () {\n    return this._items.filter(item => item instanceof Group)\n  },\n\n  selectTab (tab) {\n    this.$settingsContainer.toggleClass('hidden', tab !== 'settings')\n    this.$fieldLayoutContainer.toggleClass('hidden', tab !== 'fieldLayout')\n\n    this.$settingsButton.toggleClass('is-selected', tab === 'settings')\n    this.$fieldLayoutButton.toggleClass('is-selected', tab === 'fieldLayout')\n  },\n\n  _getNewBlockTypeSettingsHtml (blockTypeId) {\n    return this._blockTypeSettingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewBlockTypeSettingsJs (blockTypeId) {\n    return this._blockTypeSettingsJs.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewFieldLayoutHtml () {\n    return this._fieldLayoutHtml.replace(\n      /&quot;uid&quot;:&quot;([a-f0-9-]+)&quot;/,\n      `&quot;uid&quot;:&quot;${uuidv4()}&quot;`\n    )\n  },\n\n  _getNewBlockTypeGroupSettingsHtml (groupId) {\n    return this._blockTypeGroupSettingsHtml.replace(/__NEOBLOCKTYPEGROUP_ID__/g, groupId)\n  },\n\n  _updateItemOrder () {\n    const items = []\n\n    this._itemSort.$items.each((index, element) => {\n      const item = this.getItemByElement(element)\n\n      if (item) {\n        items.push(item)\n\n        if (item instanceof BlockType) {\n          item.getSettings().refreshChildBlockTypes()\n        }\n      }\n    })\n\n    this._items = items\n  },\n\n  _createBlockTypeFrom (oldBlockType) {\n    const namespace = [...this._templateNs, 'items', 'blockTypes']\n    let id\n    do {\n      id = BlockTypeSettings.getNewId()\n    } while (this.$blockTypesContainer.find(`[data-neo-bt=\"container.${id}\"]`).length > 0)\n\n    const selectedItem = this.getSelectedItem()\n    const selectedIndex = selectedItem ? selectedItem.getSortOrder() : -1\n\n    if (oldBlockType === null) {\n      const settings = new BlockTypeSettings({\n        childBlockTypes: this.getBlockTypes(),\n        id,\n        namespace: [...namespace, id],\n        sortOrder: this._items.length,\n        html: this._getNewBlockTypeSettingsHtml(id),\n        js: this._getNewBlockTypeSettingsJs(id)\n      })\n      const fieldLayout = new BlockTypeFieldLayout({\n        blockTypeId: id,\n        html: this._getNewFieldLayoutHtml(),\n        namespace: [...namespace, id]\n      })\n\n      this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n    } else {\n      const oldSettings = oldBlockType.getSettings()\n      const settingsObj = {\n        childBlocks: oldSettings.getChildBlocks(),\n        conditions: oldSettings.getConditions(),\n        // Set a timestamp on the handle so it doesn't clash with the old one\n        handle: `${oldSettings.getHandle()}_${Date.now()}`,\n        id,\n        minBlocks: oldSettings.getMinBlocks(),\n        maxBlocks: oldSettings.getMaxBlocks(),\n        minChildBlocks: oldSettings.getMinChildBlocks(),\n        maxChildBlocks: oldSettings.getMaxChildBlocks(),\n        minSiblingBlocks: oldSettings.getMinSiblingBlocks(),\n        maxSiblingBlocks: oldSettings.getMaxSiblingBlocks(),\n        name: oldSettings.getName(),\n        description: oldSettings.getDescription(),\n        iconId: oldSettings.getIconId(),\n        enabled: oldSettings.getEnabled(),\n        ignorePermissions: oldSettings.getIgnorePermissions(),\n        sortOrder: this._items.length,\n        topLevel: oldSettings.getTopLevel()\n      }\n      const settings = new BlockTypeSettings({\n        ...settingsObj,\n        childBlockTypes: this.getBlockTypes(),\n        namespace: [...namespace, id]\n      })\n      const $spinner = $('<div class=\"nc_sidebar_list_item type-spinner\"><span class=\"spinner\"></span></div>')\n      this._insertAt($spinner, selectedIndex)\n\n      oldBlockType.load()\n        .then(() => {\n          const layout = oldBlockType.getFieldLayout().getConfig()\n          const data = {\n            settings: settingsObj,\n            layout: layout.tabs.length > 0 ? layout : null\n          }\n\n          Craft.queue.push(() => new Promise((resolve, reject) => {\n            Craft.sendActionRequest('POST', 'neo/configurator/render-block-type', { data })\n              .then(response => {\n                const fieldLayout = new BlockTypeFieldLayout({\n                  blockTypeId: id,\n                  html: response.data.layoutHtml,\n                  namespace: [...namespace, id]\n                })\n                settings.createContainer({\n                  html: response.data.settingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, id),\n                  js: response.data.settingsJs.replace(/__NEOBLOCKTYPE_ID__/g, id)\n                })\n\n                this.$blockTypesContainer.find('.type-spinner').remove()\n                this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n                resolve()\n              })\n              .catch(reject)\n          }))\n        })\n        .catch(() => Craft.cp.displayError(Craft.t('neo', 'Couldn’t create new block type.')))\n    }\n  },\n\n  _initBlockType (namespace, settings, fieldLayout, index) {\n    const blockType = new BlockType({\n      namespace,\n      field: this,\n      settings,\n      fieldLayout\n    })\n\n    this.addItem(blockType, index)\n    this.selectItem(blockType)\n    this.selectTab('settings')\n\n    blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n    blockType.on('paste.configurator', () => this._pasteBlockType())\n    blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType))\n  },\n\n  _copyBlockType (blockType) {\n    blockType.load()\n      .then(() => {\n        const settings = blockType.getSettings()\n        const data = {\n          childBlocks: settings.getChildBlocks(),\n          conditions: settings.getConditions(),\n          description: settings.getDescription(),\n          enabled: settings.getEnabled(),\n          iconId: settings.getIconId(),\n          ignorePermissions: settings.getIgnorePermissions(),\n          handle: settings.getHandle(),\n          layout: blockType.getFieldLayout().getConfig(),\n          minBlocks: settings.getMinBlocks(),\n          maxBlocks: settings.getMaxBlocks(),\n          minChildBlocks: settings.getMinChildBlocks(),\n          maxChildBlocks: settings.getMaxChildBlocks(),\n          minSiblingBlocks: settings.getMinSiblingBlocks(),\n          maxSiblingBlocks: settings.getMaxSiblingBlocks(),\n          name: settings.getName(),\n          topLevel: settings.getTopLevel()\n        }\n\n        window.localStorage.setItem('neo:copyBlockType', JSON.stringify(data))\n        this.getBlockTypes().forEach(bt => bt.$actionsMenu.find('[data-action=\"paste\"]').parent().removeClass('disabled'))\n      })\n      .catch(() => Craft.cp.displayError(Craft.t('neo', 'Couldn’t copy block type.')))\n  },\n\n  _pasteBlockType () {\n    const encodedData = window.localStorage.getItem('neo:copyBlockType')\n\n    if (!encodedData) {\n      return\n    }\n\n    const data = JSON.parse(encodedData)\n    const blockTypeHandles = this.getBlockTypes().map(bt => bt.getSettings().getHandle())\n    const childBlocks = Array.isArray(data.childBlocks)\n      ? data.childBlocks.filter(cb => blockTypeHandles.includes(cb))\n      : (data.childBlocks ? true : [])\n    const settings = new BlockTypeSettings({\n      childBlocks,\n      childBlockTypes: this.getBlockTypes(),\n      conditions: data.conditions,\n      description: data.description,\n      iconId: data.iconId,\n      enabled: data.enabled,\n      ignorePermissions: data.ignorePermissions,\n      handle: data.handle,\n      minBlocks: data.minBlocks,\n      maxBlocks: data.maxBlocks,\n      minChildBlocks: data.minChildBlocks,\n      maxChildBlocks: data.maxChildBlocks,\n      minSiblingBlocks: data.minSiblingBlocks,\n      maxSiblingBlocks: data.maxSiblingBlocks,\n      name: data.name,\n      topLevel: data.topLevel,\n      html: ''\n    })\n\n    const fieldLayout = new BlockTypeFieldLayout({\n      html: this._getNewFieldLayoutHtml(),\n      layout: data.layout\n    })\n\n    const blockType = new BlockType({\n      field: this,\n      settings,\n      fieldLayout\n    })\n\n    this._createBlockTypeFrom(blockType)\n  },\n\n  _insertAt (element, index) {\n    const $element = $(element)\n\n    if (index >= 0 && index < this._items.length) {\n      $element.insertAt(index, this.$blockTypesContainer)\n    } else {\n      this.$blockTypesContainer.append($element)\n    }\n  },\n\n  '@newBlockType' () {\n    this._createBlockTypeFrom(null)\n  },\n\n  '@newGroup' () {\n    const namespace = [...this._templateNs, 'items', 'groups']\n    let id\n    do {\n      id = GroupSettings.getNewId()\n    } while (this.$blockTypesContainer.find(`[data-neo-g=\"container.${id}\"]`).length > 0)\n\n    const settings = new GroupSettings({\n      namespace: [...namespace, id],\n      html: this._getNewBlockTypeGroupSettingsHtml(id),\n      sortOrder: this._items.length,\n      id\n    })\n\n    const group = new Group({\n      namespace,\n      field: this,\n      settings\n    })\n\n    const selected = this.getSelectedItem()\n    const index = selected ? selected.getSortOrder() : -1\n\n    this.addItem(group, index)\n    this.selectItem(group)\n  },\n\n  '@selectItem' (e) {\n    const item = this.getItemByElement(e.currentTarget)\n\n    this.selectItem(item)\n  }\n})\n","import Configurator from './configurator/Configurator'\n\nconst context = window ?? this\nconst configurators = []\n\ncontext.Neo = {\n  Configurator,\n  configurators,\n\n  createConfigurator (settings = {}) {\n    const configurator = new Configurator(settings)\n    configurators.push(configurator)\n\n    return configurator\n  }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","jQuery","$","insertAt","index","$parent","this","each","prepend","children","eq","after","Garnish","Craft","randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","Error","byteToHex","i","push","toString","slice","unsafeStringify","arr","offset","options","buf","rnds","random","_stack","enter","segments","join","arguments","length","undefined","fromFieldName","joined","getNamespace","enterByFieldName","fieldName","leave","pop","Array","from","parse","value","indexOf","split","separator","prefix","toFieldName","replace","match","_defaults","settings","extend","$container","_field","_selected","init","assign","field","_settings","load","Promise","resolve","getField","getSettings","getSortOrder","select","toggleSelect","deselect","trigger","selected","isSelected","namespace","html","layout","id","blockId","blockName","_templateNs","NS","_id","_blockTypeId","blockTypeId","find","removeAttr","nameInput","name","concat","JSON","stringify","_fld","customizableTabs","customizableUi","updateChildBlocksUiElement","selector","$uiLibraryElement","$uiLibraryElements","filter","$tabUiElement","$tabContainer","toggleClass","hasClass","removeClass","_tabObserver","window","MutationObserver","observe","childList","subtree","getId","getBlockTypeId","getConfig","newConfig","tabs","tab","config","newElements","element","elements","newElement","fieldLayout","Item","_loaded","_this$getField","base","settingsObj","_fieldLayout","sidebarItem","$sidebarContainer","_generateBlockType","$neo","$nameText","$handleText","$moveButton","$actionsButton","menubtn","_actionsMenu","data","on","e","$actionsMenu","menu","addListener","stopPropagation","_updateTemplate","sortOrderNamespace","sortOrderName","errors","getErrors","hasErrors","isArray","keys","getName","getHandle","getFieldLayout","loadFieldLayout","getFieldLayoutConfig","layoutId","getFieldLayoutId","reject","then","response","headHtml","bodyHtml","BlockTypeFieldLayout","layoutHtml","createContainer","settingsHtml","js","settingsJs","catch","_settings$$container","text","getTopLevel","_this$_actionsMenu","$option","option","hideMenu","attr","confirm","destroy","_","console","warn","setSortOrder","getFocusElement","_this$$foot","$foot","remove","_refreshSetting","showSetting","animate","css","opacity","marginBottom","outerHeight","velocity","addClass","sortOrder","fieldLayoutId","fieldLayoutConfig","handle","description","enabled","ignorePermissions","minBlocks","maxBlocks","minSiblingBlocks","maxSiblingBlocks","minChildBlocks","maxChildBlocks","topLevel","childBlocks","childBlockTypes","Settings","_childBlockTypes","_initialised","$nameInput","$handleInput","$descriptionInput","$minBlocksInput","$maxBlocksInput","$minSiblingBlocksInput","$maxSiblingBlocksInput","$minChildBlocksInput","$maxChildBlocksInput","_childBlocks","_fieldLayoutId","_fieldLayoutConfig","_errors","_settingsChildBlockTypes","_originalSettings","_afterCreateContainer","setName","setHandle","setDescription","_setIconId","iconId","setEnabled","setIgnorePermissions","setMinBlocks","setMaxBlocks","setMinSiblingBlocks","setMaxSiblingBlocks","setMinChildBlocks","setMaxChildBlocks","setTopLevel","containerData","_containerData$js","_js","$iconIdContainer","$enabledInput","$enabledContainer","$ignorePermissionsInput","$ignorePermissionsContainer","$minChildBlocksContainer","$maxChildBlocksContainer","$topLevelInput","$topLevelContainer","$groupChildBlockTypesInput","$groupChildBlockTypesContainer","$childBlocksInput","$childBlocksContainer","$deleteButton","initUi","append","_childBlocksSelect","_enabledLightswitch","_ignorePermissionsLightswitch","_topLevelLightswitch","_groupChildBlockTypesLightswitch","_handleGenerator","stopListening","blockType","addChildBlockType","setChildBlocks","val","listening","setTimeout","$iconIdInput","_refreshChildBlockSettings","_generateChildBlocksCheckbox","getFocusInput","isNew","test","_this$_name","_name","oldName","property","oldValue","newValue","_this$_handle","_handle","oldHandle","getDescription","_description","oldDescription","getIconId","_iconId","oldIconId","getEnabled","_enabled","_setLightswitchField","getIgnorePermissions","_ignorePermissions","ignore","getMinBlocks","_minBlocks","_setBlocksConstraint","getMaxBlocks","_maxBlocks","getMinSiblingBlocks","_minSiblingBlocks","getMaxSiblingBlocks","_maxSiblingBlocks","getMinChildBlocks","_minChildBlocks","getMaxChildBlocks","_maxChildBlocks","mode","privateProp","jqueryProp","Math","max","parseInt","_this$_topLevel","_topLevel","lightswitchProp","toggle","getChildBlocks","_this$_childBlocks","$all","$options","onAllChange","includes","$existingCheckbox","$checkbox","_refreshChildBlockType","allChecked","add","eventNs","removeChildBlockType","splice","off","getConditions","baseInputName","replaceAll","baseConditionInputNameWithExtraSlash","baseConditionInputName","conditionInputNames","map","condition","allFormData","FormData","closest","conditionsData","forEach","conditionInputName","conditionsSubData","conditionsCurrentPath","conditionsDataPath","pathStep","getAll","refreshChildBlockTypes","childBlockType","$sidebarItem","$refreshedBlockType","position","$currentChildBlockTypeAtPos","insertBefore","appendTo","showSettings","$input","$labelText","_totalNewBlockTypes","getNewId","_generateGroup","_settings$getName","groupId","alwaysShowDropdown","defaultAlwaysShowGroupDropdowns","$sortOrderInput","_alwaysShowDropdown","_defaultAlwaysShowGroupDropdowns","$alwaysShowDropdownContainer","_refreshAlwaysShowDropdown","getAlwaysShowDropdown","_this$_alwaysShowDrop","_totalNewGroups","blockTypes","groups","blockTypeSettingsHtml","blockTypeSettingsJs","fieldLayoutHtml","groupSettingsHtml","_items","inputIdPrefix","$field","_blockTypeSettingsHtml","_blockTypeSettingsJs","_fieldLayoutHtml","_blockTypeGroupSettingsHtml","blockTypeGroupSettingsHtml","$mainContainer","$blockTypesContainer","$settingsContainer","$fieldLayoutContainer","$blockTypeButton","$groupButton","$settingsButton","$fieldLayoutButton","_itemSort","container","axis","onSortChange","_updateItemOrder","existingItems","btNamespace","gNamespace","btInfo","btSettings","BlockTypeSettings","item","BlockType","_copyBlockType","_pasteBlockType","_createBlockTypeFrom","addItem","blockTypeSettings","getBlockTypes","gInfo","gSettings","GroupSettings","group","Group","sort","b","info","refreshPasteOptions","noPasteData","localStorage","getItem","parent","document","selectTab","contains","_insertAt","$items","addItems","removeItem","_addFieldLayout","showConfirm","message","type","removeItems","removeListener","oldItem","getItems","getItemByElement","$element","is","getSelectedItem","selectItem","focusInput","thisIsTheItem","itemIsGroup","retryAll","focus","getGroups","_getNewBlockTypeSettingsHtml","_getNewBlockTypeSettingsJs","_getNewFieldLayoutHtml","uuidv4","_getNewBlockTypeGroupSettingsHtml","items","oldBlockType","selectedItem","selectedIndex","_initBlockType","oldSettings","conditions","Date","now","_objectSpread","$spinner","displayError","setItem","bt","encodedData","blockTypeHandles","cb","currentTarget","context","_window","configurators","Neo","Configurator","createConfigurator","configurator"],"sourceRoot":""}