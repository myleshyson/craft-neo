{"version":3,"file":"neo-configurator.js","mappings":"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","sources":["webpack://craft-neo/webpack/bootstrap","webpack://craft-neo/webpack/runtime/compat get default export","webpack://craft-neo/webpack/runtime/define property getters","webpack://craft-neo/webpack/runtime/hasOwnProperty shorthand","webpack://craft-neo/external var \"jQuery\"","webpack://craft-neo/./src/assets/src/jquery-extensions.js","webpack://craft-neo/external var \"Garnish\"","webpack://craft-neo/external var \"Craft\"","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/native.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/rng.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/v4.js","webpack://craft-neo/./src/assets/src/namespace.js","webpack://craft-neo/./src/assets/src/configurator/Item.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeFieldLayout.js","webpack://craft-neo/./src/assets/src/configurator/BlockType.js","webpack://craft-neo/./src/assets/src/configurator/Settings.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeIconSelect.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeSettings.js","webpack://craft-neo/./src/assets/src/configurator/Group.js","webpack://craft-neo/./src/assets/src/configurator/GroupSettings.js","webpack://craft-neo/./src/assets/src/configurator/Configurator.js","webpack://craft-neo/./src/assets/src/configurator.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = jQuery;","import $ from 'jquery'\n\n// @see http://stackoverflow.com/a/12903503/556609\n$.fn.insertAt = function (index, $parent) {\n  return this.each(function () {\n    if (index === 0) {\n      $parent.prepend(this)\n    } else {\n      $parent.children().eq(index - 1).after(this)\n    }\n  })\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = Garnish;","const __WEBPACK_NAMESPACE_OBJECT__ = Craft;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","export default {\n\n  _stack: [[]],\n\n  enter (segments, join = true) {\n    if (typeof segments === 'string') {\n      segments = this.fromFieldName(segments)\n    }\n\n    if (join) {\n      const joined = this.getNamespace()\n      joined.push(...segments)\n\n      segments = joined\n    }\n\n    this._stack.push(segments)\n  },\n\n  enterByFieldName (fieldName, join = true) {\n    this.enter(this.fromFieldName(fieldName), join)\n  },\n\n  leave () {\n    return this._stack.length > 1\n      ? this._stack.pop()\n      : this.getNamespace()\n  },\n\n  getNamespace () {\n    return Array.from(this._stack[this._stack.length - 1])\n  },\n\n  parse (value) {\n    if (typeof value === 'string') {\n      if (value.indexOf('[') > -1) {\n        return this.fromFieldName(value)\n      }\n\n      if (value.indexOf('-') > -1) {\n        return value.split('-')\n      }\n\n      if (value.indexOf('.') > -1) {\n        return value.split('.')\n      }\n\n      return value\n    }\n\n    return Array.from(value)\n  },\n\n  value (value, separator = '-') {\n    const segments = this.getNamespace()\n    segments.push(value)\n\n    return segments.join(separator)\n  },\n\n  fieldName (fieldName = '') {\n    const prefix = this.toFieldName()\n\n    if (prefix) {\n      return prefix + fieldName.replace(/([^'\"[\\]]+)([^'\"]*)/, '[$1]$2')\n    }\n\n    return fieldName\n  },\n\n  toString (separator = '-') {\n    return this.getNamespace().join(separator)\n  },\n\n  toFieldName () {\n    const segments = this.getNamespace()\n\n    switch (segments.length) {\n      case 0: return ''\n      case 1: return segments[0]\n    }\n\n    return segments[0] + '[' + segments.slice(1).join('][') + ']'\n  },\n\n  fromFieldName (fieldName) {\n    return fieldName.match(/[^[\\]\\s]+/g) || []\n  }\n}\n","import Garnish from 'garnish'\n\nconst _defaults = {\n  settings: null\n}\n\nexport default Garnish.Base.extend({\n\n  $container: null,\n  _field: null,\n  _selected: false,\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n    this._field = settings.field\n    this._settings = settings.settings\n  },\n\n  /**\n   * @since 3.8.0\n   * @returns Promise\n   */\n  load () {\n    return Promise.resolve()\n  },\n\n  /**\n   * @since 3.8.0\n   * @returns the Neo field this item belongs to\n   */\n  getField () {\n    return this._field\n  },\n\n  getSettings () {\n    return this._settings\n  },\n\n  /**\n   * @since 3.8.0\n   */\n  getSortOrder () {\n    return this.$container.index() + 1\n  },\n\n  select () {\n    this.toggleSelect(true)\n  },\n\n  deselect () {\n    this.toggleSelect(false)\n  },\n\n  toggleSelect: function (select) {\n    this._selected = (typeof select === 'boolean' ? select : !this._selected)\n\n    this.trigger('toggleSelect', {\n      selected: this._selected\n    })\n  },\n\n  isSelected () {\n    return this._selected\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: [],\n  html: '',\n  layout: null,\n  id: -1,\n  uid: null,\n  blockId: null,\n  blockName: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id | 0\n    this._uid = settings.uid\n    this._blockTypeId = settings.blockTypeId\n\n    this.$container = $(settings.html).find('.layoutdesigner')\n    this.$container.removeAttr('id')\n\n    const nameInput = this.$container.find('input[name=\"fieldLayout\"]')\n\n    if (nameInput.length > 0) {\n      nameInput[0].name = `neoBlockType${this._blockTypeId}[fieldLayout]`\n\n      if (settings.layout) {\n        nameInput[0].value = JSON.stringify(settings.layout)\n      }\n    }\n\n    NS.enter(this._templateNs)\n\n    this._fld = new Craft.FieldLayoutDesigner(this.$container, {\n      customizableTabs: true,\n      customizableUi: true\n    })\n\n    NS.leave()\n\n    const updateChildBlocksUiElement = () => {\n      const selector = '[data-type=benf-neo-fieldlayoutelements-ChildBlocksUiElement]'\n      const $uiLibraryElement = this._fld.$uiLibraryElements.filter(selector)\n      const $tabUiElement = this._fld.$tabContainer.find(selector)\n      $uiLibraryElement.toggleClass(\n        'hidden',\n        $tabUiElement.length > 0 || $('body.dragging .draghelper' + selector).length > 0\n      )\n      if ($tabUiElement.hasClass('velocity-animating')) {\n        $tabUiElement.removeClass('hidden')\n      }\n    }\n\n    updateChildBlocksUiElement()\n    this._tabObserver = new window.MutationObserver(updateChildBlocksUiElement)\n    this._tabObserver.observe(this._fld.$tabContainer[0], { childList: true, subtree: true })\n  },\n\n  getId () {\n    return this._id\n  },\n\n  /**\n   * @since 4.0.5\n   */\n  getUid () {\n    return this._uid\n  },\n\n  getBlockTypeId () {\n    return this._blockTypeId\n  },\n\n  getConfig () {\n    const newConfig = {\n      tabs: [],\n      uid: this._uid\n    }\n\n    for (const tab of this._fld.config.tabs) {\n      const newElements = []\n\n      for (const element of tab.elements) {\n        const newElement = {}\n\n        for (const key in element) {\n          newElement[key] = key === 'required' && !element[key] ? '' : element[key]\n        }\n\n        newElements.push(newElement)\n      }\n\n      newConfig.tabs.push({\n        elements: newElements,\n        name: tab.name.slice()\n      })\n    }\n\n    return newConfig\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Item from './Item'\nimport NS from '../namespace'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\n\nconst _defaults = {\n  namespace: [],\n  fieldLayout: null\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n  _loaded: false,\n\n  init (settings = {}) {\n    this.base(settings)\n\n    const settingsObj = this.getSettings()\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._field = settings.field\n    this._fieldLayout = settings.fieldLayout\n    const sidebarItem = this.getField()?.$sidebarContainer.find(`[data-neo-bt=\"container.${this.getId()}`)\n\n    if (sidebarItem?.length > 0) {\n      this.$container = sidebarItem\n    } else {\n      this.$container = this._generateBlockType(settingsObj)\n    }\n\n    const $neo = this.$container.find('[data-neo-bt]')\n    this.$nameText = $neo.filter('[data-neo-bt=\"text.name\"]')\n    this.$handleText = $neo.filter('[data-neo-bt=\"text.handle\"]')\n    this.$moveButton = $neo.filter('[data-neo-bt=\"button.move\"]')\n    this.$actionsButton = $neo.filter('[data-neo-bt=\"button.actions\"]')\n\n    // Set up the actions menu\n    this.$actionsButton.menubtn()\n    this._actionsMenu = this.$actionsButton.data('menubtn')\n    this._actionsMenu.on('optionSelect', e => this['@actionSelect'](e))\n    this.$actionsMenu = this._actionsMenu.menu.$container\n\n    // Stop the actions button click from selecting the block type and closing the menu\n    this.addListener(this.$actionsButton, 'click', e => e.stopPropagation())\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n\n      this._updateTemplate()\n    }\n\n    this.deselect()\n  },\n\n  _generateBlockType (settings) {\n    const sortOrderNamespace = [...this._templateNs]\n    sortOrderNamespace.pop()\n    NS.enter(sortOrderNamespace)\n    const sortOrderName = NS.fieldName('sortOrder')\n    NS.leave()\n    const errors = settings.getErrors()\n    const hasErrors = (Array.isArray(errors) ? errors : Object.keys(errors)).length > 0\n\n    return $(`\n      <div class=\"nc_sidebar_list_item${hasErrors ? ' has-errors' : ''}\" data-neo-bt=\"container.${this.getId()}\">\n        <div class=\"label\" data-neo-bt=\"text.name\">${settings.getName()}</div>\n        <div class=\"smalltext light code\" data-neo-bt=\"text.handle\">${settings.getHandle()}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-bt=\"button.move\"></a>\n        <button class=\"settings icon menubtn\" title=\"${Craft.t('neo', 'Actions')}\" role=\"button\" type=\"button\" data-neo-bt=\"button.actions\"></button>\n        <div class=\"menu\" data-neo-bt=\"container.menu\">\n          <ul class=\"padded\">\n            <li><a data-icon=\"field\" data-action=\"copy\">${Craft.t('neo', 'Copy')}</a></li>\n            <li class=\"disabled\"><a data-icon=\"brush\" data-action=\"paste\">${Craft.t('neo', 'Paste')}</a></li>\n            <li><a data-icon=\"share\" data-action=\"clone\">${Craft.t('neo', 'Clone')}</a></li>\n            <li><a class=\"error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('neo', 'Delete')}</a></li>\n          </ul>\n        </div>\n        <input type=\"hidden\" name=\"${sortOrderName}[]\" value=\"blocktype:${this.getId()}\" data-neo-gs=\"input.sortOrder\">\n      </div>`)\n  },\n\n  getId () {\n    return this.getSettings().getId()\n  },\n\n  getFieldLayout () {\n    return this._fieldLayout\n  },\n\n  /**\n   * @inheritDoc\n   */\n  load () {\n    if (this._loaded) {\n      // Already loaded\n      return Promise.resolve()\n    }\n\n    this.trigger('beforeLoad')\n    const settings = this.getSettings()\n    // Don't overwrite the field layout if it's already set (e.g. if pasting a block type)\n    const layout = this.getFieldLayout()?.getConfig() ?? settings.getFieldLayoutConfig()\n    const layoutId = settings.getFieldLayoutId()\n    const data = {\n      blockTypeId: this.getId(),\n      errors: settings.getErrors(),\n      layout\n    }\n\n    return new Promise((resolve, reject) => {\n      Craft.sendActionRequest('POST', 'neo/configurator/render-block-type', { data })\n        .then(response => {\n          if (response.data.headHtml) {\n            Craft.appendHeadHtml(response.data.headHtml)\n          }\n\n          if (response.data.bodyHtml) {\n            Craft.appendBodyHtml(response.data.bodyHtml)\n          }\n\n          this._fieldLayout = new BlockTypeFieldLayout({\n            namespace: [...this._templateNs, this._id],\n            html: response.data.layoutHtml,\n            id: layoutId,\n            blockTypeId: data.blockTypeId\n          })\n          this._settings.createContainer({\n            html: response.data.settingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, data.blockTypeId),\n            js: response.data.settingsJs.replace(/__NEOBLOCKTYPE_ID__/g, data.blockTypeId)\n          })\n          this._loaded = true\n\n          this.trigger('afterLoad')\n          resolve()\n        })\n        .catch(reject)\n    })\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const fieldLayout = this.getFieldLayout()\n    const selected = this.isSelected()\n\n    if (settings?.$container ?? false) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    if (fieldLayout) {\n      fieldLayout.$container.toggleClass('hidden', !selected)\n    } else if (selected) {\n      this.load()\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n      this.$handleText.text(settings.getHandle())\n      this.$container.toggleClass('is-child', !settings.getTopLevel())\n    }\n  },\n\n  '@actionSelect' (e) {\n    const $option = $(e.option)\n\n    if ($option.hasClass('disabled')) {\n      return\n    }\n\n    this._actionsMenu?.hideMenu()\n\n    switch ($option.attr('data-action')) {\n      case 'copy':\n        this.trigger('copy')\n        break\n      case 'paste':\n        this.trigger('paste')\n        break\n      case 'clone':\n        this.trigger('clone')\n        break\n      case 'delete':\n        if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n          this.getSettings().destroy()\n        }\n    }\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\n\nexport default Garnish.Base.extend({\n\n  $container: new $(),\n\n  getFocusElement () {\n    return new $()\n  },\n\n  destroy () {\n    this.$foot?.remove()\n    this.trigger('destroy')\n  },\n\n  _refreshSetting ($container, showSetting, animate) {\n    animate = !Garnish.prefersReducedMotion() && (typeof animate === 'boolean' ? animate : true)\n\n    if (animate) {\n      if (showSetting) {\n        if ($container.hasClass('hidden')) {\n          $container\n            .removeClass('hidden')\n            .css({\n              opacity: 0,\n              marginBottom: -($container.outerHeight())\n            })\n            .velocity({\n              opacity: 1,\n              marginBottom: 24\n            }, 'fast')\n        }\n      } else if (!$container.hasClass('hidden')) {\n        $container\n          .css({\n            opacity: 1,\n            marginBottom: 24\n          })\n          .velocity({\n            opacity: 0,\n            marginBottom: -($container.outerHeight())\n          }, 'fast', () => {\n            $container.addClass('hidden')\n          })\n      }\n    } else {\n      $container\n        .toggleClass('hidden', !showSetting)\n        .css('margin-bottom', showSetting ? 24 : '')\n    }\n  }\n})\n","import Craft from 'craft'\n\n/**\n * Class for managing the selected icon for a block type.\n * @since 4.0.0\n */\nexport default class BlockTypeIconSelect {\n  /**\n   * Container for the display of the set icon.\n   * @public\n   */\n  imageContainer = null\n\n  /**\n   * Image for the display of the set icon.\n   * @public\n   */\n  image = null\n\n  /**\n   * Text (filename) for the display of the set icon.\n   * @public\n   */\n  imageText = null\n\n  /**\n   * Icons that can be selected from the menu.\n   * @public\n   */\n  menuItems = []\n\n  /**\n   * The button for setting the icon.\n   * @public\n   */\n  btnSet = null\n\n  /**\n   * The button for unsetting the icon.\n   * @public\n   */\n  btnRemove = null\n\n  /**\n   * The hidden input for the element editor form.\n   * @public\n   */\n  input = null\n\n  /**\n   * The constructor.\n   * @param container - The icon field container.\n   * @public\n   */\n  constructor (container) {\n    this.imageContainer = container.querySelector('[data-icon-select-show]')\n    this.image = this.imageContainer?.querySelector('img') ?? null\n    this.imageText = this.imageContainer?.querySelector('p') ?? null\n    this.menuItems = container.querySelectorAll('[data-icon-select-item]')\n    this.btnSet = container.querySelector('[data-icon-select-set]')\n    this.btnRemove = container.querySelector('[data-icon-select-remove]')\n    this.input = container.querySelector('input[name$=\"[iconFilename]\"]')\n\n    this.btnRemove?.addEventListener('click', (_) => this.remove())\n    this.menuItems.forEach((item) => {\n      const filename = item.querySelector('span')?.textContent\n      const url = item.querySelector('img')?.getAttribute('src')\n      item.addEventListener('click', (_) => this.set({ filename, url }))\n    })\n  }\n\n  /**\n   * Sets the selected icon.\n   * @param item - An object representing the selected icon\n   * @public\n   */\n  set (item) {\n    this.image?.setAttribute('src', item.url)\n    this.input?.setAttribute('value', item.filename)\n    this.btnRemove?.classList.remove('hidden')\n\n    if (this.imageText !== null) {\n      this.imageText.textContent = item.filename\n    }\n\n    if (this.btnSet !== null) {\n      this.btnSet.textContent = Craft.t('neo', 'Replace')\n    }\n  }\n\n  /**\n   * Unsets the icon.\n   * @public\n   */\n  remove () {\n    this.image?.setAttribute('src', '')\n    this.input?.setAttribute('value', '')\n    this.btnRemove?.classList.add('hidden')\n\n    if (this.imageText !== null) {\n      this.imageText.textContent = Craft.t('neo', 'None set')\n    }\n\n    if (this.btnSet !== null) {\n      this.btnSet.textContent = Craft.t('neo', 'Add')\n    }\n  }\n}\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Garnish from 'garnish'\nimport NS from '../namespace'\nimport Settings from './Settings'\nimport BlockTypeIconSelect from './BlockTypeIconSelect'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  fieldLayoutId: null,\n  fieldLayoutConfig: null,\n  name: '',\n  handle: '',\n  description: '',\n  enabled: true,\n  ignorePermissions: true,\n  minBlocks: 0,\n  maxBlocks: 0,\n  minSiblingBlocks: 0,\n  maxSiblingBlocks: 0,\n  minChildBlocks: 0,\n  maxChildBlocks: 0,\n  topLevel: true,\n  childBlocks: null,\n  childBlockTypes: [],\n  html: null,\n  js: null,\n  errors: {}\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n  _childBlockTypes: [],\n  _initialised: false,\n\n  $container: null,\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $descriptionInput: new $(),\n  $minBlocksInput: new $(),\n  $maxBlocksInput: new $(),\n  $minSiblingBlocksInput: new $(),\n  $maxSiblingBlocksInput: new $(),\n  $minChildBlocksInput: new $(),\n  $maxChildBlocksInput: new $(),\n  $iconContainer: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._childBlockTypes = []\n    this._childBlocks = settings.childBlocks\n    this._id = settings.id\n    this._fieldLayoutId = settings.fieldLayoutId\n    this._fieldLayoutConfig = settings.fieldLayoutConfig\n    this._errors = settings.errors\n    this._settingsChildBlockTypes = settings.childBlockTypes\n    this._originalSettings = settings\n    this._iconSelector = null\n    this._afterCreateContainer = () => {\n      this.setName(settings.name)\n      this.setHandle(settings.handle)\n      this.setDescription(settings.description)\n      this._setIconId(settings.iconId)\n      this.setEnabled(settings.enabled)\n      this.setIgnorePermissions(settings.ignorePermissions)\n      this.setMinBlocks(settings.minBlocks)\n      this.setMaxBlocks(settings.maxBlocks)\n      this.setMinSiblingBlocks(settings.minSiblingBlocks)\n      this.setMaxSiblingBlocks(settings.maxSiblingBlocks)\n      this.setMinChildBlocks(settings.minChildBlocks)\n      this.setMaxChildBlocks(settings.maxChildBlocks)\n      this.setTopLevel(settings.topLevel)\n\n      if (this.$iconContainer.length > 0) {\n        this._iconSelector = new BlockTypeIconSelect(this.$iconContainer[0])\n      }\n    }\n\n    if (typeof settings.html !== 'undefined' && settings.html !== null) {\n      this.createContainer({\n        html: settings.html,\n        js: settings.js\n      })\n    }\n  },\n\n  createContainer (containerData) {\n    // Only create it if it doesn't already exist\n    if (this.$container !== null) {\n      return\n    }\n\n    this.$container = $(containerData.html)\n    this._js = containerData.js ?? ''\n\n    const $neo = this.$container.find('[data-neo-bts]')\n    this.$nameInput = $neo.filter('[data-neo-bts=\"input.name\"]')\n    this.$handleInput = $neo.filter('[data-neo-bts=\"input.handle\"]')\n    this.$descriptionInput = $neo.filter('[data-neo-bts=\"input.description\"]')\n    this.$iconContainer = $neo.filter('[data-neo-bts=\"container.iconFilename\"]')\n    this.$iconIdContainer = $neo.filter('[data-neo-bts=\"container.iconId\"]')\n    this.$enabledInput = $neo.filter('[data-neo-bts=\"input.enabled\"]')\n    this.$enabledContainer = $neo.filter('[data-neo-bts=\"container.enabled\"]')\n    this.$ignorePermissionsInput = $neo.filter('[data-neo-bts=\"input.ignorePermissions\"]')\n    this.$ignorePermissionsContainer = $neo.filter('[data-neo-bts=\"container.ignorePermissions\"]')\n    this.$minBlocksInput = $neo.filter('[data-neo-bts=\"input.minBlocks\"]')\n    this.$maxBlocksInput = $neo.filter('[data-neo-bts=\"input.maxBlocks\"]')\n    this.$minSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.minSiblingBlocks\"]')\n    this.$maxSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.maxSiblingBlocks\"]')\n    this.$minChildBlocksInput = $neo.filter('[data-neo-bts=\"input.minChildBlocks\"]')\n    this.$minChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.minChildBlocks\"]')\n    this.$maxChildBlocksInput = $neo.filter('[data-neo-bts=\"input.maxChildBlocks\"]')\n    this.$maxChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.maxChildBlocks\"]')\n    this.$topLevelInput = $neo.filter('[data-neo-bts=\"input.topLevel\"]')\n    this.$topLevelContainer = $neo.filter('[data-neo-bts=\"container.topLevel\"]')\n    this.$groupChildBlockTypesInput = $neo.filter('[data-neo-bts=\"input.groupChildBlockTypes\"]')\n    this.$groupChildBlockTypesContainer = $neo.filter('[data-neo-bts=\"container.groupChildBlockTypes\"]')\n    this.$childBlocksInput = $neo.filter('[data-neo-bts=\"input.childBlocks\"]')\n    this.$childBlocksContainer = $neo.filter('[data-neo-bts=\"container.childBlocks\"]')\n    this.$deleteButton = $neo.filter('[data-neo-bts=\"button.delete\"]')\n\n    this._afterCreateContainer()\n  },\n\n  initUi () {\n    // Exit if UI already initialised, or there is no UI to initialise yet\n    if (this._initialised || this.$container === null) {\n      return\n    }\n\n    this.$foot = $(this._js)\n    Garnish.$bod.append(this.$foot)\n\n    Craft.initUiElements(this.$container)\n\n    this._childBlocksSelect = this.$childBlocksInput.data('checkboxSelect')\n    this._enabledLightswitch = this.$enabledInput.data('lightswitch')\n    this._ignorePermissionsLightswitch = this.$ignorePermissionsInput.data('lightswitch')\n    this._topLevelLightswitch = this.$topLevelInput.data('lightswitch')\n    this._groupChildBlockTypesLightswitch = this.$groupChildBlockTypesInput.data('lightswitch')\n    this._handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput)\n\n    // Ensure that an existing block type's handle will not be changed if the name is edited first.\n    if (this.getHandle() !== '') {\n      this._handleGenerator.stopListening()\n    }\n\n    for (const blockType of this._settingsChildBlockTypes) {\n      this.addChildBlockType(blockType)\n    }\n\n    this.setChildBlocks(this._childBlocks)\n\n    this.addListener(this.$nameInput, 'keyup change', () => {\n      this.setName(this.$nameInput.val())\n\n      if (this._handleGenerator.listening) {\n        // Wait for the handle to be auto-updated\n        setTimeout(() => this.setHandle(this.$handleInput.val()), 200)\n      }\n    })\n\n    this.addListener(this.$handleInput, 'keyup change textchange', () => this.setHandle(this.$handleInput.val()))\n    this.addListener(this.$descriptionInput, 'keyup change textchange', () => this.setDescription(this.$descriptionInput.val()))\n    this.addListener(this.$iconIdContainer, 'change', () => {\n      setTimeout(\n        () => {\n          const $iconIdInput = this.$iconIdInput\n          const iconId = $iconIdInput.length > 0 ? $iconIdInput.val() : null\n          this._setIconId(iconId)\n        },\n        500\n      )\n    })\n    this.addListener(this._enabledLightswitch, 'change', () => this.setEnabled(this._enabledLightswitch.on))\n    this.addListener(this._ignorePermissionsLightswitch, 'change', () => this.setIgnorePermissions(this._ignorePermissionsLightswitch.on))\n    this.addListener(this.$minBlocksInput, 'keyup change', () => this.setMinBlocks(this.$minBlocksInput.val()))\n    this.addListener(this.$maxBlocksInput, 'keyup change', () => this.setMaxBlocks(this.$maxBlocksInput.val()))\n    this.addListener(this.$minSiblingBlocksInput, 'keyup change', () => this.setMinSiblingBlocks(this.$minSiblingBlocksInput.val()))\n    this.addListener(this.$maxSiblingBlocksInput, 'keyup change', () => this.setMaxSiblingBlocks(this.$maxSiblingBlocksInput.val()))\n    this.addListener(this.$minChildBlocksInput, 'keyup change', () => this.setMinChildBlocks(this.$minChildBlocksInput.val()))\n    this.addListener(this.$maxChildBlocksInput, 'keyup change', () => this.setMaxChildBlocks(this.$maxChildBlocksInput.val()))\n    this.addListener(this.$topLevelInput, 'change', () => this.setTopLevel(this._topLevelLightswitch.on))\n    this.addListener(this.$groupChildBlockTypesInput, 'change', () => this.setTopLevel(this._groupChildBlockTypesLightswitch.on))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n        this.destroy()\n      }\n    })\n\n    this.$childBlocksInput.on('change', 'input', () => this._refreshChildBlockSettings())\n\n    this._initialised = true\n  },\n\n  _generateChildBlocksCheckbox (settings) {\n    NS.enter(this._templateNs)\n    const id = NS.value('childBlock-' + settings.getId(), '-')\n    const name = NS.fieldName('childBlocks')\n    NS.leave()\n\n    return $(`\n      <div data-neo-btsc=\"container.${settings.getId()}\">\n        <input type=\"checkbox\" value=\"${settings.getHandle()}\" id=\"${id}\" class=\"checkbox\" name=\"${name}[]\" data-neo-btsc=\"input.${settings.getId()}\">\n        <label for=\"${id}\" data-neo-btsc=\"text.label\">${settings.getName()}</label>\n      </div>`)\n  },\n\n  get $iconIdInput () {\n    return this.$iconIdContainer.find('input[type=\"hidden\"]')\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getFieldLayoutId () {\n    return this._fieldLayoutId\n  },\n\n  getFieldLayoutConfig () {\n    return Object.assign({}, this._fieldLayoutConfig)\n  },\n\n  isNew () {\n    return /^new/.test(this.getId())\n  },\n\n  getErrors () {\n    return this._errors\n  },\n\n  getName () { return this._name ?? this._originalSettings.name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      if (this.$nameInput.val() !== this._name) {\n        this.$nameInput.val(this._name)\n      }\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getHandle () { return this._handle ?? this._originalSettings.handle },\n  setHandle (handle) {\n    if (handle !== this._handle) {\n      const oldHandle = this._handle\n      this._handle = handle\n\n      if (this.$handleInput.val() !== this._handle) {\n        this.$handleInput.val(this._handle)\n      }\n\n      this.trigger('change', {\n        property: 'handle',\n        oldValue: oldHandle,\n        newValue: this._handle\n      })\n    }\n  },\n\n  getDescription () { return this._description },\n  setDescription (description) {\n    if (description !== this._description) {\n      const oldDescription = this._description\n      this._description = description\n\n      if (this.$descriptionInput.val() !== this._description) {\n        this.$descriptionInput.val(this._description)\n      }\n\n      this.trigger('change', {\n        property: 'description',\n        oldValue: oldDescription,\n        newValue: this._description\n      })\n    }\n  },\n\n  getIconId () { return this._iconId },\n  _setIconId (iconId) {\n    if (iconId !== this._iconId) {\n      const oldIconId = this._iconId\n      this._iconId = iconId\n\n      if (this.$iconIdInput.val() !== this._iconId) {\n        // TODO\n        // This is normally where we would reset the input value, but since the icon ID setting is an asset field, we\n        // would also need to update the element HTML. This would be good to implement in the future, and then this\n        // method could be made public.\n      }\n\n      this.trigger('change', {\n        property: 'iconId',\n        oldValue: oldIconId,\n        newValue: this._iconId\n      })\n    }\n  },\n\n  getEnabled () { return this._enabled },\n  setEnabled (enabled) { this._setLightswitchField('enabled', enabled) },\n\n  getIgnorePermissions () { return this._ignorePermissions },\n  setIgnorePermissions (ignore) { this._setLightswitchField('ignorePermissions', ignore) },\n\n  getMinBlocks () { return this._minBlocks },\n  setMinBlocks (minBlocks) { this._setBlocksConstraint('minBlocks', minBlocks) },\n\n  getMaxBlocks () { return this._maxBlocks },\n  setMaxBlocks (maxBlocks) { this._setBlocksConstraint('maxBlocks', maxBlocks) },\n\n  getMinSiblingBlocks () { return this._minSiblingBlocks },\n  setMinSiblingBlocks (minSiblingBlocks) { this._setBlocksConstraint('minSiblingBlocks', minSiblingBlocks) },\n\n  getMaxSiblingBlocks () { return this._maxSiblingBlocks },\n  setMaxSiblingBlocks (maxSiblingBlocks) { this._setBlocksConstraint('maxSiblingBlocks', maxSiblingBlocks) },\n\n  getMinChildBlocks () { return this._minChildBlocks },\n  getMaxChildBlocks () { return this._maxChildBlocks },\n  setMinChildBlocks (minChildBlocks) { this._setBlocksConstraint('minChildBlocks', minChildBlocks) },\n  setMaxChildBlocks (maxChildBlocks) { this._setBlocksConstraint('maxChildBlocks', maxChildBlocks) },\n  _setBlocksConstraint (mode, value) {\n    const privateProp = `_${mode}`\n    const jqueryProp = `$${mode}Input`\n    const oldValue = this[privateProp]\n    const newValue = Math.max(0, value | 0)\n\n    if (newValue === 0) {\n      this[jqueryProp].val(null)\n    }\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[privateProp] > 0 && parseInt(this[jqueryProp].val()) !== this[privateProp]) {\n        this[jqueryProp].val(this[privateProp])\n      }\n\n      this.trigger('change', {\n        property: mode,\n        oldValue,\n        newValue: this[privateProp]\n      })\n    }\n  },\n\n  getTopLevel () { return this._topLevel ?? this._originalSettings.topLevel },\n  setTopLevel (topLevel) { this._setLightswitchField('topLevel', topLevel) },\n\n  _setLightswitchField (property, value) {\n    const privateProp = `_${property}`\n    const lightswitchProp = `${privateProp}Lightswitch`\n    const oldValue = this[privateProp]\n    const newValue = !!value\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[lightswitchProp] && this[lightswitchProp].on !== this[privateProp]) {\n        this[lightswitchProp].on = this[privateProp]\n        this[lightswitchProp].toggle()\n      }\n\n      this.trigger('change', {\n        property,\n        oldValue,\n        newValue\n      })\n    }\n  },\n\n  getChildBlocks () {\n    const select = this._childBlocksSelect\n    const childBlocks = []\n\n    if (typeof select === 'undefined') {\n      return this._childBlocks === true ? true : Array.from(this._childBlocks ?? [])\n    }\n\n    if (select.$all.prop('checked')) {\n      return true\n    }\n\n    select.$options.each(function (index) {\n      const $option = $(this)\n\n      if ($option.prop('checked')) {\n        childBlocks.push($option.val())\n      }\n    })\n\n    return childBlocks.length > 0 ? childBlocks : false\n  },\n\n  setChildBlocks (childBlocks) {\n    if (typeof childBlocks === 'undefined') {\n      childBlocks = this._childBlocks\n    }\n\n    const select = this._childBlocksSelect\n\n    if (childBlocks === true || childBlocks === '*') {\n      select.$all.prop('checked', true)\n      select.onAllChange()\n    } else if (Array.isArray(childBlocks)) {\n      select.$all.prop('checked', false)\n\n      for (const handle of childBlocks) {\n        select.$options.filter(`[value=\"${handle}\"]`).prop('checked', true)\n      }\n    } else {\n      select.$all.prop('checked', false)\n      select.$options.prop('checked', false)\n    }\n\n    this._refreshChildBlockSettings(false)\n  },\n\n  addChildBlockType (blockType) {\n    if (!this._childBlockTypes.includes(blockType)) {\n      const settings = blockType.getSettings()\n      const $existingCheckbox = this.$childBlocksContainer.find(`[data-neo-btsc=\"input.${settings.getId()}\"]`)\n      const $checkbox = $existingCheckbox.length > 0\n        ? $existingCheckbox\n        : this._generateChildBlocksCheckbox(settings)\n\n      this._childBlockTypes.push(blockType)\n\n      if ($existingCheckbox.length === 0) {\n        this.$childBlocksContainer.append($checkbox)\n        this._refreshChildBlockType(blockType)\n      }\n\n      const select = this._childBlocksSelect\n      const allChecked = select.$all.prop('checked')\n      select.$options = select.$options.add($checkbox.find('input'))\n      if (allChecked) select.onAllChange()\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.on('change' + eventNs, e => this['@onChildBlockTypeChange'](e, blockType, $checkbox))\n      settings.on('destroy' + eventNs, e => this.removeChildBlockType(blockType))\n    }\n  },\n\n  removeChildBlockType (blockType) {\n    const index = this._childBlockTypes.indexOf(blockType)\n    if (index >= 0) {\n      this._childBlockTypes.splice(index, 1)\n\n      const settings = blockType.getSettings()\n      const $checkbox = this.$childBlocksContainer.children().eq(index)\n\n      $checkbox.remove()\n\n      const select = this._childBlocksSelect\n      select.$options = select.$options.remove($checkbox.find('input'))\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.off(eventNs)\n\n      this._refreshChildBlockType(blockType)\n    }\n  },\n\n  getConditions () {\n    NS.enter(this._templateNs)\n    const baseInputName = NS.toFieldName().replaceAll('\\\\', '\\\\\\\\')\n    NS.leave()\n    const baseConditionInputNameWithExtraSlash = `${baseInputName}[conditions]`\n    const baseConditionInputName = baseConditionInputNameWithExtraSlash.replaceAll('\\\\\\\\', '\\\\')\n    const conditionInputNames = this.$container\n      .find(`[name^=\"${baseConditionInputNameWithExtraSlash}\"]`)\n      .get()\n      .map((condition) => condition.name)\n\n    const allFormData = new window.FormData(this.$container.closest('form').get(0))\n    const conditionsData = {}\n\n    conditionInputNames.forEach((conditionInputName) => {\n      let conditionsSubData = conditionsData\n      const conditionsCurrentPath = [baseConditionInputName]\n      const conditionsDataPath = conditionInputName\n        .replace(baseConditionInputName, '')\n        .slice(1, -1)\n        .split('][')\n\n      conditionsDataPath.forEach((pathStep, i) => {\n        conditionsCurrentPath.push(`[${pathStep}]`)\n\n        if (pathStep !== '' && !(pathStep in conditionsSubData)) {\n          if (pathStep === 'values') {\n            conditionsSubData[pathStep] = []\n          } else if (i < conditionsDataPath.length - 1) {\n            conditionsSubData[pathStep] = {}\n          } else {\n            conditionsSubData[pathStep] = allFormData.get(conditionsCurrentPath.join(''))\n          }\n        } else if (pathStep === '') {\n          conditionsSubData.push(...allFormData.getAll(conditionsCurrentPath.join('')))\n        }\n\n        conditionsSubData = conditionsSubData[pathStep]\n      })\n    })\n\n    return conditionsData\n  },\n\n  /**\n   * @since 3.8.0\n   */\n  refreshChildBlockTypes (childBlockTypes) {\n    if (childBlockTypes) {\n      this._childBlockTypes = childBlockTypes\n    }\n\n    this._childBlockTypes.forEach((childBlockType) => this._refreshChildBlockType(childBlockType))\n  },\n\n  _refreshChildBlockType (blockType) {\n    const $sidebarContainer = blockType.getField().$sidebarContainer\n    const $sidebarItem = $sidebarContainer.find(`[data-neo-bt=\"container.${blockType.getId()}\"]`)\n    let $refreshedBlockType = this.$childBlocksContainer.children(`[data-neo-btsc=\"container.${blockType.getId()}\"]`)\n\n    if ($refreshedBlockType.length === 0) {\n      // New block type, create checkbox\n      $refreshedBlockType = this._generateChildBlocksCheckbox(blockType.getSettings())\n    }\n\n    if ($sidebarItem.length > 0) {\n      // Block type reordered\n      const position = $sidebarItem.index('.nc_sidebar_list_item:not(.type-heading)')\n      const $currentChildBlockTypeAtPos = this.$childBlocksContainer.children().eq(position)\n\n      if ($currentChildBlockTypeAtPos.length > 0) {\n        $refreshedBlockType.insertBefore($currentChildBlockTypeAtPos)\n      } else {\n        // Added to the end\n        $refreshedBlockType.appendTo(this.$childBlocksContainer)\n      }\n    } else {\n      // Block type deleted\n      $refreshedBlockType.remove()\n    }\n  },\n\n  _refreshChildBlockSettings (animate) {\n    const showSettings = !!this.getChildBlocks()\n    this._refreshSetting(this.$minChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$maxChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$groupChildBlockTypesContainer, showSettings, animate)\n  },\n\n  '@onChildBlockTypeChange' (e, blockType, $checkbox) {\n    const $neo = $checkbox.find('[data-neo-btsc]')\n    const $input = $neo.filter(`[data-neo-btsc=\"input.${blockType.getSettings().getId()}\"]`)\n    const $labelText = $neo.filter('[data-neo-btsc=\"text.label\"]')\n\n    switch (e.property) {\n      case 'name':\n        $labelText.text(e.newValue)\n        break\n\n      case 'handle':\n        $input.val(e.newValue)\n        break\n    }\n  }\n},\n{\n  _totalNewBlockTypes: 0,\n\n  getNewId () {\n    return `new${this._totalNewBlockTypes++}`\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Item from './Item'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: []\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    this.base(settings)\n\n    settings = Object.assign({}, _defaults, settings)\n\n    const settingsObj = this.getSettings()\n    this._templateNs = NS.parse(settings.namespace)\n    const sidebarItem = this.getField()?.$sidebarContainer.find(`[data-neo-g=\"container.${this.getId()}`)\n\n    if (sidebarItem?.length > 0) {\n      this.$container = sidebarItem\n    } else {\n      this.$container = this._generateGroup(settingsObj)\n    }\n\n    const $neo = this.$container.find('[data-neo-g]')\n    this.$nameText = $neo.filter('[data-neo-g=\"text.name\"]')\n    this.$moveButton = $neo.filter('[data-neo-g=\"button.move\"]')\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n    }\n\n    this.deselect()\n  },\n\n  _generateGroup (settings) {\n    const sortOrderNamespace = [...this._templateNs]\n    sortOrderNamespace.pop()\n    NS.enter(sortOrderNamespace)\n    const sortOrderName = NS.fieldName('sortOrder')\n    NS.leave()\n\n    return $(`\n      <div class=\"nc_sidebar_list_item type-heading\" data-neo-g=\"container.${this.getId()}\">\n        <div class=\"label\" data-neo-g=\"text.name\">${settings.getName() ?? ''}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-g=\"button.move\"></a>\n        <input type=\"hidden\" name=\"${sortOrderName}[]\" value=\"group:${this.getId()}\" data-neo-g=\"input.sortOrder\">\n      </div>`)\n  },\n\n  /**\n   * @inheritDoc\n   */\n  load () {\n    if (this._loaded) {\n      // Already loaded\n      return Promise.resolve()\n    }\n\n    this.trigger('beforeLoad')\n    const data = {\n      groupId: this.getId()\n    }\n\n    return new Promise((resolve, reject) => {\n      Craft.sendActionRequest('POST', 'neo/configurator/render-block-type-group', { data })\n        .then(response => {\n          this.getSettings().createContainer({\n            html: response.data.settingsHtml.replace(/__NEOBLOCKTYPEGROUP_ID__/g, data.groupId),\n            js: response.data.settingsJs.replace(/__NEOBLOCKTYPEGROUP_ID__/g, data.groupId)\n          })\n          this._loaded = true\n\n          this.trigger('afterLoad')\n          resolve()\n        })\n        .catch(reject)\n    })\n  },\n\n  getId () {\n    return this.getSettings().getId()\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const selected = this.isSelected()\n\n    if (settings?.$container ?? false) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    if (selected) {\n      this.load()\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport NS from '../namespace'\nimport Settings from './Settings'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  name: '',\n  alwaysShowDropdown: null,\n  defaultAlwaysShowGroupDropdowns: true\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n\n  $container: null,\n  $sortOrderInput: new $(),\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $maxBlocksInput: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id\n    this._alwaysShowDropdown = settings.alwaysShowDropdown\n    this._defaultAlwaysShowGroupDropdowns = settings.defaultAlwaysShowGroupDropdowns\n    this._originalSettings = settings\n\n    if (typeof settings.html !== 'undefined' && settings.html !== null) {\n      this.createContainer({\n        html: settings.html,\n        js: settings.js\n      })\n    }\n  },\n\n  createContainer (containerData) {\n    // Only create it if it doesn't already exist\n    if (this.$container !== null) {\n      return\n    }\n\n    this.$container = $(containerData.html)\n    this._js = containerData.js ?? ''\n\n    const $neo = this.$container.find('[data-neo-gs]')\n    this.$nameInput = $neo.filter('[data-neo-gs=\"input.name\"]')\n    this.$deleteButton = $neo.filter('[data-neo-gs=\"button.delete\"]')\n    this.$alwaysShowDropdownContainer = $neo.filter('[data-neo-gs=\"container.alwaysShowDropdown\"]')\n\n    this.setName(this._originalSettings.name)\n\n    this.addListener(this.$nameInput, 'keyup change', () => this.setName(this.$nameInput.val()))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this group?'))) {\n        this.destroy()\n      }\n    })\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getName () { return this._name ?? this._originalSettings.name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      this.$nameInput.val(this._name)\n      this._refreshAlwaysShowDropdown()\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getAlwaysShowDropdown () { return this._alwaysShowDropdown ?? this._originalSettings.alwaysShowDropdown },\n\n  _refreshAlwaysShowDropdown (animate) {\n    this._refreshSetting(this.$alwaysShowDropdownContainer, !!this._name, animate)\n  }\n},\n{\n  _totalNewGroups: 0,\n\n  getNewId () {\n    return `new${this._totalNewGroups++}`\n  }\n})\n","import $ from 'jquery'\nimport '../jquery-extensions'\n\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport { v4 as uuidv4 } from 'uuid'\nimport NS from '../namespace'\n\nimport BlockType from './BlockType'\nimport BlockTypeSettings from './BlockTypeSettings'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\nimport Group from './Group'\nimport GroupSettings from './GroupSettings'\nimport './styles/configurator.scss'\n\nconst _defaults = {\n  namespace: [],\n  blockTypes: [],\n  groups: [],\n  blockTypeSettingsHtml: '',\n  blockTypeSettingsJs: '',\n  fieldLayoutHtml: '',\n  groupSettingsHtml: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n  _items: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    const inputIdPrefix = Craft.formatInputId(settings.namespace)\n    const $field = $(`#${inputIdPrefix}-neo-configurator`)\n    this.$container = $field.children('.field').children('.input')\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._blockTypeSettingsHtml = settings.blockTypeSettingsHtml\n    this._blockTypeSettingsJs = settings.blockTypeSettingsJs\n    this._fieldLayoutHtml = settings.fieldLayoutHtml\n    this._blockTypeGroupSettingsHtml = settings.blockTypeGroupSettingsHtml\n    this._items = []\n\n    const $neo = this.$container.find('[data-neo]')\n    this.$mainContainer = $neo.filter('[data-neo=\"container.main\"]')\n    this.$sidebarContainer = $neo.filter('[data-neo=\"container.sidebar\"]')\n    this.$blockTypesContainer = $neo.filter('[data-neo=\"container.blockTypes\"]')\n    this.$settingsContainer = $neo.filter('[data-neo=\"container.settings\"]')\n    this.$fieldLayoutContainer = $neo.filter('[data-neo=\"container.fieldLayout\"]')\n    this.$blockTypeButton = $neo.filter('[data-neo=\"button.blockType\"]')\n    this.$groupButton = $neo.filter('[data-neo=\"button.group\"]')\n    this.$settingsButton = $neo.filter('[data-neo=\"button.settings\"]')\n    this.$fieldLayoutButton = $neo.filter('[data-neo=\"button.fieldLayout\"]')\n\n    this._itemSort = new Garnish.DragSort(null, {\n      container: this.$blockTypesContainer,\n      handle: '[data-neo-bt=\"button.move\"], [data-neo-g=\"button.move\"]',\n      axis: 'y',\n      onSortChange: () => this._updateItemOrder()\n    })\n\n    // Add the existing block types and groups\n    const existingItems = []\n    const btNamespace = [...this._templateNs, 'items', 'blockTypes']\n    const gNamespace = [...this._templateNs, 'items', 'groups']\n\n    for (const btInfo of settings.blockTypes) {\n      const btSettings = new BlockTypeSettings({\n        namespace: [...btNamespace, btInfo.id],\n        sortOrder: btInfo.sortOrder,\n        id: btInfo.id,\n        name: btInfo.name,\n        handle: btInfo.handle,\n        description: btInfo.description,\n        iconId: btInfo.iconId,\n        enabled: btInfo.enabled,\n        ignorePermissions: btInfo.ignorePermissions,\n        minBlocks: btInfo.minBlocks,\n        maxBlocks: btInfo.maxBlocks,\n        minSiblingBlocks: btInfo.minSiblingBlocks,\n        maxSiblingBlocks: btInfo.maxSiblingBlocks,\n        minChildBlocks: btInfo.minChildBlocks,\n        maxChildBlocks: btInfo.maxChildBlocks,\n        topLevel: btInfo.topLevel,\n        html: btInfo.settingsHtml,\n        js: btInfo.settingsJs,\n        errors: btInfo.errors,\n        fieldLayoutId: btInfo.fieldLayoutId,\n        fieldLayoutConfig: btInfo.fieldLayoutConfig,\n        childBlocks: btInfo.childBlocks,\n        childBlockTypes: existingItems.filter(item => item instanceof BlockType)\n      })\n\n      const blockType = new BlockType({\n        namespace: btNamespace,\n        field: this,\n        settings: btSettings\n      })\n\n      blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n      blockType.on('paste.configurator', () => this._pasteBlockType())\n      blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType))\n      blockType.on('beforeLoad.configurator', () => {\n        this.$fieldLayoutContainer.append(\n          $('<span class=\"spinner\"/></span>')\n        )\n        this.$settingsContainer.append(\n          $('<span class=\"spinner\"/></span>')\n        )\n      })\n      blockType.on('afterLoad.configurator', () => {\n        this.$fieldLayoutContainer.children('.spinner').remove()\n        this.$settingsContainer.children('.spinner').remove()\n        this.addItem(blockType)\n        const blockTypeSettings = blockType.getSettings()\n        blockTypeSettings?.refreshChildBlockTypes(this.getBlockTypes())\n        blockTypeSettings?.setChildBlocks()\n      })\n      existingItems.push(blockType)\n    }\n\n    for (const gInfo of settings.groups) {\n      const gSettings = new GroupSettings({\n        namespace: [...gNamespace, gInfo.id],\n        sortOrder: gInfo.sortOrder,\n        id: gInfo.id,\n        name: gInfo.name,\n        alwaysShowDropdown: gInfo.alwaysShowDropdown,\n        defaultAlwaysShowGroupDropdowns: settings.defaultAlwaysShowGroupDropdowns\n      })\n\n      const group = new Group({\n        namespace: gNamespace,\n        field: this,\n        settings: gSettings\n      })\n\n      group.on('beforeLoad.configurator', () => this.$settingsContainer.append(\n        $('<span class=\"spinner\"/></span>')\n      ))\n      group.on('afterLoad.configurator', () => {\n        this.$settingsContainer.children('.spinner').remove()\n        this.addItem(group)\n      })\n      existingItems.push(group)\n    }\n\n    for (const item of existingItems.sort((a, b) => a.getSortOrder() - b.getSortOrder())) {\n      this.addItem(item)\n    }\n\n    for (const blockType of this.getBlockTypes()) {\n      const btSettings = blockType.getSettings()\n\n      if (btSettings?.$container) {\n        const info = settings.blockTypes.find(i => i.handle === btSettings.getHandle())\n        btSettings.setChildBlocks(info.childBlocks)\n      }\n    }\n\n    // Make sure menu states (for pasting block types) are updated when changing tabs\n    const refreshPasteOptions = () => {\n      const noPasteData = !window.localStorage.getItem('neo:copyBlockType')\n\n      for (const blockType of this.getBlockTypes()) {\n        blockType.$actionsMenu.find('[data-action=\"paste\"]').parent().toggleClass('disabled', noPasteData)\n      }\n    }\n\n    refreshPasteOptions()\n    this.addListener(document, 'visibilitychange.configurator', refreshPasteOptions)\n\n    this.selectTab('settings')\n\n    this.addListener(this.$blockTypeButton, 'click', '@newBlockType')\n    this.addListener(this.$groupButton, 'click', '@newGroup')\n    this.addListener(this.$settingsButton, 'click', () => this.selectTab('settings'))\n    this.addListener(this.$fieldLayoutButton, 'click', () => this.selectTab('fieldLayout'))\n  },\n\n  addItem (item, index = -1) {\n    const settings = item.getSettings()\n\n    if (!document.contains(item.$container[0])) {\n      this._insertAt(item.$container, index)\n    }\n\n    if (this._itemSort.$items.filter(item.$container).length === 0) {\n      this._itemSort.addItems(item.$container)\n    }\n\n    if (settings?.$container) {\n      this.$settingsContainer.append(settings.$container)\n\n      if (item instanceof BlockType) {\n        settings.initUi()\n      }\n    }\n\n    this.$mainContainer.removeClass('hidden')\n\n    this.addListener(item.$container, 'click', '@selectItem')\n    item.on('destroy.configurator', () => this.removeItem(item, false))\n\n    if (item instanceof BlockType) {\n      this._addFieldLayout(item.getFieldLayout())\n    }\n\n    this._items.push(item)\n\n    // Only bother updating the item order if the item wasn't just being appended\n    if (index >= 0 && index < this._items.length - 1) {\n      this._updateItemOrder()\n    }\n\n    if (item instanceof BlockType) {\n      for (const blockType of this.getBlockTypes()) {\n        const btSettings = blockType.getSettings()\n        if (btSettings?.$container) {\n          btSettings.addChildBlockType(item)\n        }\n      }\n    }\n\n    this.trigger('addItem', {\n      item,\n      index\n    })\n  },\n\n  _addFieldLayout (fieldLayout) {\n    if (fieldLayout) {\n      this.$fieldLayoutContainer.append(fieldLayout.$container)\n    }\n  },\n\n  removeItem (item, showConfirm) {\n    showConfirm = (typeof showConfirm === 'boolean' ? showConfirm : false)\n\n    if (showConfirm) {\n      const message = Craft.t('neo', 'Are you sure you want to delete this {type}?', {\n        type:\n        item instanceof BlockType\n          ? 'block type'\n          : item instanceof Group\n            ? 'group'\n            : 'item'\n      })\n\n      if (window.confirm(message)) {\n        this.removeItem(item, false)\n      }\n    } else {\n      const settings = item.getSettings()\n\n      this._itemSort.removeItems(item.$container)\n\n      item.$container.remove()\n\n      if (settings?.$container) {\n        settings.$container.remove()\n      }\n\n      if (item instanceof BlockType) {\n        const fieldLayout = item.getFieldLayout()\n        if (fieldLayout) fieldLayout.$container.remove()\n      }\n\n      this.removeListener(item.$container, 'click')\n      item.off('.configurator')\n\n      this._items = this._items.filter((oldItem) => oldItem !== item)\n\n      if (this._items.length === 0) {\n        this.$mainContainer.addClass('hidden')\n      }\n\n      this.trigger('removeItem', {\n        item\n      })\n    }\n  },\n\n  getItems () {\n    return Array.from(this._items)\n  },\n\n  getItemByElement ($element) {\n    return this._items.find(item => item.$container.is($element))\n  },\n\n  getSelectedItem () {\n    return this._items.find(item => item.isSelected())\n  },\n\n  selectItem (item, focusInput) {\n    focusInput = (typeof focusInput === 'boolean' ? focusInput : true)\n\n    const settings = item ? item.getSettings() : null\n\n    for (const i of this._items) {\n      const thisIsTheItem = i === item\n      i.toggleSelect(thisIsTheItem)\n\n      if (thisIsTheItem) {\n        const itemIsGroup = !(i instanceof BlockType)\n        this.$fieldLayoutButton.toggleClass('hidden', itemIsGroup)\n\n        if (itemIsGroup) {\n          this.selectTab('settings')\n        }\n      }\n    }\n\n    Craft.ElementThumbLoader.retryAll()\n\n    if (focusInput && settings && !Garnish.isMobileBrowser()) {\n      setTimeout(() => settings.getFocusInput().focus(), 100)\n    }\n  },\n\n  getBlockTypes () {\n    return this._items.filter(item => item instanceof BlockType)\n  },\n\n  getGroups () {\n    return this._items.filter(item => item instanceof Group)\n  },\n\n  selectTab (tab) {\n    this.$settingsContainer.toggleClass('hidden', tab !== 'settings')\n    this.$fieldLayoutContainer.toggleClass('hidden', tab !== 'fieldLayout')\n\n    this.$settingsButton.toggleClass('is-selected', tab === 'settings')\n    this.$fieldLayoutButton.toggleClass('is-selected', tab === 'fieldLayout')\n  },\n\n  _getNewBlockTypeSettingsHtml (blockTypeId) {\n    return this._blockTypeSettingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewBlockTypeSettingsJs (blockTypeId) {\n    return this._blockTypeSettingsJs.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewFieldLayoutHtml () {\n    return this._fieldLayoutHtml.replace(\n      /&quot;uid&quot;:&quot;([a-f0-9-]+)&quot;/,\n      `&quot;uid&quot;:&quot;${uuidv4()}&quot;`\n    )\n  },\n\n  _getNewBlockTypeGroupSettingsHtml (groupId) {\n    return this._blockTypeGroupSettingsHtml.replace(/__NEOBLOCKTYPEGROUP_ID__/g, groupId)\n  },\n\n  _updateItemOrder () {\n    const items = []\n\n    this._itemSort.$items.each((index, element) => {\n      const item = this.getItemByElement(element)\n\n      if (item) {\n        items.push(item)\n\n        if (item instanceof BlockType) {\n          item.getSettings().refreshChildBlockTypes()\n        }\n      }\n    })\n\n    this._items = items\n  },\n\n  _createBlockTypeFrom (oldBlockType) {\n    const namespace = [...this._templateNs, 'items', 'blockTypes']\n    let id\n    do {\n      id = BlockTypeSettings.getNewId()\n    } while (this.$blockTypesContainer.find(`[data-neo-bt=\"container.${id}\"]`).length > 0)\n\n    const selectedItem = this.getSelectedItem()\n    const selectedIndex = selectedItem ? selectedItem.getSortOrder() : -1\n\n    if (oldBlockType === null) {\n      const settings = new BlockTypeSettings({\n        childBlockTypes: this.getBlockTypes(),\n        id,\n        namespace: [...namespace, id],\n        sortOrder: this._items.length,\n        html: this._getNewBlockTypeSettingsHtml(id),\n        js: this._getNewBlockTypeSettingsJs(id)\n      })\n      const fieldLayout = new BlockTypeFieldLayout({\n        blockTypeId: id,\n        html: this._getNewFieldLayoutHtml(),\n        namespace: [...namespace, id]\n      })\n\n      this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n    } else {\n      const $spinner = $('<div class=\"nc_sidebar_list_item type-spinner\"><span class=\"spinner\"></span></div>')\n      this._insertAt($spinner, selectedIndex)\n      oldBlockType.load()\n        .then(() => {\n          const oldSettings = oldBlockType.getSettings()\n          const settingsObj = {\n            childBlocks: oldSettings.getChildBlocks(),\n            conditions: oldSettings.getConditions(),\n            // Set a timestamp on the handle so it doesn't clash with the old one\n            handle: `${oldSettings.getHandle()}_${Date.now()}`,\n            id,\n            minBlocks: oldSettings.getMinBlocks(),\n            maxBlocks: oldSettings.getMaxBlocks(),\n            minChildBlocks: oldSettings.getMinChildBlocks(),\n            maxChildBlocks: oldSettings.getMaxChildBlocks(),\n            minSiblingBlocks: oldSettings.getMinSiblingBlocks(),\n            maxSiblingBlocks: oldSettings.getMaxSiblingBlocks(),\n            name: oldSettings.getName(),\n            description: oldSettings.getDescription(),\n            iconId: oldSettings.getIconId(),\n            enabled: oldSettings.getEnabled(),\n            ignorePermissions: oldSettings.getIgnorePermissions(),\n            sortOrder: this._items.length,\n            topLevel: oldSettings.getTopLevel()\n          }\n          const settings = new BlockTypeSettings({\n            ...settingsObj,\n            childBlockTypes: this.getBlockTypes(),\n            namespace: [...namespace, id]\n          })\n          const layout = oldBlockType.getFieldLayout().getConfig()\n          const data = {\n            settings: settingsObj,\n            layout: layout.tabs.length > 0 ? layout : null\n          }\n\n          Craft.queue.push(() => new Promise((resolve, reject) => {\n            Craft.sendActionRequest('POST', 'neo/configurator/render-block-type', { data })\n              .then(response => {\n                const fieldLayout = new BlockTypeFieldLayout({\n                  blockTypeId: id,\n                  html: response.data.layoutHtml,\n                  namespace: [...namespace, id]\n                })\n                settings.createContainer({\n                  html: response.data.settingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, id),\n                  js: response.data.settingsJs.replace(/__NEOBLOCKTYPE_ID__/g, id)\n                })\n\n                this.$blockTypesContainer.find('.type-spinner').remove()\n                this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n                resolve()\n              })\n              .catch(reject)\n          }))\n        })\n        .catch(() => Craft.cp.displayError(Craft.t('neo', 'Couldn’t create new block type.')))\n    }\n  },\n\n  _initBlockType (namespace, settings, fieldLayout, index) {\n    const blockType = new BlockType({\n      namespace,\n      field: this,\n      settings,\n      fieldLayout\n    })\n\n    this.addItem(blockType, index)\n    this.selectItem(blockType)\n    this.selectTab('settings')\n\n    blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n    blockType.on('paste.configurator', () => this._pasteBlockType())\n    blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType))\n  },\n\n  _copyBlockType (blockType) {\n    blockType.load()\n      .then(() => {\n        const settings = blockType.getSettings()\n        const data = {\n          childBlocks: settings.getChildBlocks(),\n          conditions: settings.getConditions(),\n          description: settings.getDescription(),\n          enabled: settings.getEnabled(),\n          iconId: settings.getIconId(),\n          ignorePermissions: settings.getIgnorePermissions(),\n          handle: settings.getHandle(),\n          layout: blockType.getFieldLayout().getConfig(),\n          minBlocks: settings.getMinBlocks(),\n          maxBlocks: settings.getMaxBlocks(),\n          minChildBlocks: settings.getMinChildBlocks(),\n          maxChildBlocks: settings.getMaxChildBlocks(),\n          minSiblingBlocks: settings.getMinSiblingBlocks(),\n          maxSiblingBlocks: settings.getMaxSiblingBlocks(),\n          name: settings.getName(),\n          topLevel: settings.getTopLevel()\n        }\n\n        window.localStorage.setItem('neo:copyBlockType', JSON.stringify(data))\n        this.getBlockTypes().forEach(bt => bt.$actionsMenu.find('[data-action=\"paste\"]').parent().removeClass('disabled'))\n      })\n      .catch(() => Craft.cp.displayError(Craft.t('neo', 'Couldn’t copy block type.')))\n  },\n\n  _pasteBlockType () {\n    const encodedData = window.localStorage.getItem('neo:copyBlockType')\n\n    if (!encodedData) {\n      return\n    }\n\n    const data = JSON.parse(encodedData)\n    const blockTypeHandles = this.getBlockTypes().map(bt => bt.getSettings().getHandle())\n    const childBlocks = Array.isArray(data.childBlocks)\n      ? data.childBlocks.filter(cb => blockTypeHandles.includes(cb))\n      : (data.childBlocks ? true : [])\n    const settings = new BlockTypeSettings({\n      childBlocks,\n      childBlockTypes: this.getBlockTypes(),\n      conditions: data.conditions,\n      description: data.description,\n      iconId: data.iconId,\n      enabled: data.enabled,\n      ignorePermissions: data.ignorePermissions,\n      handle: data.handle,\n      minBlocks: data.minBlocks,\n      maxBlocks: data.maxBlocks,\n      minChildBlocks: data.minChildBlocks,\n      maxChildBlocks: data.maxChildBlocks,\n      minSiblingBlocks: data.minSiblingBlocks,\n      maxSiblingBlocks: data.maxSiblingBlocks,\n      name: data.name,\n      topLevel: data.topLevel,\n      html: ''\n    })\n\n    const fieldLayout = new BlockTypeFieldLayout({\n      html: this._getNewFieldLayoutHtml(),\n      layout: data.layout\n    })\n\n    const blockType = new BlockType({\n      field: this,\n      settings,\n      fieldLayout\n    })\n\n    this._createBlockTypeFrom(blockType)\n  },\n\n  _insertAt (element, index) {\n    const $element = $(element)\n\n    if (index >= 0 && index < this._items.length) {\n      $element.insertAt(index, this.$blockTypesContainer)\n    } else {\n      this.$blockTypesContainer.append($element)\n    }\n  },\n\n  '@newBlockType' () {\n    this._createBlockTypeFrom(null)\n  },\n\n  '@newGroup' () {\n    const namespace = [...this._templateNs, 'items', 'groups']\n    let id\n    do {\n      id = GroupSettings.getNewId()\n    } while (this.$blockTypesContainer.find(`[data-neo-g=\"container.${id}\"]`).length > 0)\n\n    const settings = new GroupSettings({\n      namespace: [...namespace, id],\n      html: this._getNewBlockTypeGroupSettingsHtml(id),\n      sortOrder: this._items.length,\n      id\n    })\n\n    const group = new Group({\n      namespace,\n      field: this,\n      settings\n    })\n\n    const selected = this.getSelectedItem()\n    const index = selected ? selected.getSortOrder() : -1\n\n    this.addItem(group, index)\n    this.selectItem(group)\n  },\n\n  '@selectItem' (e) {\n    const item = this.getItemByElement(e.currentTarget)\n\n    this.selectItem(item)\n  }\n})\n","import Configurator from './configurator/Configurator'\n\nconst context = window ?? this\nconst configurators = []\n\ncontext.Neo = {\n  Configurator,\n  configurators,\n\n  createConfigurator (settings = {}) {\n    const configurator = new Configurator(settings)\n    configurators.push(configurator)\n\n    return configurator\n  }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","jQuery","$","insertAt","index","$parent","this","each","prepend","children","eq","after","Garnish","Craft","randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","Error","byteToHex","i","push","toString","slice","unsafeStringify","arr","offset","options","buf","rnds","random","_stack","enter","segments","join","arguments","length","undefined","fromFieldName","joined","getNamespace","enterByFieldName","fieldName","leave","pop","Array","from","parse","value","indexOf","split","separator","prefix","toFieldName","replace","match","_defaults","settings","extend","$container","_field","_selected","init","assign","field","_settings","load","Promise","resolve","getField","getSettings","getSortOrder","select","toggleSelect","deselect","trigger","selected","isSelected","namespace","html","layout","id","uid","blockId","blockName","_templateNs","NS","_id","_uid","_blockTypeId","blockTypeId","find","removeAttr","nameInput","name","concat","JSON","stringify","_fld","customizableTabs","customizableUi","updateChildBlocksUiElement","selector","$uiLibraryElement","$uiLibraryElements","filter","$tabUiElement","$tabContainer","toggleClass","hasClass","removeClass","_tabObserver","window","MutationObserver","observe","childList","subtree","getId","getUid","getBlockTypeId","getConfig","newConfig","tabs","tab","config","newElements","element","elements","newElement","fieldLayout","Item","_loaded","_this$getField","base","settingsObj","_fieldLayout","sidebarItem","$sidebarContainer","_generateBlockType","$neo","$nameText","$handleText","$moveButton","$actionsButton","menubtn","_actionsMenu","data","on","e","$actionsMenu","menu","addListener","stopPropagation","_updateTemplate","sortOrderNamespace","sortOrderName","errors","getErrors","hasErrors","isArray","keys","getName","getHandle","getFieldLayout","_this$getFieldLayout$","_this$getFieldLayout","getFieldLayoutConfig","layoutId","getFieldLayoutId","reject","then","response","headHtml","bodyHtml","BlockTypeFieldLayout","layoutHtml","createContainer","settingsHtml","js","settingsJs","catch","_settings$$container","text","getTopLevel","_this$_actionsMenu","$option","option","hideMenu","attr","confirm","destroy","getFocusElement","_this$$foot","$foot","remove","_refreshSetting","showSetting","animate","css","opacity","marginBottom","outerHeight","velocity","addClass","BlockTypeIconSelect","constructor","container","_this$imageContainer$","_this$imageContainer","_this$imageContainer$2","_this$imageContainer2","_this$btnRemove","_defineProperty","imageContainer","querySelector","image","imageText","menuItems","querySelectorAll","btnSet","btnRemove","input","addEventListener","_","forEach","item","_item$querySelector","_item$querySelector2","filename","textContent","url","getAttribute","set","_this$image","_this$input","_this$btnRemove2","setAttribute","classList","_this$image2","_this$input2","_this$btnRemove3","add","sortOrder","fieldLayoutId","fieldLayoutConfig","handle","description","enabled","ignorePermissions","minBlocks","maxBlocks","minSiblingBlocks","maxSiblingBlocks","minChildBlocks","maxChildBlocks","topLevel","childBlocks","childBlockTypes","Settings","_childBlockTypes","_initialised","$nameInput","$handleInput","$descriptionInput","$minBlocksInput","$maxBlocksInput","$minSiblingBlocksInput","$maxSiblingBlocksInput","$minChildBlocksInput","$maxChildBlocksInput","$iconContainer","_childBlocks","_fieldLayoutId","_fieldLayoutConfig","_errors","_settingsChildBlockTypes","_originalSettings","_iconSelector","_afterCreateContainer","setName","setHandle","setDescription","_setIconId","iconId","setEnabled","setIgnorePermissions","setMinBlocks","setMaxBlocks","setMinSiblingBlocks","setMaxSiblingBlocks","setMinChildBlocks","setMaxChildBlocks","setTopLevel","containerData","_containerData$js","_js","$iconIdContainer","$enabledInput","$enabledContainer","$ignorePermissionsInput","$ignorePermissionsContainer","$minChildBlocksContainer","$maxChildBlocksContainer","$topLevelInput","$topLevelContainer","$groupChildBlockTypesInput","$groupChildBlockTypesContainer","$childBlocksInput","$childBlocksContainer","$deleteButton","initUi","append","_childBlocksSelect","_enabledLightswitch","_ignorePermissionsLightswitch","_topLevelLightswitch","_groupChildBlockTypesLightswitch","_handleGenerator","stopListening","blockType","addChildBlockType","setChildBlocks","val","listening","setTimeout","$iconIdInput","_refreshChildBlockSettings","_generateChildBlocksCheckbox","getFocusInput","isNew","test","_this$_name","_name","oldName","property","oldValue","newValue","_this$_handle","_handle","oldHandle","getDescription","_description","oldDescription","getIconId","_iconId","oldIconId","getEnabled","_enabled","_setLightswitchField","getIgnorePermissions","_ignorePermissions","ignore","getMinBlocks","_minBlocks","_setBlocksConstraint","getMaxBlocks","_maxBlocks","getMinSiblingBlocks","_minSiblingBlocks","getMaxSiblingBlocks","_maxSiblingBlocks","getMinChildBlocks","_minChildBlocks","getMaxChildBlocks","_maxChildBlocks","mode","privateProp","jqueryProp","Math","max","parseInt","_this$_topLevel","_topLevel","lightswitchProp","toggle","getChildBlocks","_this$_childBlocks","$all","$options","onAllChange","includes","$existingCheckbox","$checkbox","_refreshChildBlockType","allChecked","eventNs","removeChildBlockType","splice","off","getConditions","baseInputName","replaceAll","baseConditionInputNameWithExtraSlash","baseConditionInputName","conditionInputNames","map","condition","allFormData","FormData","closest","conditionsData","conditionInputName","conditionsSubData","conditionsCurrentPath","conditionsDataPath","pathStep","getAll","refreshChildBlockTypes","childBlockType","$sidebarItem","$refreshedBlockType","position","$currentChildBlockTypeAtPos","insertBefore","appendTo","showSettings","$input","$labelText","_totalNewBlockTypes","getNewId","_generateGroup","_settings$getName","groupId","alwaysShowDropdown","defaultAlwaysShowGroupDropdowns","$sortOrderInput","_alwaysShowDropdown","_defaultAlwaysShowGroupDropdowns","$alwaysShowDropdownContainer","_refreshAlwaysShowDropdown","getAlwaysShowDropdown","_this$_alwaysShowDrop","_totalNewGroups","blockTypes","groups","blockTypeSettingsHtml","blockTypeSettingsJs","fieldLayoutHtml","groupSettingsHtml","_items","inputIdPrefix","$field","_blockTypeSettingsHtml","_blockTypeSettingsJs","_fieldLayoutHtml","_blockTypeGroupSettingsHtml","blockTypeGroupSettingsHtml","$mainContainer","$blockTypesContainer","$settingsContainer","$fieldLayoutContainer","$blockTypeButton","$groupButton","$settingsButton","$fieldLayoutButton","_itemSort","axis","onSortChange","_updateItemOrder","existingItems","btNamespace","gNamespace","btInfo","btSettings","BlockTypeSettings","BlockType","_copyBlockType","_pasteBlockType","_createBlockTypeFrom","addItem","blockTypeSettings","getBlockTypes","gInfo","gSettings","GroupSettings","group","Group","sort","b","info","refreshPasteOptions","noPasteData","localStorage","getItem","parent","document","selectTab","contains","_insertAt","$items","addItems","removeItem","_addFieldLayout","showConfirm","message","type","removeItems","removeListener","oldItem","getItems","getItemByElement","$element","is","getSelectedItem","selectItem","focusInput","thisIsTheItem","itemIsGroup","retryAll","focus","getGroups","_getNewBlockTypeSettingsHtml","_getNewBlockTypeSettingsJs","_getNewFieldLayoutHtml","uuidv4","_getNewBlockTypeGroupSettingsHtml","items","oldBlockType","selectedItem","selectedIndex","_initBlockType","$spinner","oldSettings","conditions","Date","now","_objectSpread","displayError","setItem","bt","encodedData","blockTypeHandles","cb","currentTarget","context","_window","configurators","Neo","Configurator","createConfigurator","configurator"],"sourceRoot":""}